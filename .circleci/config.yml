# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/configuration-reference/#commands
commands:
  run-on-gcp:
    parameters:
      instance-name:
        description: Name of instance
        type: string
      create-instance-args:
        description: Extra arguments to use when creating instance
        type: string
        default: --preemptible --tags=circleci
      steps:
        description: Steps to run on GCP instance
        type: steps
        default: []
    steps:
      - run:
          name: Create GCP instance
          command: |
            gcloud config set disable_usage_reporting false

            # Authenticate to gcloud with service account
            echo "$GCLOUD_SERVICE_KEY" | gcloud auth activate-service-account --key-file=-

            # Set GCP project id and compute zone
            gcloud config set project "$GOOGLE_PROJECT_ID"
            gcloud config set compute/zone "$GOOGLE_COMPUTE_ZONE"

            # Create firewall for instance
            CIRCLECI_IP=$(curl https://checkip.amazonaws.com)
            gcloud compute firewall-rules create "<< parameters.instance-name >>" \
              --source-ranges "$CIRCLECI_IP" \
              --action allow --rules tcp:22 \
              --target-tags "<< parameters.instance-name >>"

            # Create GCP instance
            gcloud compute instances create \
              "<< parameters.instance-name >>" \
              << parameters.create-instance-args >> \
              --tags "<< parameters.instance-name >>"

            # SSH into machine to generate a ssh key
            gcloud compute ssh --quiet "$INSTANCE_USER@<< parameters.instance-name >>" --command=exit

            # Replace bash with executable that forwards commands to the instance
            mv /bin/bash /tmp/bash.real
            echo >/bin/bash '#!/tmp/bash.real
            gcloud compute ssh --quiet "$INSTANCE_USER@<< parameters.instance-name >>" --command="bash $(printf "%q " "$@")"
            if [[ "$?" != "0" ]]; then
              /tmp/cleanup
              exit 1
            fi'
            chmod +x /bin/bash

            echo >/tmp/cleanup '#!/tmp/bash.real
            gcloud compute instances delete --quiet "<< parameters.instance-name >>"
            gcloud compute firewall-rules delete --quiet "<< parameters.instance-name >>"
            mv /bin/bash /tmp/bash.deleted
            mv /tmp/bash.real /bin/bash'
            chmod +x /tmp/cleanup
      - steps: << parameters.steps >>
      - run:
          name: Delete GCP instance
          shell: /tmp/bash.real
          command: /tmp/cleanup
  gcp-checkout:
    steps:
      - run:
          name: Checkout
          command: |
            if ! command -v git &>/dev/null; then
              sudo apt update
              sudo apt install -y git
            fi

            if [[ -d "~/audius-protocol" ]]; then
              cd ~/audius-protocol
              git remote set-url origin "<< pipeline.project.git_url >>" || true
              git fetch --force --tags origin
            else
              mkdir -p ~/audius-protocol
              cd ~/audius-protocol
              git clone --no-checkout "<< pipeline.project.git_url >>" .
            fi

            git checkout --force "<< pipeline.git.revision >>"

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-gcp-image:
    resource_class: small
    docker:
      - image: google/cloud-sdk:412.0.0-slim
    steps:
      - run-on-gcp:
          instance-name: circleci-<< pipeline.git.revision >>
          create-instance-args: >-
            --preemptible
            --tags=circleci
            --machine-type=n2-custom-6-24576
            --boot-disk-size=64G
            --boot-disk-type=pd-ssd
            --no-boot-disk-auto-delete
          steps:
            - gcp-checkout
            - run: AUDIUS_DEV=false bash ~/audius-protocol/dev-tools/setup.sh
            - run: cd audius-protocol; dev-tools/audius-compose build; docker compose pull
      - run: |
          set +e
          gcloud compute images create --family=audius-protocol "audius-protocol-<< pipeline.git.revision >>"
          image_create_exit_code=$?
          gcloud compute disks delete --quiet "circleci-<< pipeline.git.revision >>"
          disk_delete_exit_code=$?
          if [[ "$image_create_exit_code" != "0" ]] || [[ "$disk_delete_exit_code" != "0" ]]; then
            exit 1
          fi

  test-creator-node:
    resource_class: small
    docker:
      - image: google/cloud-sdk:412.0.0-slim
    steps:
      - run-on-gcp:
          instance-name: circleci-<< pipeline.id >>-dp
          create-instance-args: >-
            --preemptible
            --tags=circleci
            --machine-type=n2-custom-6-24576
            --boot-disk-size=64G
            --boot-disk-type=pd-ssd
            --no-boot-disk-auto-delete
            --image=audius-protocol-<< pipeline.git.revision >>
          steps:
            - gcp-checkout
            - run: audius-compose test creator-node

  test-discovery-provider:
    resource_class: small
    docker:
      - image: google/cloud-sdk:412.0.0-slim
    steps:
      - run-on-gcp:
          instance-name: circleci-<< pipeline.id >>-dp
          create-instance-args: >-
            --preemptible
            --tags=circleci
            --machine-type=n2-custom-6-24576
            --boot-disk-size=64G
            --boot-disk-type=pd-ssd
            --no-boot-disk-auto-delete
            --image=audius-protocol-<< pipeline.git.revision >>
          steps:
            - gcp-checkout
            - run: audius-compose test discovery-provider

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test:
    jobs:
      - build-gcp-image
      - test-creator-node:
          requires:
            - build-gcp-image
      - test-discovery-provider:
          requires:
            - build-gcp-image
