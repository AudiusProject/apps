# Root CircleCI configuration
# Configuration for individual packages lives in .circleci/src/{commands,jobs,workflows}

version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.3.1
  path-filtering: circleci/path-filtering@0.1.1

parameters:
  workflow:
    type: string
    default: 'main'

commands:
  create_concatenated_patch_file:
    description: 'Concatenate all patch-files. File is used as checksum source for part of caching key.'
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine patch-files to single file
          command: ls -d -- packages/*/patches/*.patch | xargs cat > << parameters.filename >>

jobs:
  # Generate the CircleCI continue_config.yml from .circleci/src
  generate-config:
    docker:
      - image: cimg/base:2021.04
    steps:
      # The circleci cli exposed in the image doesn't support config packing
      # so we install a version that does
      - run:
          name: Install cli
          command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR=~/cli bash
      - checkout
      - run:
          name: Generate config
          command: ~/cli config pack .circleci/src > .circleci/continue_config.yml
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/continue_config.yml

  init:
    working_directory: ~/audius-protocol
    docker:
      - image: cimg/node:18.17
    resource_class: large
    steps:
      - checkout

      - create_concatenated_patch_file:
          filename: combined-patch-file.txt

      - restore_cache:
          keys:
            - cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-patch-file.txt" }}

      - run:
          name: Install dependencies
          # If node_modules exists in cache, run postinstall. Otherwise, run npm ci
          command: |
            [[ ! -d node_modules ]] || npm run postinstall
            [[ -d node_modules ]] || npm ci

      - save_cache:
          key: cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-patch-file.txt" }}
          paths:
            - ./node_modules
            - ./packages/web/node_modules
            - ./packages/mobile/node_modules
            - ./packages/probers/node_modules
            - ./packages/embed/node_modules
            - ./packages/stems/node_modules
            - ./packages/harmony/node_modules
            - ./packages/common/node_modules
            - ./packages/libs/node_modules

      - save_cache:
          key: cache-{{ .Revision }}
          paths:
            - ./packages/stems/dist
            - ./packages/harmony/dist
            - ./packages/common/dist
            - ./packages/libs/dist

  generate-release:
    working_directory: ~/audius-protocol
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'd0:0b:a0:19:ac:46:58:e4:6c:ac:34:99:f6:1b:31:bb' # github.com
      - run:
          name: Set git config
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
      - run:
          name: Create branch
          command: |
            OLD_VERSION=$(jq -r .version discovery-provider/.version.json)
            NEW_VERSION=$(echo ${OLD_VERSION} | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')

            git checkout main

            jq --arg version "$NEW_VERSION" '.version=$version' mediorum/.version.json > /tmp/.version.json
            mv /tmp/.version.json mediorum/.version.json
            git add mediorum/.version.json

            jq --arg version "$NEW_VERSION" '.version=$version' discovery-provider/.version.json > /tmp/.version.json
            mv /tmp/.version.json discovery-provider/.version.json
            git add discovery-provider/.version.json

            GIT_DIFF=$(git log --pretty=format:'%an - %s [<https://github.com/AudiusProject/audius-protocol/commit/%H|%h>]' --abbrev-commit origin/release-v$OLD_VERSION..HEAD -- mediorum discovery-provider identity-service comms | sed 's/"/\\"/g' | tr -d '\r' | sed ':a;N;$!ba;s/\n/=DELIM@/g')
            git commit -m "Bump version to $NEW_VERSION"

            git branch "release-v$NEW_VERSION"
            git checkout "release-v$NEW_VERSION"

            git push --set-upstream origin main "release-v$NEW_VERSION"

            # Slack has a limit of 3000 characters per block, so we need to split the diff into multiple blocks
            max_lines=8
            json_content="{ \"blocks\": ["
            json_content+="{ \"type\": \"header\", \"text\": { \"type\": \"plain_text\", \"text\": \"New Protocol Release Branch (v$NEW_VERSION)\n\" } },"
            line_count=0
            block_content=""

            # Use =DELIM@ as a delimiter to split the diff into lines (so set Internal Field Separator to "@")
            buffer=""
            IFS="@"
            read -ra ADDR \<<< "$GIT_DIFF"
            for line in "${ADDR[@]}"; do
                line="${buffer}${line}"

                # If the current line ends with "=DELIM", then it's a complete line, so process it and reset buffer
                if [ "${line: -6}" = "=DELIM" ]; then
                    line="${line%=DELIM}"
                    buffer=""

                    # Try to replace the author with a Slack mention (use author's name without hyphens or spaces because sh env doesn't allow that)
                    author_name=$(echo "$line" | awk -F ' - ' '{print $1}')
                    env_key_name="SLACK_ID_FOR_GH_$(echo $author_name | tr ' ' '_' | tr '-' '_' | tr '[:upper:]' '[:lower:]')"
                    env_var_value=$(eval echo \$$env_key_name)
                    if [ ! -z "$env_var_value" ]; then
                        line=$(echo "$line" | sed "s/$author_name/<@$env_var_value>/")
                    fi

                    block_content+="â€¢ $line\n"
                    line_count=$((line_count+1))

                    if (( line_count == max_lines )); then
                        json_content+="{ \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"${block_content}\" } },"
                        line_count=0
                        block_content=""
                    fi
                else
                    # Otherwise, store the current line in the buffer and wait for the next iteration
                    buffer+="${line}@"
                fi
            done

            if (( line_count > 0 )); then
                json_content+="{ \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"${block_content}\" } },"
            fi

            json_content+="{ \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"\n*These changes will be auto-deployed to foundation nodes in 2 hours (10am PST).* Set \`HALT_AUTO_DEPLOY\`=\`true\` <https://app.circleci.com/settings/organization/github/AudiusProject/contexts/4be7f5c8-cadb-4deb-b66e-318867a6960b|here> if needed.\n\" } }"
            json_content+="]}"

            # Send Slack daily deploy message
            echo "Sending message to Slack: $json_content"
            curl -f -X POST -H 'Content-type: application/json' \
              --data "$json_content" \
              $SLACK_DAILY_DEPLOY_WEBHOOK

  approve-deployment-holds:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - run:
          name: Abort if auto-deploy is halted
          command: |
            if [ "$HALT_AUTO_DEPLOY" == "true" ]; then
              echo "Auto-deploy is currently halted. Exiting without approval."

              json_content="{ \"blocks\": ["
              json_content+="\"type\": \"section\","
              json_content+="\"text\": { \"type\": \"mrkdwn\", \"text\": \"Normally I'd ship today's release to foundation nodes now, but auto-deploy is currently halted...\" }"
              json_content+="}]}"

              curl -f -X POST -H 'Content-type: application/json' \
              --data "$json_content" \
              $SLACK_DAILY_DEPLOY_WEBHOOK

              exit 1
            fi
      - run:
          name: Approve the deployments
          command: |
            (
              set -e
              # Find latest release version
              git clone https://github.com/AudiusProject/audius-protocol.git
              cd audius-protocol
              git fetch --all
              VERSION=$(jq -r .version discovery-provider/.version.json)
              cd ..
              echo "Running against protocol version: $VERSION"

              # Get the pipeline for the most recent commit on the release branch
              response=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/AudiusProject/audius-protocol/pipeline?branch=release-v$VERSION" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN")

              pipeline_id=$(echo "$response" | jq -r '.items[0].id')
              pipeline_number=$(echo "$response" | jq -r '.items[0].number')

              # Abort early if we can't find the pipeline
              if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then
                echo "Could not find pipeline for release-v$VERSION"
                exit 1
              fi

              # Fetch the "release" workflow
              echo "Fetching release workflow from pipeline $pipeline_id"
              workflow_id=$(curl --request GET \
                "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="release") | .id')

              # Fetch the "deploy-prod-foundation-nodes-trigger" job
              job_id=$(curl --request GET \
                "https://circleci.com/api/v2/workflow/$workflow_id/job" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="deploy-foundation-nodes-trigger" and .status=="on_hold") | .id')

              # If we found the job, approve it automatically
              if [ ! -z "$job_id" ]; then
                  echo "Approving job with id=$job_id"
                  job_url="https://app.circleci.com/pipelines/gh/AudiusProject/audius-protocol/$pipeline_number/workflows/$workflow_id"
                  curl --request POST \
                    "https://circleci.com/api/v2/workflow/$workflow_id/approve/$job_id" \
                    --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN"
                  
                  # Record approval for the Slack message
                  echo "<${job_url}|release-v$VERSION>" > /tmp/job_url.txt
              fi
            ) || true  # catch errors so we can send a Slack message in the next step
      - run:
          name: Notify Slack
          command: |
            job_url=$(cat /tmp/job_url.txt) || true
            json_content="{ \"blocks\": ["

            if [[ -z "$job_url" ]]; then
                # If we couldn't find the deploy trigger job on hold, send the failure message
                json_content+="{ \"type\": \"section\","
                json_content+=" \"text\": { \"type\": \"mrkdwn\", \"text\": \"I tried to deploy today's release to foundation nodes but have failed miserably :( please investigate\" } }"
            else
                # If we approved the job, send the success message
                json_content+="{ \"type\": \"section\","
                json_content+=" \"text\": { \"type\": \"mrkdwn\", \"text\": \"Deploying $job_url to foundation nodes... Please watch for issues and approve the release for SPs when ready (I'll remind you in 2 hours at noon PST).\" } }"
            fi

            json_content+="]}"
            curl -f -X POST -H 'Content-type: application/json' \
              --data "$json_content" \
              $SLACK_DAILY_DEPLOY_WEBHOOK

  notify-sp-release-job:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - run:
          name: Abort if auto-deploy is halted
          command: |
            if [ "$HALT_AUTO_DEPLOY" == "true" ]; then
              echo "Auto-deploy is currently halted. Exiting without approval."

              json_content="{ \"blocks\": ["
              json_content+="\"type\": \"section\","
              json_content+="\"text\": { \"type\": \"mrkdwn\", \"text\": \"Normally I'd remind you to approve the SP release for today, but auto-deploy is currently halted...\" }"
              json_content+="}]}"

              curl -f -X POST -H 'Content-type: application/json' \
                --data "$json_content" \
                $SLACK_DAILY_DEPLOY_WEBHOOK
              
              exit 1
            fi
      - run:
          name: Find branch, send Slack message
          command: |
            handle_error() {
              # Construct failure Slack message
              failure_content="{ \"blocks\": ["
              failure_content+="{ \"type\": \"section\", \"text\": { \"type\": \"plain_text\", \"text\": \"Failed to find job for today's SP release. If this was not intentional, please check for 'release-audius-docker-compose-trigger' in today's release branch.\n\" } }"
              failure_content+="]}"
              echo "Sending error message to Slack: $failure_content"
              
              # Send Slack failure message
              curl -f -X POST -H 'Content-type: application/json' \
                --data "$failure_content" \
                $SLACK_DAILY_DEPLOY_WEBHOOK
            }

            (
              set -e
              # Find latest version
              git clone https://github.com/AudiusProject/audius-protocol.git
              cd audius-protocol
              git fetch --all
              VERSION=$(jq -r .version discovery-provider/.version.json)
              cd ..
              
              # Get the pipeline for the most recent commit on the release branch
               response=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/AudiusProject/audius-protocol/pipeline?branch=release-v$VERSION" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN")

              pipeline_id=$(echo "$response" | jq -r '.items[0].id')
              pipeline_number=$(echo "$response" | jq -r '.items[0].number')

              # Fetch the "release" workflow
              echo "Fetching release workflow from pipeline $pipeline_id"
              workflow_id=$(curl --request GET \
                "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="release") | .id')

              # Fetch the "release-audius-docker-compose-trigger" job
              job_id=$(curl --request GET \
                "https://circleci.com/api/v2/workflow/$workflow_id/job" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="release-audius-docker-compose-trigger" and .status=="on_hold") | .id')

              # If we found the on-hold job, notify Slack for someone to approve it
              if [ ! -z "$job_id" ]; then
                  echo "Found job: $JOB_ID"
                  job_url="https://app.circleci.com/pipelines/gh/AudiusProject/audius-protocol/$pipeline_number/workflows/$workflow_id"

                  # Build Slack message
                  json_content="{ \"blocks\": ["
                  json_content+="{ \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"Release v$VERSION is ready for SPs! Please approve <$job_url|release-audius-docker-compose-trigger> and react to this message with :white_check_mark:\n\" } }"
                  json_content+="]}"
                  echo "Text to send to slack: $json_content"
                  
                  # Send Slack message
                  curl -f -X POST -H 'Content-type: application/json' \
                    --data "$json_content" \
                    $SLACK_DAILY_DEPLOY_WEBHOOK
              else
                  echo "Didn't find job"
                  exit 1
              fi
            ) || handle_error

  generate-client-release:
    working_directory: ~/audius-protocol
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'a4:99:2e:fa:80:31:dc:23:25:7b:a5:70:3f:08:5f:fa'
      - run:
          name: Bump version
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
            PREV_VERSION=$(jq -r .version ./package.json)
            CHANGELOG=$(git log --pretty=format:"[%h] %s %an" --date=short v${PREV_VERSION}..HEAD)
            npm i --ignore-scripts
            npm version patch -ws --include-workspace-root --no-git-tag-version
            git add .
            VERSION=$(jq -r .version ./package.json)
            MESSAGE="v${VERSION}

            ${CHANGELOG}"
            git commit -m "${MESSAGE}"
            git push -u origin main
            git tag client-v${VERSION}
            git push origin client-v${VERSION}
      - run:
          name: Create release branch
          command: |
            VERSION=$(jq -r .version ./package.json)
            git checkout -b release-client-v${VERSION}
            git push -u origin release-client-v${VERSION}

workflows:
  gcp-cleanup:
    jobs:
      - generate-config
      - continuation/continue:
          configuration_path: ../workspace/.circleci/continue_config.yml
          name: run-gcp-cleanup
          parameters: '{
            "run-gcp-cleanup": true,
            }'
          pre-steps:
            - attach_workspace:
                at: ../workspace
          requires:
            - generate-config

  release-create-branch:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ['release-create-branch', << pipeline.schedule.name >>]
    jobs:
      - generate-release:
          context: slack-secrets

  auto-approve-foundation-deploy:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal:
            ['auto-approve-foundation-deploy', << pipeline.schedule.name >>]
    jobs:
      - approve-deployment-holds:
          context: [slack-secrets, circle-daily-deploy-secrets]

  notify-sp-release:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ['notify-sp-release', << pipeline.schedule.name >>]
    jobs:
      - notify-sp-release-job:
          context: [slack-secrets, circle-daily-deploy-secrets]

  release-client-create-branch:
    when:
      and:
        - equal: [scheduled_pipeline, << pipeline.trigger_source >>]
        - equal: ['release-client-create-branch', << pipeline.schedule.name >>]
    jobs:
      - generate-client-release
