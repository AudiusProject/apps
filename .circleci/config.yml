# Root CircleCI configuration
# Configuration for individual packages lives in .circleci/src/{commands,jobs,workflows}

version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.3.1
  path-filtering: circleci/path-filtering@0.1.1
  slack: circleci/slack@4.12.0

parameters:
  workflow:
    type: string
    default: 'release-client-create-branch'

commands:
  create_concatenated_patch_file:
    description: 'Concatenate all patch-files. File is used as checksum source for part of caching key.'
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine patch-files to single file
          command: ls -d -- packages/*/patches/*.patch | xargs cat > << parameters.filename >>

jobs:
  # Generate the CircleCI continue_config.yml from .circleci/src
  generate-config:
    docker:
      - image: cimg/base:2021.04
    steps:
      # The circleci cli exposed in the image doesn't support config packing
      # so we install a version that does
      - run:
          name: Install cli
          command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR=~/cli bash
      - checkout
      - run:
          name: Generate config
          command: ~/cli config pack .circleci/src > .circleci/continue_config.yml
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/continue_config.yml

  init:
    working_directory: ~/audius-protocol
    docker:
      - image: cimg/node:18.17
    resource_class: large
    steps:
      - checkout

      - create_concatenated_patch_file:
          filename: combined-patch-file.txt

      - restore_cache:
          keys:
            - cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-patch-file.txt" }}

      - run:
          name: Install dependencies
          # If node_modules exists in cache, run postinstall. Otherwise, run npm ci
          command: |
            [[ ! -d node_modules ]] || CI=true npm run postinstall
            [[ -d node_modules ]] || CI=true npm ci

      - save_cache:
          key: cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-patch-file.txt" }}
          paths:
            - ./node_modules
            - ./packages/web/node_modules
            - ./packages/mobile/node_modules
            - ./packages/embed/node_modules
            - ./packages/harmony/node_modules
            - ./packages/common/node_modules
            - ./packages/libs/node_modules
            - ./packages/identity-service/node_modules
            - ./packages/es-indexer/node_modules
            - ./packages/ddex/node_modules
            - ./packages/ddex/webapp/client/node_modules
            - ./packages/ddex/webapp/server/node_modules
            - ./packages/ddex/publisher/node_modules
            - ./packages/trpc-server/node_modules
            - ./packages/create-audius-app/node_modules
            - ./packages/dotenv-linter/bin

  generate-release-branch:
    working_directory: ~/audius-protocol
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'd0:0b:a0:19:ac:46:58:e4:6c:ac:34:99:f6:1b:31:bb' # github.com
      - run:
          name: Set git config
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
      - run:
          name: Create + push branch
          command: |
            git checkout main

            OLD_VERSION=$(jq -r .version packages/discovery-provider/.version.json)
            NEW_VERSION=$(echo ${OLD_VERSION} | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')

            # Bump version for content node
            jq --arg version "$NEW_VERSION" '.version=$version' mediorum/.version.json > /tmp/.version.json
            mv /tmp/.version.json mediorum/.version.json
            git add mediorum/.version.json

            # Bump version for discovery node
            jq --arg version "$NEW_VERSION" '.version=$version' packages/discovery-provider/.version.json > /tmp/.version.json
            mv /tmp/.version.json packages/discovery-provider/.version.json
            git add packages/discovery-provider/.version.json

            # Weird way to push both to main and the new release branch
            git commit -m "Bump version to $NEW_VERSION"
            git branch "release-v$NEW_VERSION"
            git checkout "release-v$NEW_VERSION"
            git push --set-upstream origin main "release-v$NEW_VERSION"

  approve-deployment-holds:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - run:
          name: Abort if auto-deploy is halted
          command: |
            if [ "$HALT_AUTO_DEPLOY" == "true" ]; then
              echo "Auto-deploy is currently halted. Exiting without approval."

              json_content="{ \"blocks\": ["
              json_content+="\"type\": \"section\","
              json_content+="\"text\": { \"type\": \"mrkdwn\", \"text\": \"Normally I'd ship today's release to foundation nodes now, but auto-deploy is currently halted...\" }"
              json_content+="}]}"

              curl -f -X POST -H 'Content-type: application/json' \
              --data "$json_content" \
              $SLACK_DAILY_DEPLOY_WEBHOOK

              exit 1
            fi
      - run:
          name: Approve the deployments
          command: |
            (
              set -e
              # Find latest release version
              git clone https://github.com/AudiusProject/audius-protocol.git
              cd audius-protocol
              git fetch --all
              VERSION=$(jq -r .version packages/discovery-provider/.version.json)
              cd ..
              echo "Running against protocol version: $VERSION"

              # Get the pipeline for the most recent commit on the release branch
              response=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/AudiusProject/audius-protocol/pipeline?branch=release-v$VERSION" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN")

              pipeline_id=$(echo "$response" | jq -r '.items[0].id')
              pipeline_number=$(echo "$response" | jq -r '.items[0].number')

              # Abort early if we can't find the pipeline
              if [ -z "$pipeline_id" ] || [ "$pipeline_id" = "null" ]; then
                echo "Could not find pipeline for release-v$VERSION"
                exit 1
              fi

              # Fetch the "release" workflow
              echo "Fetching release workflow from pipeline $pipeline_id"
              workflow_id=$(curl --request GET \
                "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="release") | .id')

              # Fetch the "deploy-foundation-nodes-trigger" job
              job_id=$(curl --request GET \
                "https://circleci.com/api/v2/workflow/$workflow_id/job" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="deploy-foundation-nodes-trigger" and .status=="on_hold") | .id')

              # If we found the job, approve it automatically
              if [ ! -z "$job_id" ]; then
                  echo "Approving job with id=$job_id"
                  job_url="https://app.circleci.com/pipelines/gh/AudiusProject/audius-protocol/$pipeline_number/workflows/$workflow_id"
                  curl --request POST \
                    "https://circleci.com/api/v2/workflow/$workflow_id/approve/$job_id" \
                    --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN"

                  # Record approval for the Slack message
                  echo "<${job_url}|release-v$VERSION>" > /tmp/job_url.txt
              fi
            ) || true  # catch errors so we can send a Slack message in the next step
      - run:
          name: Notify Slack
          command: |
            job_url=$(cat /tmp/job_url.txt) || true
            json_content="{ \"blocks\": ["

            if [[ -z "$job_url" ]]; then
                # If we couldn't find the deploy trigger job on hold, send the failure message
                json_content+="{ \"type\": \"section\","
                json_content+=" \"text\": { \"type\": \"mrkdwn\", \"text\": \"No CircleCI job is on hold for me to auto-approve for today's foundation release (hint: check <https://app.circleci.com/pipelines/github/AudiusProject/audius-protocol?branch=$CIRCLE_BRANCH|here>)\" } }"
            else
                # If we approved the job, send the success message
                json_content+="{ \"type\": \"section\","
                json_content+=" \"text\": { \"type\": \"mrkdwn\", \"text\": \"Deploying $job_url to foundation nodes... Please watch for issues and approve the release for SPs when ready (I'll remind you in an hour).\" } }"
            fi

            json_content+="]}"
            curl -f -X POST -H 'Content-type: application/json' \
              --data "$json_content" \
              $SLACK_DAILY_DEPLOY_WEBHOOK

  notify-sp-release-job:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - run:
          name: Abort if auto-deploy is halted
          command: |
            if [ "$HALT_AUTO_DEPLOY" == "true" ]; then
              echo "Auto-deploy is currently halted. Exiting without approval."

              json_content="{ \"blocks\": ["
              json_content+="\"type\": \"section\","
              json_content+="\"text\": { \"type\": \"mrkdwn\", \"text\": \"Normally I'd remind you to approve the SP release for today, but auto-deploy is currently halted...\" }"
              json_content+="}]}"

              curl -f -X POST -H 'Content-type: application/json' \
                --data "$json_content" \
                $SLACK_DAILY_DEPLOY_WEBHOOK

              exit 1
            fi
      - run:
          name: Find branch, send Slack message
          command: |
            handle_error() {
              # Construct failure Slack message
              failure_content="{ \"blocks\": ["
              failure_content+="{ \"type\": \"section\", \"text\": { \"type\": \"plain_text\", \"text\": \"Failed to find job for today's SP release. If this was not intentional, please check for 'release-audius-docker-compose-trigger' in today's release branch.\n\" } }"
              failure_content+="]}"
              echo "Sending error message to Slack: $failure_content"

              # Send Slack failure message
              curl -f -X POST -H 'Content-type: application/json' \
                --data "$failure_content" \
                $SLACK_DAILY_DEPLOY_WEBHOOK
            }

            (
              set -e
              # Find latest version
              git clone https://github.com/AudiusProject/audius-protocol.git
              cd audius-protocol
              git fetch --all
              VERSION=$(jq -r .version packages/discovery-provider/.version.json)
              cd ..

              # Get the pipeline for the most recent commit on the release branch
               response=$(curl --request GET \
                --url "https://circleci.com/api/v2/project/gh/AudiusProject/audius-protocol/pipeline?branch=release-v$VERSION" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN")

              pipeline_id=$(echo "$response" | jq -r '.items[0].id')
              pipeline_number=$(echo "$response" | jq -r '.items[0].number')

              # Fetch the "release" workflow
              echo "Fetching release workflow from pipeline $pipeline_id"
              workflow_id=$(curl --request GET \
                "https://circleci.com/api/v2/pipeline/$pipeline_id/workflow" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="release") | .id')

              # Fetch the "release-audius-docker-compose-trigger" job
              job_id=$(curl --request GET \
                "https://circleci.com/api/v2/workflow/$workflow_id/job" \
                --header "Circle-Token: $CIRCLE_DAILY_DEPLOY_API_TOKEN" | jq -r '.items[] | select(.name=="release-audius-docker-compose-trigger" and .status=="on_hold") | .id')

              # If we found the on-hold job, notify Slack for someone to approve it
              if [ ! -z "$job_id" ]; then
                  echo "Found job: $JOB_ID"
                  job_url="https://app.circleci.com/pipelines/gh/AudiusProject/audius-protocol/$pipeline_number/workflows/$workflow_id"

                  # Build Slack message
                  json_content="{ \"blocks\": ["
                  json_content+="{ \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"Release v$VERSION is ready for SPs! Please approve <$job_url|release-audius-docker-compose-trigger> and react to this message with :white_check_mark:\n\" } }"
                  json_content+="]}"
                  echo "Text to send to slack: $json_content"

                  # Send Slack message
                  curl -f -X POST -H 'Content-type: application/json' \
                    --data "$json_content" \
                    $SLACK_DAILY_DEPLOY_WEBHOOK
              else
                  echo "Didn't find job"
                  exit 1
              fi
            ) || handle_error

  generate-client-release:
    working_directory: ~/audius-protocol
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'a4:99:2e:fa:80:31:dc:23:25:7b:a5:70:3f:08:5f:fa'
      - run:
          name: Bump version
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
            PREV_VERSION=$(jq -r .version ./package.json)
            CLIENT_DIRS=$(bash ./scripts/get-release-dirs.sh client)
            CHANGELOG=$(git log --pretty=format:"[%h] %s %an" --date=short client-v${PREV_VERSION}..HEAD -- ${CLIENT_DIRS})
            npm i --ignore-scripts
            npm version patch -ws --include-workspace-root --no-git-tag-version
            git add .
            VERSION=$(jq -r .version ./package.json)
            MESSAGE="v${VERSION}

            ${CHANGELOG}"
            git commit -m "${MESSAGE}"
            git push -u origin sk-test-changelogs
            git tag client-v${VERSION}
            git push origin client-v${VERSION}
      - run:
          name: Create release branch
          command: |
            VERSION=$(jq -r .version ./package.json)
            git checkout -b test-release-client-v${VERSION}
            git push -u origin test-release-client-v${VERSION}

  notify-stuck-stage-nodes-job:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - run:
          name: Alert Slack of stuck stage nodes
          command: |
            handle_error() {
              # Construct failure Slack message
              failure_content="{ \"blocks\": ["
              failure_content+="{ \"type\": \"section\", \"text\": { \"type\": \"plain_text\", \"text\": \"Encountered error while checking for stuck staging nodes\n\" } }"
              failure_content+="]}"
              echo "Sending error message to Slack: $failure_content"

              # Send Slack failure message
              curl -f -X POST -H 'Content-type: application/json' \
                --data "$failure_content" \
                $SLACK_DAILY_DEPLOY_WEBHOOK
            }

            fetchEndpoints() {
              url=$1
              fetchedEndpoints=$(curl -s "$url" | jq -r '.data[]' 2>/dev/null)

              if [ -z "$fetchedEndpoints" ]; then
                echo "FETCH_ERROR"
              else
                echo $fetchedEndpoints
              fi
            }

            (
              set -e

              # Fetch the latest version from the GitHub repository (assume Content and Discovery have the same latest versions)
              versionUrl="https://raw.githubusercontent.com/AudiusProject/audius-protocol/main/packages/discovery-provider/.version.json"
              VERSION=$(curl -s "$versionUrl" | jq -r '.version')

              if [ -z "$VERSION" ]; then
                echo "Failed to fetch version data"
                exit 1
              fi

              contentEndpoints=($(fetchEndpoints "https://api.staging.audius.co/content"))
              discoveryEndpoints=($(fetchEndpoints "https://api.staging.audius.co/discovery"))
              slack_message=""

              compareVersions() {
                for endpoint in "$@"; do
                    if [ "$endpoint" == "FETCH_ERROR" ]; then
                      continue
                    fi
                  response=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint/health_check")
                  if [ "$response" -eq 200 ]; then
                    endpointVersion=$(curl -s "$endpoint/health_check" | jq -r '.data.version')
                    if [ "$endpointVersion" != "$VERSION" ]; then
                      slack_message+="\n$endpoint (behind at v$endpointVersion)"
                    fi
                  else
                    slack_message+="\n$endpoint (error status=$response)"
                  fi
                done
              }

              compareVersions "${contentEndpoints[@]}"
              compareVersions "${discoveryEndpoints[@]}"

              # Send Slack message if any node is behind or if the API Gateway is down
              if [ ! -z "$slack_message" ]; then
                json_content="{ \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"Please set these nodes back on auto-upgrade if they're not in use:$slack_message\" } } ] }"
                curl -f -X POST -H 'Content-type: application/json' \
                    --data "$json_content" \
                    $SLACK_DAILY_DEPLOY_WEBHOOK
              elif [[ " ${contentEndpoints[@]} " =~ " FETCH_ERROR " ]] || [[ " ${discoveryEndpoints[@]} " =~ " FETCH_ERROR " ]]; then
                json_content="{ \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"Unable to check for offline / out-of-date stage nodes due to api.staging.audius.co being unreachable... \" } } ] }"
                curl -f -X POST -H 'Content-type: application/json' \
                    --data "$json_content" \
                    $SLACK_DAILY_DEPLOY_WEBHOOK
              fi
            ) || handle_error

  notify-pipeline-status:
    working_directory: ~/audius-protocol
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - run:
          name: Wait For Pipeline
          command: bash .circleci/scripts/wait-for-pipeline.sh
      - run:
          name: Generate Slack Template
          command: bash .circleci/scripts/generate-slack-template.sh
      - slack/notify:
          channel: 'C06SP746DA7'
          template: PIPELINE_STATUS_TEMPLATE

workflows:
  setup:
    when:
      equal: ['main', << pipeline.parameters.workflow >>]
    jobs:
      - generate-config
      - init:
          context:
            - Vercel
      - path-filtering/filter:
          name: trigger-relevant-workflows
          filters:
            branches:
              ignore:
                - main
                - /^release.*$/
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            comms/.* run-discovery-workflow true
            mediorum/.* run-creator-workflow true
            packages/identity-service/.* run-identity-workflow true
            packages/identity-service/.* run-integration-workflow true
            packages/ddex/webapp/.* run-ddex-webapp-workflow true
            packages/ddex/webapp/.* run-ddex-e2e-workflow true
            packages/ddex/ingester/.* run-ddex-e2e-workflow true
            packages/ddex/publisher/.* run-ddex-publisher-workflow true
            eth-contracts/.* run-eth-contracts-workflow true
            monitoring/healthz/.* run-healthz-workflow true
            protocol-dashboard/.* run-protocol-dashboard-workflow true
            contracts/.* run-contracts-workflow true
            .circleci/.* run-discovery-workflow true
            .circleci/.* run-creator-workflow true
            .circleci/.* run-identity-workflow true
            .circleci/.* run-eth-contracts-workflow true
            .circleci/.* run-protocol-dashboard-workflow true
            .circleci/.* run-ddex-webapp-workflow true
            .circleci/.* run-ddex-e2e-workflow true
            .circleci/.* run-ddex-publisher-workflow true
            .circleci/.* run-healthz-workflow true
            .circleci/.* run-contracts-workflow true
            .circleci/.* run-sdk-workflow true
            .circleci/.* run-web-workflow true
            .circleci/.* run-mobile-workflow true
            .circleci/.* run-harmony-workflow true
            .circleci/.* run-embed-workflow true
            package-lock.json run-sdk-workflow true
            package-lock.json run-harmony-workflow true
            .* run-release-workflow false
            .* run-integration-workflow true
            packages/discovery-provider/.* run-discovery-workflow true
            packages/web/.* run-web-workflow true
            packages/mobile/.* run-mobile-workflow true
            packages/embed/.* run-embed-workflow true
            packages/common/.* run-common-workflow true
            packages/common/.* run-web-workflow true
            packages/common/.* run-mobile-workflow true
            packages/harmony/.* run-harmony-workflow true
            packages/harmony/.* run-web-workflow true
            packages/eslint-config-audius/.* run-web-workflow true
            packages/eslint-config-audius/.* run-mobile-workflow true
            packages/eslint-config-audius/.* run-harmony-workflow true
            packages/libs/.* run-creator-workflow true
            packages/libs/.* run-identity-workflow true
            packages/libs/.* run-protocol-dashboard-workflow true
            packages/libs/.* run-ddex-webapp-workflow true
            packages/libs/.* run-ddex-publisher-workflow true
            packages/libs/.* run-sdk-workflow true
            packages/libs/.* run-web-workflow true
            packages/libs/.* run-mobile-workflow true
            packages/libs/.* run-embed-workflow true
            packages/libs/.* run-create-audius-app-workflow true
            packages/create-audius-app/.* run-create-audius-app-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - path-filtering/filter:
          name: trigger-main-workflows
          filters:
            branches:
              only: /^main$/
          base-revision: main~1
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            .* run-integration-workflow true
            .* run-creator-workflow true
            .* run-discovery-workflow true
            .* run-identity-workflow true
            .* run-eth-contracts-workflow true
            .* run-contracts-workflow true
            .* run-release-workflow false
            .* run-sdk-workflow true
            .* run-harmony-workflow true
            .* run-ddex-stage-workflow true
            .circleci/.* run-web-workflow true
            .circleci/.* run-mobile-workflow true
            .circleci/.* run-protocol-dashboard-workflow true
            packages/common/.* run-common-workflow true
            packages/common/.* run-web-workflow true
            packages/common/.* run-mobile-workflow true
            packages/eslint-config-audius/.* run-web-workflow true
            packages/eslint-config-audius/.* run-mobile-workflow true
            packages/libs/.* run-web-workflow true
            packages/libs/.* run-mobile-workflow true
            packages/libs/.* run-create-audius-app-workflow true
            packages/harmony/.* run-web-workflow true
            packages/harmony/.* run-mobile-workflow true
            packages/mobile/.* run-mobile-workflow true
            packages/web/.* run-web-workflow true
            packages/embed/.* run-embed-workflow true
            packages/ddex/webapp/.* run-ddex-webapp-workflow true
            packages/ddex/webapp/.* run-ddex-e2e-workflow true
            packages/ddex/ingester/.* run-ddex-e2e-workflow true
            packages/ddex/publisher/.* run-ddex-publisher-workflow true
            packages/create-audius-app/.* run-create-audius-app-workflow true
            protocol-dashboard/.* run-protocol-dashboard-workflow true
            monitoring/healthz/.* run-healthz-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - path-filtering/filter:
          name: trigger-release-workflows
          filters:
            branches:
              only: /^release-v.*$/
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            .* run-integration-workflow true
            .* run-eth-contracts-workflow true
            .* run-contracts-workflow true
            .* run-release-workflow true
            .* run-sdk-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - path-filtering/filter:
          name: trigger-release-client-workflows
          filters:
            branches:
              only: /^release-client.*$/
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            .* run-web-workflow true
            .* run-mobile-workflow true
            .* run-harmony-workflow true
            .* run-protocol-dashboard-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - notify-pipeline-status:
          context:
            - slack-secrets
          requires:
            - trigger-main-workflows
          filters:
            branches:
              only: /^main$/

  release-create-branch:
    when:
      equal: ['release-create-branch', << pipeline.parameters.workflow >>]
    jobs:
      - generate-release-branch

  auto-approve-foundation-deploy:
    when:
      equal:
        ['auto-approve-foundation-deploy', << pipeline.parameters.workflow >>]
    jobs:
      - approve-deployment-holds:
          context: [slack-secrets, circle-daily-deploy-secrets]

  notify-sp-release:
    when:
      equal: ['notify-sp-release', << pipeline.parameters.workflow >>]
    jobs:
      - notify-sp-release-job:
          context: [slack-secrets, circle-daily-deploy-secrets]

  release-client-create-branch:
    when:
      equal:
        ['release-client-create-branch', << pipeline.parameters.workflow >>]
    jobs:
      - generate-client-release

  notify-stuck-stage-nodes:
    when:
      and:
        - equal:
            ['notify-stuck-stage-nodes', << pipeline.parameters.workflow >>]
    jobs:
      - notify-stuck-stage-nodes-job:
          context: [slack-secrets]
