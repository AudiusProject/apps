# Root CircleCI configuration
# Configuration for individual packages lives in .circleci/src/{commands,jobs,workflows}

version: 2.1

setup: true

orbs:
  continuation: circleci/continuation@0.3.1
  path-filtering: circleci/path-filtering@0.1.1
  slack: circleci/slack@4.12.0

parameters:
  workflow:
    type: string
    default: 'main'

commands:
  create_concatenated_patch_file:
    description: 'Concatenate all patch-files. File is used as checksum source for part of caching key.'
    parameters:
      filename:
        type: string
    steps:
      - run:
          name: Combine patch-files to single file
          command: ls -d -- packages/*/patches/*.patch | xargs cat > << parameters.filename >>

jobs:
  # Generate the CircleCI continue_config.yml from .circleci/src
  generate-config:
    docker:
      - image: cimg/base:2021.04
    steps:
      # The circleci cli exposed in the image doesn't support config packing
      # so we install a version that does
      - run:
          name: Install cli
          command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR=~/cli bash
      - checkout
      - run:
          name: Generate config
          command: ~/cli config pack .circleci/src > .circleci/continue_config.yml
      - persist_to_workspace:
          root: ./
          paths:
            - .circleci/continue_config.yml

  init:
    working_directory: ~/audius-protocol
    docker:
      - image: cimg/node:18.17
    resource_class: large
    steps:
      - checkout

      - create_concatenated_patch_file:
          filename: combined-patch-file.txt

      - restore_cache:
          keys:
            - cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-patch-file.txt" }}

      - run: sudo apt-get update
      - run: sudo apt-get install -y build-essential libssl-dev
      - run:
          name: Setup Java environment
          command: |
            echo 'export PATH=$PATH:$JAVA_HOME/bin' >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Install dependencies
          # If node_modules exists in cache, run postinstall. Otherwise, run npm ci
          command: |
            [[ ! -d node_modules ]] || CI=true npm run postinstall
            [[ -d node_modules ]] || CI=true npm ci

      - save_cache:
          key: cache-{{ checksum "package-lock.json" }}-{{ checksum "combined-patch-file.txt" }}
          paths:
            - ./node_modules
            - ./packages/protocol-dashboard/node_modules
            - ./packages/web/node_modules
            - ./packages/mobile/node_modules
            - ./packages/embed/node_modules
            - ./packages/harmony/node_modules
            - ./packages/common/node_modules
            - ./packages/libs/node_modules
            - ./packages/sdk/node_modules
            - ./packages/identity-service/node_modules
            - ./packages/es-indexer/node_modules
            - ./packages/ddex-entrypoint/node_modules
            - ./packages/create-audius-app/node_modules
            - ./packages/dotenv-linter/bin
            - ./packages/discovery-provider/plugins/pedalboard/apps/relay/node_modules
            - ./packages/discovery-provider/plugins/pedalboard/apps/solana-relay/node_modules

  generate-release-branch:
    working_directory: ~/audius-protocol
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'd0:0b:a0:19:ac:46:58:e4:6c:ac:34:99:f6:1b:31:bb' # github.com
      - run:
          name: Set git config
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
      - run:
          name: Create + push branch
          command: |
            OLD_VERSION=$(jq -r .version packages/discovery-provider/.version.json)
            NEW_VERSION=$(echo ${OLD_VERSION} | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')

            # Bump version for discovery node
            jq --arg version "$NEW_VERSION" '.version=$version' packages/discovery-provider/.version.json > /tmp/.version.json
            mv /tmp/.version.json packages/discovery-provider/.version.json
            git add packages/discovery-provider/.version.json

            PROTOCOL_DIRS=$(bash ./scripts/get-release-dirs.sh protocol)
            CHANGELOG=$(git log --pretty=format:"[%h] %s %an" --date=short protocol-v${OLD_VERSION}..HEAD -- ${PROTOCOL_DIRS})
            MESSAGE="Audius Protocol v${NEW_VERSION}

            ${CHANGELOG}"
            git commit -m "${MESSAGE}"

            git tag protocol-v${NEW_VERSION}
            git push origin protocol-v${NEW_VERSION}

            # Weird way to push both to main and the new release branch
            git branch "release-v$NEW_VERSION"
            git checkout "release-v$NEW_VERSION"
            git push --set-upstream origin main "release-v$NEW_VERSION"

  approve-foundation-deployment-holds:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - run:
          name: Approve Foundation Deployment
          command: bash .circleci/scripts/auto-approve-release.sh foundation

  approve-sp-deployment-holds:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - run:
          name: Approve SP Deployment
          command: bash .circleci/scripts/auto-approve-release.sh sp

  generate-client-release:
    working_directory: ~/audius-protocol
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - 'a4:99:2e:fa:80:31:dc:23:25:7b:a5:70:3f:08:5f:fa'
      - run:
          name: Bump version
          command: |
            git config --global user.email "audius-infra@audius.co"
            git config --global user.name "audius-infra"
            PREV_VERSION=$(jq -r .version ./package.json)
            CLIENT_DIRS=$(bash ./scripts/get-release-dirs.sh client)
            CHANGELOG=$(git log --pretty=format:"[%h] %s %an" --date=short client-v${PREV_VERSION}..HEAD -- ${CLIENT_DIRS})
            npm i --ignore-scripts
            npm version patch -w @audius/web -w @audius/mobile --include-workspace-root --no-git-tag-version

            # Update iOS Info.plist version
            CURRENT_VERSION=$(grep -A1 'CFBundleShortVersionString' packages/mobile/ios/AudiusReactNative/Info.plist | tail -1 | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            sed -i "s/$CURRENT_VERSION/$NEW_VERSION/" packages/mobile/ios/AudiusReactNative/Info.plist

            # Update Android versionName
            CURRENT_VERSION=$(grep -E 'versionName.*"[0-9]+\.[0-9]+\.[0-9]+"' packages/mobile/android/app/build.gradle | sed 's/.*"\([0-9.]*\)".*/\1/')
            NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)
            sed -i "s/versionName \"$CURRENT_VERSION\"/versionName \"$NEW_VERSION\"/" packages/mobile/android/app/build.gradle

            git add .
            VERSION=$(jq -r .version ./package.json)
            MESSAGE="Audius Client (Web and Mobile) v${VERSION}

            ${CHANGELOG}"
            git commit -m "${MESSAGE}"
            git push -u origin main
            git tag client-v${VERSION}
            git push origin client-v${VERSION}
      - run:
          name: Create release branch
          command: |
            VERSION=$(jq -r .version ./package.json)
            git checkout -b release-client-v${VERSION}
            git push -u origin release-client-v${VERSION}

  notify-stuck-stage-nodes-job:
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - run:
          name: Alert Slack of stuck stage nodes
          command: |
            handle_error() {
              # Construct failure Slack message
              failure_content="{ \"blocks\": ["
              failure_content+="{ \"type\": \"section\", \"text\": { \"type\": \"plain_text\", \"text\": \"Encountered error while checking for stuck staging nodes\n\" } }"
              failure_content+="]}"
              echo "Sending error message to Slack: $failure_content"

              # Send Slack failure message
              curl -f -X POST -H 'Content-type: application/json' \
                --data "$failure_content" \
                $SLACK_DAILY_DEPLOY_WEBHOOK
            }

            fetchEndpoints() {
              url=$1
              fetchedEndpoints=$(curl -s "$url" | jq -r '.data[]' 2>/dev/null)

              if [ -z "$fetchedEndpoints" ]; then
                echo "FETCH_ERROR"
              else
                echo $fetchedEndpoints
              fi
            }

            (
              set -e

              # Fetch the latest version from the GitHub repository (assume Content and Discovery have the same latest versions)
              versionUrl="https://raw.githubusercontent.com/AudiusProject/audius-protocol/main/packages/discovery-provider/.version.json"
              VERSION=$(curl -s "$versionUrl" | jq -r '.version')

              if [ -z "$VERSION" ]; then
                echo "Failed to fetch version data"
                exit 1
              fi

              discoveryEndpoints=($(fetchEndpoints "https://api.staging.audius.co/discovery"))
              slack_message=""

              compareVersions() {
                for endpoint in "$@"; do
                    if [ "$endpoint" == "FETCH_ERROR" ]; then
                      continue
                    fi
                  response=$(curl -s -o /dev/null -w "%{http_code}" "$endpoint/health_check")
                  if [ "$response" -eq 200 ]; then
                    endpointVersion=$(curl -s "$endpoint/health_check" | jq -r '.data.version')
                    if [ "$endpointVersion" != "$VERSION" ]; then
                      slack_message+="\n$endpoint (behind at v$endpointVersion)"
                    fi
                  else
                    slack_message+="\n$endpoint (error status=$response)"
                  fi
                done
              }

              compareVersions "${discoveryEndpoints[@]}"

              # Send Slack message if any node is behind or if the API Gateway is down
              if [ ! -z "$slack_message" ]; then
                json_content="{ \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"Please set these nodes back on auto-upgrade if they're not in use:$slack_message\" } } ] }"
                curl -f -X POST -H 'Content-type: application/json' \
                    --data "$json_content" \
                    $SLACK_DAILY_DEPLOY_WEBHOOK
              elif [[ " ${contentEndpoints[@]} " =~ " FETCH_ERROR " ]] || [[ " ${discoveryEndpoints[@]} " =~ " FETCH_ERROR " ]]; then
                json_content="{ \"blocks\": [ { \"type\": \"section\", \"text\": { \"type\": \"mrkdwn\", \"text\": \"Unable to check for offline / out-of-date stage nodes due to api.staging.audius.co being unreachable... \" } } ] }"
                curl -f -X POST -H 'Content-type: application/json' \
                    --data "$json_content" \
                    $SLACK_DAILY_DEPLOY_WEBHOOK
              fi
            ) || handle_error

  notify-pipeline-status:
    working_directory: ~/audius-protocol
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - run:
          name: Wait For Pipeline
          command: bash .circleci/scripts/wait-for-pipeline.sh
      - run:
          name: Generate Slack Template
          command: bash .circleci/scripts/generate-slack-template.sh
      - slack/notify:
          channel: 'C06SP746DA7'
          template: PIPELINE_STATUS_TEMPLATE

  aggregate-pipeline-status:
    working_directory: ~/audius-protocol
    resource_class: small
    docker:
      - image: cimg/base:2023.01
    steps:
      - checkout
      - run:
          name: Wait For Pipeline
          command: bash .circleci/scripts/wait-for-pipeline.sh
      - run:
          name: Generate Slack Template
          command: bash .circleci/scripts/generate-slack-template.sh
      - run:
          name: Check status
          command: bash .circleci/scripts/check-workflow-statuses.sh
      - slack/notify:
          template: PIPELINE_STATUS_TEMPLATE

workflows:
  setup:
    when:
      equal: ['main', << pipeline.parameters.workflow >>]
    jobs:
      - generate-config
      - init:
          context:
            - Vercel
      - path-filtering/filter:
          name: trigger-relevant-workflows
          filters:
            branches:
              ignore:
                - main
                - /^release.*$/
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            comms/.* run-discovery-workflow true
            packages/identity-service/.* run-identity-workflow true
            eth-contracts/.* run-eth-contracts-workflow true
            .circleci/.* run-discovery-workflow true
            .circleci/.* run-identity-workflow true
            .circleci/.* run-eth-contracts-workflow true
            .circleci/.* run-protocol-dashboard-workflow true
            .circleci/.* run-sdk-workflow true
            .circleci/.* run-web-workflow true
            .circleci/.* run-mobile-workflow true
            .circleci/.* run-embed-workflow true
            package-lock.json run-sdk-workflow true
            .* run-release-workflow false
            packages/discovery-provider/.* run-discovery-workflow true
            packages/web/.* run-web-workflow true
            packages/web/e2e/.* run-integration-workflow true
            packages/mobile/.* run-mobile-workflow true
            packages/embed/.* run-embed-workflow true
            packages/common/.* run-common-workflow true
            packages/common/.* run-web-workflow true
            packages/common/.* run-mobile-workflow true
            packages/common/.* run-protocol-dashboard-workflow true
            packages/protocol-dashboard/.* run-protocol-dashboard-workflow true
            packages/harmony/.* run-web-workflow true
            packages/harmony/.* run-protocol-dashboard-workflow true
            packages/harmony/.* run-embed-workflow true
            packages/eslint-config-audius/.* run-web-workflow true
            packages/eslint-config-audius/.* run-mobile-workflow true
            packages/sdk/.* run-sdk-workflow true
            packages/sdk/.* run-create-audius-app-workflow true
            packages/create-audius-app/.* run-create-audius-app-workflow true
            packages/fixed-decimal/.* run-sdk-workflow true
            packages/fixed-decimal/.* run-web-workflow true
            packages/fixed-decimal/.* run-mobile-workflow true
            packages/fixed-decimal/.* run-common-workflow true
            packages/spl/.* run-sdk-workflow true
            packages/spl/.* run-identity-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - path-filtering/filter:
          name: trigger-main-workflows
          filters:
            branches:
              only: /^main$/
          base-revision: main~1
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            comms/.* run-discovery-workflow true
            packages/identity-service/.* run-identity-workflow true
            eth-contracts/.* run-eth-contracts-workflow true
            .circleci/.* run-discovery-workflow true
            .circleci/.* run-identity-workflow true
            .circleci/.* run-eth-contracts-workflow true
            .circleci/.* run-protocol-dashboard-workflow true
            .circleci/.* run-sdk-workflow true
            .circleci/.* run-web-workflow true
            .circleci/.* run-mobile-workflow true
            .circleci/.* run-embed-workflow true
            package-lock.json run-sdk-workflow true
            .* run-integration-workflow true
            .* run-release-workflow false
            packages/discovery-provider/.* run-discovery-workflow true
            packages/web/.* run-web-workflow true
            packages/mobile/.* run-mobile-workflow true
            packages/embed/.* run-embed-workflow true
            packages/common/.* run-common-workflow true
            packages/common/.* run-web-workflow true
            packages/common/.* run-mobile-workflow true
            packages/protocol-dashboard/.* run-protocol-dashboard-workflow true
            packages/harmony/.* run-web-workflow true
            packages/eslint-config-audius/.* run-web-workflow true
            packages/eslint-config-audius/.* run-mobile-workflow true
            packages/sdk/.* run-sdk-workflow true
            packages/sdk/.* run-create-audius-app-workflow true
            packages/create-audius-app/.* run-create-audius-app-workflow true
            packages/fixed-decimal/.* run-sdk-workflow true
            packages/fixed-decimal/.* run-web-workflow true
            packages/fixed-decimal/.* run-mobile-workflow true
            packages/fixed-decimal/.* run-common-workflow true
            packages/spl/.* run-sdk-workflow true
            packages/spl/.* run-identity-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - path-filtering/filter:
          name: trigger-release-workflows
          filters:
            branches:
              only: /^release-v.*$/
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            .* run-integration-workflow true
            .* run-eth-contracts-workflow true
            .* run-release-workflow true
            .* run-sdk-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - path-filtering/filter:
          name: trigger-release-client-workflows
          filters:
            branches:
              only: /^release-client.*$/
          base-revision: main
          config-path: ../workspace/.circleci/continue_config.yml
          mapping: |
            .* run-web-workflow true
            .* run-mobile-workflow true
            .* run-embed-workflow true
            .* run-protocol-dashboard-workflow true
          requires:
            - generate-config
            - init
          workspace_path: ../workspace

      - notify-pipeline-status:
          context:
            - slack-secrets
          requires:
            - trigger-main-workflows
          filters:
            branches:
              only: /^main$/

      - aggregate-pipeline-status:
          context:
            - slack-secrets
          requires:
            - trigger-relevant-workflows
          filters:
            branches:
              ignore:
                - main
                - /^release.*$/

  release-create-branch:
    when:
      equal: ['release-create-branch', << pipeline.parameters.workflow >>]
    jobs:
      - generate-release-branch

  auto-approve-foundation-deploy:
    when:
      equal:
        ['auto-approve-foundation-deploy', << pipeline.parameters.workflow >>]
    jobs:
      - approve-foundation-deployment-holds:
          context: [slack-secrets, circle-daily-deploy-secrets]

  auto-approve-sp-deploy:
    when:
      equal: ['auto-approve-sp-deploy', << pipeline.parameters.workflow >>]
    jobs:
      - approve-sp-deployment-holds:
          context: [slack-secrets, circle-daily-deploy-secrets]

  release-client-create-branch:
    when:
      equal:
        ['release-client-create-branch', << pipeline.parameters.workflow >>]
    jobs:
      - generate-client-release

  notify-stuck-stage-nodes:
    when:
      and:
        - equal:
            ['notify-stuck-stage-nodes', << pipeline.parameters.workflow >>]
    jobs:
      - notify-stuck-stage-nodes-job:
          context: [slack-secrets]
