# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# See: https://circleci.com/docs/configuration-reference/#commands
commands:
  run-on-gcp:
    description: Setup GCP instance
    parameters:
      instance-name:
        description: Name of instance
        type: string
      create-instance-args:
        description: Extra arguments to use when creating instance
        type: string
        default: --preemptible --tags=circleci
      steps:
        description: Steps to run on GCP instance
        type: steps
        default: []
    steps:
      - run:
          name: Setup GCP instance
          command: |
            gcloud config set disable_usage_reporting false

            # Authenticate to gcloud with service account
            echo "$GCLOUD_SERVICE_KEY" | gcloud auth activate-service-account --key-file=-

            # Set GCP project id and compute zone
            gcloud config set project "$GOOGLE_PROJECT_ID"
            gcloud config set compute/zone "$GOOGLE_COMPUTE_ZONE"

            # Create firewall for instance
            CIRCLECI_IP=$(curl https://checkip.amazonaws.com)
            gcloud compute firewall-rules create "<< parameters.instance-name >>" \
              --source-ranges "$CIRCLECI_IP" \
              --action allow --rules tcp:22 \
              --target-tags "<< parameters.instance-name >>"

            # Create GCP instance
            gcloud compute instances create \
              "<< parameters.instance-name >>" \
              << parameters.create-instance-args >> \
              --tags "<< parameters.instance-name >>"

            # SSH into machine to generate a ssh key
            gcloud compute ssh --quiet "$INSTANCE_USER@<< parameters.instance-name >>" --command=exit

            # Replace bash with executable that forwards commands to the instance
            mv /bin/bash /usr/bin/bash
            echo >/bin/bash '#!/usr/bin/bash
            gcloud compute ssh --quiet "$INSTANCE_USER@<< parameters.instance-name >>" --command="bash $(printf "%q " "$@")"
            if [[ "$?" != "0" ]]; then
              gcloud compute instances delete --quiet "<< parameters.instance-name >>"
              gcloud compute firewall-rules delete --quiet "<< parameters.instance-name >>"
              exit 1
            fi'
            chmod +x /bin/bash
      - steps: << parameters.steps >>
      - run:
          name: Delete GCP instance
          shell: /usr/bin/bash
          command: |
            gcloud compute instances delete --quiet "<< parameters.instance-name >>"
            gcloud compute firewall-rules delete --quiet "<< parameters.instance-name >>"
  gcp-audius-checkout:
    description: Checkout
    steps:
      - run:
          name: Checkout
          command: echo "testing"
          # command: git fetch; git checkout "<< pipeline.git.revision >>"

# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-gcp-image:
    resource_class: small
    docker:
      - image: google/cloud-sdk:412.0.0-slim
    steps:
      - run: echo "dependency"

  test-creator-node:
    resource_class: small
    docker:
      - image: google/cloud-sdk:412.0.0-slim
    steps:
      - run-on-gcp:
          instance-name: circleci-<< pipeline.id >>-cn
          steps:
            - gcp-audius-checkout
            - run: echo "creator"
            # - run: audius-compose test run creator-node

  test-discovery-provider:
    resource_class: small
    docker:
      - image: google/cloud-sdk:412.0.0-slim
    steps:
      - run-on-gcp:
          instance-name: circleci-<< pipeline.id >>-dp
          steps:
            - gcp-audius-checkout
            - run: echo "discovery"
            # - run: audius-compose test run discovery-provider

# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test:
    jobs:
      - build-gcp-image
      - test-creator-node:
          requires:
            - build-gcp-image
      - test-discovery-provider:
          requires:
            - build-gcp-image
