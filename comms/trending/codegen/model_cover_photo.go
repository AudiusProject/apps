/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the CoverPhoto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CoverPhoto{}

// CoverPhoto struct for CoverPhoto
type CoverPhoto struct {
	Var640x *string `json:"640x,omitempty"`
	Var2000x *string `json:"2000x,omitempty"`
}

// NewCoverPhoto instantiates a new CoverPhoto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCoverPhoto() *CoverPhoto {
	this := CoverPhoto{}
	return &this
}

// NewCoverPhotoWithDefaults instantiates a new CoverPhoto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCoverPhotoWithDefaults() *CoverPhoto {
	this := CoverPhoto{}
	return &this
}

// GetVar640x returns the Var640x field value if set, zero value otherwise.
func (o *CoverPhoto) GetVar640x() string {
	if o == nil || IsNil(o.Var640x) {
		var ret string
		return ret
	}
	return *o.Var640x
}

// GetVar640xOk returns a tuple with the Var640x field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverPhoto) GetVar640xOk() (*string, bool) {
	if o == nil || IsNil(o.Var640x) {
		return nil, false
	}
	return o.Var640x, true
}

// HasVar640x returns a boolean if a field has been set.
func (o *CoverPhoto) HasVar640x() bool {
	if o != nil && !IsNil(o.Var640x) {
		return true
	}

	return false
}

// SetVar640x gets a reference to the given string and assigns it to the Var640x field.
func (o *CoverPhoto) SetVar640x(v string) {
	o.Var640x = &v
}

// GetVar2000x returns the Var2000x field value if set, zero value otherwise.
func (o *CoverPhoto) GetVar2000x() string {
	if o == nil || IsNil(o.Var2000x) {
		var ret string
		return ret
	}
	return *o.Var2000x
}

// GetVar2000xOk returns a tuple with the Var2000x field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CoverPhoto) GetVar2000xOk() (*string, bool) {
	if o == nil || IsNil(o.Var2000x) {
		return nil, false
	}
	return o.Var2000x, true
}

// HasVar2000x returns a boolean if a field has been set.
func (o *CoverPhoto) HasVar2000x() bool {
	if o != nil && !IsNil(o.Var2000x) {
		return true
	}

	return false
}

// SetVar2000x gets a reference to the given string and assigns it to the Var2000x field.
func (o *CoverPhoto) SetVar2000x(v string) {
	o.Var2000x = &v
}

func (o CoverPhoto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CoverPhoto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Var640x) {
		toSerialize["640x"] = o.Var640x
	}
	if !IsNil(o.Var2000x) {
		toSerialize["2000x"] = o.Var2000x
	}
	return toSerialize, nil
}

type NullableCoverPhoto struct {
	value *CoverPhoto
	isSet bool
}

func (v NullableCoverPhoto) Get() *CoverPhoto {
	return v.value
}

func (v *NullableCoverPhoto) Set(val *CoverPhoto) {
	v.value = val
	v.isSet = true
}

func (v NullableCoverPhoto) IsSet() bool {
	return v.isSet
}

func (v *NullableCoverPhoto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCoverPhoto(val *CoverPhoto) *NullableCoverPhoto {
	return &NullableCoverPhoto{value: val, isSet: true}
}

func (v NullableCoverPhoto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCoverPhoto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


