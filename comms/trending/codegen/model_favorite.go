/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the Favorite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Favorite{}

// Favorite struct for Favorite
type Favorite struct {
	FavoriteItemId string `json:"favorite_item_id"`
	FavoriteType string `json:"favorite_type"`
	UserId string `json:"user_id"`
	CreatedAt string `json:"created_at"`
}

// NewFavorite instantiates a new Favorite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFavorite(favoriteItemId string, favoriteType string, userId string, createdAt string) *Favorite {
	this := Favorite{}
	this.FavoriteItemId = favoriteItemId
	this.FavoriteType = favoriteType
	this.UserId = userId
	this.CreatedAt = createdAt
	return &this
}

// NewFavoriteWithDefaults instantiates a new Favorite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFavoriteWithDefaults() *Favorite {
	this := Favorite{}
	return &this
}

// GetFavoriteItemId returns the FavoriteItemId field value
func (o *Favorite) GetFavoriteItemId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FavoriteItemId
}

// GetFavoriteItemIdOk returns a tuple with the FavoriteItemId field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetFavoriteItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FavoriteItemId, true
}

// SetFavoriteItemId sets field value
func (o *Favorite) SetFavoriteItemId(v string) {
	o.FavoriteItemId = v
}

// GetFavoriteType returns the FavoriteType field value
func (o *Favorite) GetFavoriteType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FavoriteType
}

// GetFavoriteTypeOk returns a tuple with the FavoriteType field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetFavoriteTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FavoriteType, true
}

// SetFavoriteType sets field value
func (o *Favorite) SetFavoriteType(v string) {
	o.FavoriteType = v
}

// GetUserId returns the UserId field value
func (o *Favorite) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *Favorite) SetUserId(v string) {
	o.UserId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *Favorite) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *Favorite) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *Favorite) SetCreatedAt(v string) {
	o.CreatedAt = v
}

func (o Favorite) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Favorite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["favorite_item_id"] = o.FavoriteItemId
	toSerialize["favorite_type"] = o.FavoriteType
	toSerialize["user_id"] = o.UserId
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

type NullableFavorite struct {
	value *Favorite
	isSet bool
}

func (v NullableFavorite) Get() *Favorite {
	return v.value
}

func (v *NullableFavorite) Set(val *Favorite) {
	v.value = val
	v.isSet = true
}

func (v NullableFavorite) IsSet() bool {
	return v.isSet
}

func (v *NullableFavorite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFavorite(val *Favorite) *NullableFavorite {
	return &NullableFavorite{value: val, isSet: true}
}

func (v NullableFavorite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFavorite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


