/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the ListenCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListenCount{}

// ListenCount struct for ListenCount
type ListenCount struct {
	TrackId *int32 `json:"trackId,omitempty"`
	Date *string `json:"date,omitempty"`
	Listens *int32 `json:"listens,omitempty"`
}

// NewListenCount instantiates a new ListenCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListenCount() *ListenCount {
	this := ListenCount{}
	return &this
}

// NewListenCountWithDefaults instantiates a new ListenCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListenCountWithDefaults() *ListenCount {
	this := ListenCount{}
	return &this
}

// GetTrackId returns the TrackId field value if set, zero value otherwise.
func (o *ListenCount) GetTrackId() int32 {
	if o == nil || IsNil(o.TrackId) {
		var ret int32
		return ret
	}
	return *o.TrackId
}

// GetTrackIdOk returns a tuple with the TrackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListenCount) GetTrackIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TrackId) {
		return nil, false
	}
	return o.TrackId, true
}

// HasTrackId returns a boolean if a field has been set.
func (o *ListenCount) HasTrackId() bool {
	if o != nil && !IsNil(o.TrackId) {
		return true
	}

	return false
}

// SetTrackId gets a reference to the given int32 and assigns it to the TrackId field.
func (o *ListenCount) SetTrackId(v int32) {
	o.TrackId = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *ListenCount) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListenCount) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *ListenCount) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *ListenCount) SetDate(v string) {
	o.Date = &v
}

// GetListens returns the Listens field value if set, zero value otherwise.
func (o *ListenCount) GetListens() int32 {
	if o == nil || IsNil(o.Listens) {
		var ret int32
		return ret
	}
	return *o.Listens
}

// GetListensOk returns a tuple with the Listens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListenCount) GetListensOk() (*int32, bool) {
	if o == nil || IsNil(o.Listens) {
		return nil, false
	}
	return o.Listens, true
}

// HasListens returns a boolean if a field has been set.
func (o *ListenCount) HasListens() bool {
	if o != nil && !IsNil(o.Listens) {
		return true
	}

	return false
}

// SetListens gets a reference to the given int32 and assigns it to the Listens field.
func (o *ListenCount) SetListens(v int32) {
	o.Listens = &v
}

func (o ListenCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListenCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackId) {
		toSerialize["trackId"] = o.TrackId
	}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !IsNil(o.Listens) {
		toSerialize["listens"] = o.Listens
	}
	return toSerialize, nil
}

type NullableListenCount struct {
	value *ListenCount
	isSet bool
}

func (v NullableListenCount) Get() *ListenCount {
	return v.value
}

func (v *NullableListenCount) Set(val *ListenCount) {
	v.value = val
	v.isSet = true
}

func (v NullableListenCount) IsSet() bool {
	return v.isSet
}

func (v *NullableListenCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListenCount(val *ListenCount) *NullableListenCount {
	return &NullableListenCount{value: val, isSet: true}
}

func (v NullableListenCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListenCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


