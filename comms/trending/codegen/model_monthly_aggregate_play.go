/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the MonthlyAggregatePlay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthlyAggregatePlay{}

// MonthlyAggregatePlay struct for MonthlyAggregatePlay
type MonthlyAggregatePlay struct {
	TotalListens *int32 `json:"totalListens,omitempty"`
	TrackIds []int32 `json:"trackIds,omitempty"`
	ListenCounts []ListenCount `json:"listenCounts,omitempty"`
}

// NewMonthlyAggregatePlay instantiates a new MonthlyAggregatePlay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyAggregatePlay() *MonthlyAggregatePlay {
	this := MonthlyAggregatePlay{}
	return &this
}

// NewMonthlyAggregatePlayWithDefaults instantiates a new MonthlyAggregatePlay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyAggregatePlayWithDefaults() *MonthlyAggregatePlay {
	this := MonthlyAggregatePlay{}
	return &this
}

// GetTotalListens returns the TotalListens field value if set, zero value otherwise.
func (o *MonthlyAggregatePlay) GetTotalListens() int32 {
	if o == nil || IsNil(o.TotalListens) {
		var ret int32
		return ret
	}
	return *o.TotalListens
}

// GetTotalListensOk returns a tuple with the TotalListens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyAggregatePlay) GetTotalListensOk() (*int32, bool) {
	if o == nil || IsNil(o.TotalListens) {
		return nil, false
	}
	return o.TotalListens, true
}

// HasTotalListens returns a boolean if a field has been set.
func (o *MonthlyAggregatePlay) HasTotalListens() bool {
	if o != nil && !IsNil(o.TotalListens) {
		return true
	}

	return false
}

// SetTotalListens gets a reference to the given int32 and assigns it to the TotalListens field.
func (o *MonthlyAggregatePlay) SetTotalListens(v int32) {
	o.TotalListens = &v
}

// GetTrackIds returns the TrackIds field value if set, zero value otherwise.
func (o *MonthlyAggregatePlay) GetTrackIds() []int32 {
	if o == nil || IsNil(o.TrackIds) {
		var ret []int32
		return ret
	}
	return o.TrackIds
}

// GetTrackIdsOk returns a tuple with the TrackIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyAggregatePlay) GetTrackIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.TrackIds) {
		return nil, false
	}
	return o.TrackIds, true
}

// HasTrackIds returns a boolean if a field has been set.
func (o *MonthlyAggregatePlay) HasTrackIds() bool {
	if o != nil && !IsNil(o.TrackIds) {
		return true
	}

	return false
}

// SetTrackIds gets a reference to the given []int32 and assigns it to the TrackIds field.
func (o *MonthlyAggregatePlay) SetTrackIds(v []int32) {
	o.TrackIds = v
}

// GetListenCounts returns the ListenCounts field value if set, zero value otherwise.
func (o *MonthlyAggregatePlay) GetListenCounts() []ListenCount {
	if o == nil || IsNil(o.ListenCounts) {
		var ret []ListenCount
		return ret
	}
	return o.ListenCounts
}

// GetListenCountsOk returns a tuple with the ListenCounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonthlyAggregatePlay) GetListenCountsOk() ([]ListenCount, bool) {
	if o == nil || IsNil(o.ListenCounts) {
		return nil, false
	}
	return o.ListenCounts, true
}

// HasListenCounts returns a boolean if a field has been set.
func (o *MonthlyAggregatePlay) HasListenCounts() bool {
	if o != nil && !IsNil(o.ListenCounts) {
		return true
	}

	return false
}

// SetListenCounts gets a reference to the given []ListenCount and assigns it to the ListenCounts field.
func (o *MonthlyAggregatePlay) SetListenCounts(v []ListenCount) {
	o.ListenCounts = v
}

func (o MonthlyAggregatePlay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthlyAggregatePlay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotalListens) {
		toSerialize["totalListens"] = o.TotalListens
	}
	if !IsNil(o.TrackIds) {
		toSerialize["trackIds"] = o.TrackIds
	}
	if !IsNil(o.ListenCounts) {
		toSerialize["listenCounts"] = o.ListenCounts
	}
	return toSerialize, nil
}

type NullableMonthlyAggregatePlay struct {
	value *MonthlyAggregatePlay
	isSet bool
}

func (v NullableMonthlyAggregatePlay) Get() *MonthlyAggregatePlay {
	return v.value
}

func (v *NullableMonthlyAggregatePlay) Set(val *MonthlyAggregatePlay) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyAggregatePlay) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyAggregatePlay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyAggregatePlay(val *MonthlyAggregatePlay) *NullableMonthlyAggregatePlay {
	return &NullableMonthlyAggregatePlay{value: val, isSet: true}
}

func (v NullableMonthlyAggregatePlay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyAggregatePlay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


