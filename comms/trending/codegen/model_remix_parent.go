/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the RemixParent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemixParent{}

// RemixParent struct for RemixParent
type RemixParent struct {
	Tracks []TrackElement `json:"tracks,omitempty"`
}

// NewRemixParent instantiates a new RemixParent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemixParent() *RemixParent {
	this := RemixParent{}
	return &this
}

// NewRemixParentWithDefaults instantiates a new RemixParent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemixParentWithDefaults() *RemixParent {
	this := RemixParent{}
	return &this
}

// GetTracks returns the Tracks field value if set, zero value otherwise.
func (o *RemixParent) GetTracks() []TrackElement {
	if o == nil || IsNil(o.Tracks) {
		var ret []TrackElement
		return ret
	}
	return o.Tracks
}

// GetTracksOk returns a tuple with the Tracks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemixParent) GetTracksOk() ([]TrackElement, bool) {
	if o == nil || IsNil(o.Tracks) {
		return nil, false
	}
	return o.Tracks, true
}

// HasTracks returns a boolean if a field has been set.
func (o *RemixParent) HasTracks() bool {
	if o != nil && !IsNil(o.Tracks) {
		return true
	}

	return false
}

// SetTracks gets a reference to the given []TrackElement and assigns it to the Tracks field.
func (o *RemixParent) SetTracks(v []TrackElement) {
	o.Tracks = v
}

func (o RemixParent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemixParent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tracks) {
		toSerialize["tracks"] = o.Tracks
	}
	return toSerialize, nil
}

type NullableRemixParent struct {
	value *RemixParent
	isSet bool
}

func (v NullableRemixParent) Get() *RemixParent {
	return v.value
}

func (v *NullableRemixParent) Set(val *RemixParent) {
	v.value = val
	v.isSet = true
}

func (v NullableRemixParent) IsSet() bool {
	return v.isSet
}

func (v *NullableRemixParent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemixParent(val *RemixParent) *NullableRemixParent {
	return &NullableRemixParent{value: val, isSet: true}
}

func (v NullableRemixParent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemixParent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


