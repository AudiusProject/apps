/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the Supporting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Supporting{}

// Supporting struct for Supporting
type Supporting struct {
	Rank int32 `json:"rank"`
	Amount string `json:"amount"`
	Receiver User `json:"receiver"`
}

// NewSupporting instantiates a new Supporting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupporting(rank int32, amount string, receiver User) *Supporting {
	this := Supporting{}
	this.Rank = rank
	this.Amount = amount
	this.Receiver = receiver
	return &this
}

// NewSupportingWithDefaults instantiates a new Supporting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportingWithDefaults() *Supporting {
	this := Supporting{}
	return &this
}

// GetRank returns the Rank field value
func (o *Supporting) GetRank() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Rank
}

// GetRankOk returns a tuple with the Rank field value
// and a boolean to check if the value has been set.
func (o *Supporting) GetRankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rank, true
}

// SetRank sets field value
func (o *Supporting) SetRank(v int32) {
	o.Rank = v
}

// GetAmount returns the Amount field value
func (o *Supporting) GetAmount() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *Supporting) GetAmountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *Supporting) SetAmount(v string) {
	o.Amount = v
}

// GetReceiver returns the Receiver field value
func (o *Supporting) GetReceiver() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *Supporting) GetReceiverOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *Supporting) SetReceiver(v User) {
	o.Receiver = v
}

func (o Supporting) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Supporting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["rank"] = o.Rank
	toSerialize["amount"] = o.Amount
	toSerialize["receiver"] = o.Receiver
	return toSerialize, nil
}

type NullableSupporting struct {
	value *Supporting
	isSet bool
}

func (v NullableSupporting) Get() *Supporting {
	return v.value
}

func (v *NullableSupporting) Set(val *Supporting) {
	v.value = val
	v.isSet = true
}

func (v NullableSupporting) IsSet() bool {
	return v.isSet
}

func (v *NullableSupporting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupporting(val *Supporting) *NullableSupporting {
	return &NullableSupporting{value: val, isSet: true}
}

func (v NullableSupporting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupporting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


