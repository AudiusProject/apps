/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the Track type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Track{}

// Track struct for Track
type Track struct {
	Artwork *TrackArtwork `json:"artwork,omitempty"`
	Description *string `json:"description,omitempty"`
	Genre *string `json:"genre,omitempty"`
	Id string `json:"id"`
	TrackCid *string `json:"track_cid,omitempty"`
	Mood *string `json:"mood,omitempty"`
	ReleaseDate *string `json:"release_date,omitempty"`
	RemixOf *RemixParent `json:"remix_of,omitempty"`
	RepostCount int32 `json:"repost_count"`
	FavoriteCount int32 `json:"favorite_count"`
	Tags *string `json:"tags,omitempty"`
	Title string `json:"title"`
	User User `json:"user"`
	Duration int32 `json:"duration"`
	Downloadable *bool `json:"downloadable,omitempty"`
	PlayCount int32 `json:"play_count"`
	Permalink *string `json:"permalink,omitempty"`
	IsStreamable *bool `json:"is_streamable,omitempty"`
}

// NewTrack instantiates a new Track object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrack(id string, repostCount int32, favoriteCount int32, title string, user User, duration int32, playCount int32) *Track {
	this := Track{}
	this.Id = id
	this.RepostCount = repostCount
	this.FavoriteCount = favoriteCount
	this.Title = title
	this.User = user
	this.Duration = duration
	this.PlayCount = playCount
	return &this
}

// NewTrackWithDefaults instantiates a new Track object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackWithDefaults() *Track {
	this := Track{}
	return &this
}

// GetArtwork returns the Artwork field value if set, zero value otherwise.
func (o *Track) GetArtwork() TrackArtwork {
	if o == nil || IsNil(o.Artwork) {
		var ret TrackArtwork
		return ret
	}
	return *o.Artwork
}

// GetArtworkOk returns a tuple with the Artwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetArtworkOk() (*TrackArtwork, bool) {
	if o == nil || IsNil(o.Artwork) {
		return nil, false
	}
	return o.Artwork, true
}

// HasArtwork returns a boolean if a field has been set.
func (o *Track) HasArtwork() bool {
	if o != nil && !IsNil(o.Artwork) {
		return true
	}

	return false
}

// SetArtwork gets a reference to the given TrackArtwork and assigns it to the Artwork field.
func (o *Track) SetArtwork(v TrackArtwork) {
	o.Artwork = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Track) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Track) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Track) SetDescription(v string) {
	o.Description = &v
}

// GetGenre returns the Genre field value if set, zero value otherwise.
func (o *Track) GetGenre() string {
	if o == nil || IsNil(o.Genre) {
		var ret string
		return ret
	}
	return *o.Genre
}

// GetGenreOk returns a tuple with the Genre field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetGenreOk() (*string, bool) {
	if o == nil || IsNil(o.Genre) {
		return nil, false
	}
	return o.Genre, true
}

// HasGenre returns a boolean if a field has been set.
func (o *Track) HasGenre() bool {
	if o != nil && !IsNil(o.Genre) {
		return true
	}

	return false
}

// SetGenre gets a reference to the given string and assigns it to the Genre field.
func (o *Track) SetGenre(v string) {
	o.Genre = &v
}

// GetId returns the Id field value
func (o *Track) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Track) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Track) SetId(v string) {
	o.Id = v
}

// GetTrackCid returns the TrackCid field value if set, zero value otherwise.
func (o *Track) GetTrackCid() string {
	if o == nil || IsNil(o.TrackCid) {
		var ret string
		return ret
	}
	return *o.TrackCid
}

// GetTrackCidOk returns a tuple with the TrackCid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetTrackCidOk() (*string, bool) {
	if o == nil || IsNil(o.TrackCid) {
		return nil, false
	}
	return o.TrackCid, true
}

// HasTrackCid returns a boolean if a field has been set.
func (o *Track) HasTrackCid() bool {
	if o != nil && !IsNil(o.TrackCid) {
		return true
	}

	return false
}

// SetTrackCid gets a reference to the given string and assigns it to the TrackCid field.
func (o *Track) SetTrackCid(v string) {
	o.TrackCid = &v
}

// GetMood returns the Mood field value if set, zero value otherwise.
func (o *Track) GetMood() string {
	if o == nil || IsNil(o.Mood) {
		var ret string
		return ret
	}
	return *o.Mood
}

// GetMoodOk returns a tuple with the Mood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetMoodOk() (*string, bool) {
	if o == nil || IsNil(o.Mood) {
		return nil, false
	}
	return o.Mood, true
}

// HasMood returns a boolean if a field has been set.
func (o *Track) HasMood() bool {
	if o != nil && !IsNil(o.Mood) {
		return true
	}

	return false
}

// SetMood gets a reference to the given string and assigns it to the Mood field.
func (o *Track) SetMood(v string) {
	o.Mood = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise.
func (o *Track) GetReleaseDate() string {
	if o == nil || IsNil(o.ReleaseDate) {
		var ret string
		return ret
	}
	return *o.ReleaseDate
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetReleaseDateOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseDate) {
		return nil, false
	}
	return o.ReleaseDate, true
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *Track) HasReleaseDate() bool {
	if o != nil && !IsNil(o.ReleaseDate) {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given string and assigns it to the ReleaseDate field.
func (o *Track) SetReleaseDate(v string) {
	o.ReleaseDate = &v
}

// GetRemixOf returns the RemixOf field value if set, zero value otherwise.
func (o *Track) GetRemixOf() RemixParent {
	if o == nil || IsNil(o.RemixOf) {
		var ret RemixParent
		return ret
	}
	return *o.RemixOf
}

// GetRemixOfOk returns a tuple with the RemixOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetRemixOfOk() (*RemixParent, bool) {
	if o == nil || IsNil(o.RemixOf) {
		return nil, false
	}
	return o.RemixOf, true
}

// HasRemixOf returns a boolean if a field has been set.
func (o *Track) HasRemixOf() bool {
	if o != nil && !IsNil(o.RemixOf) {
		return true
	}

	return false
}

// SetRemixOf gets a reference to the given RemixParent and assigns it to the RemixOf field.
func (o *Track) SetRemixOf(v RemixParent) {
	o.RemixOf = &v
}

// GetRepostCount returns the RepostCount field value
func (o *Track) GetRepostCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepostCount
}

// GetRepostCountOk returns a tuple with the RepostCount field value
// and a boolean to check if the value has been set.
func (o *Track) GetRepostCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepostCount, true
}

// SetRepostCount sets field value
func (o *Track) SetRepostCount(v int32) {
	o.RepostCount = v
}

// GetFavoriteCount returns the FavoriteCount field value
func (o *Track) GetFavoriteCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FavoriteCount
}

// GetFavoriteCountOk returns a tuple with the FavoriteCount field value
// and a boolean to check if the value has been set.
func (o *Track) GetFavoriteCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FavoriteCount, true
}

// SetFavoriteCount sets field value
func (o *Track) SetFavoriteCount(v int32) {
	o.FavoriteCount = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Track) GetTags() string {
	if o == nil || IsNil(o.Tags) {
		var ret string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetTagsOk() (*string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Track) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given string and assigns it to the Tags field.
func (o *Track) SetTags(v string) {
	o.Tags = &v
}

// GetTitle returns the Title field value
func (o *Track) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Track) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Track) SetTitle(v string) {
	o.Title = v
}

// GetUser returns the User field value
func (o *Track) GetUser() User {
	if o == nil {
		var ret User
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *Track) GetUserOk() (*User, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *Track) SetUser(v User) {
	o.User = v
}

// GetDuration returns the Duration field value
func (o *Track) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Track) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Track) SetDuration(v int32) {
	o.Duration = v
}

// GetDownloadable returns the Downloadable field value if set, zero value otherwise.
func (o *Track) GetDownloadable() bool {
	if o == nil || IsNil(o.Downloadable) {
		var ret bool
		return ret
	}
	return *o.Downloadable
}

// GetDownloadableOk returns a tuple with the Downloadable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetDownloadableOk() (*bool, bool) {
	if o == nil || IsNil(o.Downloadable) {
		return nil, false
	}
	return o.Downloadable, true
}

// HasDownloadable returns a boolean if a field has been set.
func (o *Track) HasDownloadable() bool {
	if o != nil && !IsNil(o.Downloadable) {
		return true
	}

	return false
}

// SetDownloadable gets a reference to the given bool and assigns it to the Downloadable field.
func (o *Track) SetDownloadable(v bool) {
	o.Downloadable = &v
}

// GetPlayCount returns the PlayCount field value
func (o *Track) GetPlayCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlayCount
}

// GetPlayCountOk returns a tuple with the PlayCount field value
// and a boolean to check if the value has been set.
func (o *Track) GetPlayCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlayCount, true
}

// SetPlayCount sets field value
func (o *Track) SetPlayCount(v int32) {
	o.PlayCount = v
}

// GetPermalink returns the Permalink field value if set, zero value otherwise.
func (o *Track) GetPermalink() string {
	if o == nil || IsNil(o.Permalink) {
		var ret string
		return ret
	}
	return *o.Permalink
}

// GetPermalinkOk returns a tuple with the Permalink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetPermalinkOk() (*string, bool) {
	if o == nil || IsNil(o.Permalink) {
		return nil, false
	}
	return o.Permalink, true
}

// HasPermalink returns a boolean if a field has been set.
func (o *Track) HasPermalink() bool {
	if o != nil && !IsNil(o.Permalink) {
		return true
	}

	return false
}

// SetPermalink gets a reference to the given string and assigns it to the Permalink field.
func (o *Track) SetPermalink(v string) {
	o.Permalink = &v
}

// GetIsStreamable returns the IsStreamable field value if set, zero value otherwise.
func (o *Track) GetIsStreamable() bool {
	if o == nil || IsNil(o.IsStreamable) {
		var ret bool
		return ret
	}
	return *o.IsStreamable
}

// GetIsStreamableOk returns a tuple with the IsStreamable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Track) GetIsStreamableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsStreamable) {
		return nil, false
	}
	return o.IsStreamable, true
}

// HasIsStreamable returns a boolean if a field has been set.
func (o *Track) HasIsStreamable() bool {
	if o != nil && !IsNil(o.IsStreamable) {
		return true
	}

	return false
}

// SetIsStreamable gets a reference to the given bool and assigns it to the IsStreamable field.
func (o *Track) SetIsStreamable(v bool) {
	o.IsStreamable = &v
}

func (o Track) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Track) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Artwork) {
		toSerialize["artwork"] = o.Artwork
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Genre) {
		toSerialize["genre"] = o.Genre
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.TrackCid) {
		toSerialize["track_cid"] = o.TrackCid
	}
	if !IsNil(o.Mood) {
		toSerialize["mood"] = o.Mood
	}
	if !IsNil(o.ReleaseDate) {
		toSerialize["release_date"] = o.ReleaseDate
	}
	if !IsNil(o.RemixOf) {
		toSerialize["remix_of"] = o.RemixOf
	}
	toSerialize["repost_count"] = o.RepostCount
	toSerialize["favorite_count"] = o.FavoriteCount
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["title"] = o.Title
	toSerialize["user"] = o.User
	toSerialize["duration"] = o.Duration
	if !IsNil(o.Downloadable) {
		toSerialize["downloadable"] = o.Downloadable
	}
	toSerialize["play_count"] = o.PlayCount
	if !IsNil(o.Permalink) {
		toSerialize["permalink"] = o.Permalink
	}
	if !IsNil(o.IsStreamable) {
		toSerialize["is_streamable"] = o.IsStreamable
	}
	return toSerialize, nil
}

type NullableTrack struct {
	value *Track
	isSet bool
}

func (v NullableTrack) Get() *Track {
	return v.value
}

func (v *NullableTrack) Set(val *Track) {
	v.value = val
	v.isSet = true
}

func (v NullableTrack) IsSet() bool {
	return v.isSet
}

func (v *NullableTrack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrack(val *Track) *NullableTrack {
	return &NullableTrack{value: val, isSet: true}
}

func (v NullableTrack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


