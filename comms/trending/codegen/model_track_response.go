/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the TrackResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackResponse{}

// TrackResponse struct for TrackResponse
type TrackResponse struct {
	Data *Track `json:"data,omitempty"`
}

// NewTrackResponse instantiates a new TrackResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackResponse() *TrackResponse {
	this := TrackResponse{}
	return &this
}

// NewTrackResponseWithDefaults instantiates a new TrackResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackResponseWithDefaults() *TrackResponse {
	this := TrackResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TrackResponse) GetData() Track {
	if o == nil || IsNil(o.Data) {
		var ret Track
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackResponse) GetDataOk() (*Track, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TrackResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given Track and assigns it to the Data field.
func (o *TrackResponse) SetData(v Track) {
	o.Data = &v
}

func (o TrackResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableTrackResponse struct {
	value *TrackResponse
	isSet bool
}

func (v NullableTrackResponse) Get() *TrackResponse {
	return v.value
}

func (v *NullableTrackResponse) Set(val *TrackResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackResponse(val *TrackResponse) *NullableTrackResponse {
	return &NullableTrackResponse{value: val, isSet: true}
}

func (v NullableTrackResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


