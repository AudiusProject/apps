/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	AlbumCount int32 `json:"album_count"`
	ArtistPickTrackId *string `json:"artist_pick_track_id,omitempty"`
	Bio *string `json:"bio,omitempty"`
	CoverPhoto *CoverPhoto `json:"cover_photo,omitempty"`
	FolloweeCount int32 `json:"followee_count"`
	FollowerCount int32 `json:"follower_count"`
	DoesFollowCurrentUser *bool `json:"does_follow_current_user,omitempty"`
	Handle string `json:"handle"`
	Id string `json:"id"`
	IsVerified bool `json:"is_verified"`
	Location *string `json:"location,omitempty"`
	Name string `json:"name"`
	PlaylistCount int32 `json:"playlist_count"`
	ProfilePicture *ProfilePicture `json:"profile_picture,omitempty"`
	RepostCount int32 `json:"repost_count"`
	TrackCount int32 `json:"track_count"`
	IsDeactivated bool `json:"is_deactivated"`
	ErcWallet *string `json:"erc_wallet,omitempty"`
	SplWallet string `json:"spl_wallet"`
	SupporterCount int32 `json:"supporter_count"`
	SupportingCount int32 `json:"supporting_count"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser(albumCount int32, followeeCount int32, followerCount int32, handle string, id string, isVerified bool, name string, playlistCount int32, repostCount int32, trackCount int32, isDeactivated bool, splWallet string, supporterCount int32, supportingCount int32) *User {
	this := User{}
	this.AlbumCount = albumCount
	this.FolloweeCount = followeeCount
	this.FollowerCount = followerCount
	this.Handle = handle
	this.Id = id
	this.IsVerified = isVerified
	this.Name = name
	this.PlaylistCount = playlistCount
	this.RepostCount = repostCount
	this.TrackCount = trackCount
	this.IsDeactivated = isDeactivated
	this.SplWallet = splWallet
	this.SupporterCount = supporterCount
	this.SupportingCount = supportingCount
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetAlbumCount returns the AlbumCount field value
func (o *User) GetAlbumCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AlbumCount
}

// GetAlbumCountOk returns a tuple with the AlbumCount field value
// and a boolean to check if the value has been set.
func (o *User) GetAlbumCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AlbumCount, true
}

// SetAlbumCount sets field value
func (o *User) SetAlbumCount(v int32) {
	o.AlbumCount = v
}

// GetArtistPickTrackId returns the ArtistPickTrackId field value if set, zero value otherwise.
func (o *User) GetArtistPickTrackId() string {
	if o == nil || IsNil(o.ArtistPickTrackId) {
		var ret string
		return ret
	}
	return *o.ArtistPickTrackId
}

// GetArtistPickTrackIdOk returns a tuple with the ArtistPickTrackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetArtistPickTrackIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtistPickTrackId) {
		return nil, false
	}
	return o.ArtistPickTrackId, true
}

// HasArtistPickTrackId returns a boolean if a field has been set.
func (o *User) HasArtistPickTrackId() bool {
	if o != nil && !IsNil(o.ArtistPickTrackId) {
		return true
	}

	return false
}

// SetArtistPickTrackId gets a reference to the given string and assigns it to the ArtistPickTrackId field.
func (o *User) SetArtistPickTrackId(v string) {
	o.ArtistPickTrackId = &v
}

// GetBio returns the Bio field value if set, zero value otherwise.
func (o *User) GetBio() string {
	if o == nil || IsNil(o.Bio) {
		var ret string
		return ret
	}
	return *o.Bio
}

// GetBioOk returns a tuple with the Bio field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBioOk() (*string, bool) {
	if o == nil || IsNil(o.Bio) {
		return nil, false
	}
	return o.Bio, true
}

// HasBio returns a boolean if a field has been set.
func (o *User) HasBio() bool {
	if o != nil && !IsNil(o.Bio) {
		return true
	}

	return false
}

// SetBio gets a reference to the given string and assigns it to the Bio field.
func (o *User) SetBio(v string) {
	o.Bio = &v
}

// GetCoverPhoto returns the CoverPhoto field value if set, zero value otherwise.
func (o *User) GetCoverPhoto() CoverPhoto {
	if o == nil || IsNil(o.CoverPhoto) {
		var ret CoverPhoto
		return ret
	}
	return *o.CoverPhoto
}

// GetCoverPhotoOk returns a tuple with the CoverPhoto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetCoverPhotoOk() (*CoverPhoto, bool) {
	if o == nil || IsNil(o.CoverPhoto) {
		return nil, false
	}
	return o.CoverPhoto, true
}

// HasCoverPhoto returns a boolean if a field has been set.
func (o *User) HasCoverPhoto() bool {
	if o != nil && !IsNil(o.CoverPhoto) {
		return true
	}

	return false
}

// SetCoverPhoto gets a reference to the given CoverPhoto and assigns it to the CoverPhoto field.
func (o *User) SetCoverPhoto(v CoverPhoto) {
	o.CoverPhoto = &v
}

// GetFolloweeCount returns the FolloweeCount field value
func (o *User) GetFolloweeCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FolloweeCount
}

// GetFolloweeCountOk returns a tuple with the FolloweeCount field value
// and a boolean to check if the value has been set.
func (o *User) GetFolloweeCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FolloweeCount, true
}

// SetFolloweeCount sets field value
func (o *User) SetFolloweeCount(v int32) {
	o.FolloweeCount = v
}

// GetFollowerCount returns the FollowerCount field value
func (o *User) GetFollowerCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FollowerCount
}

// GetFollowerCountOk returns a tuple with the FollowerCount field value
// and a boolean to check if the value has been set.
func (o *User) GetFollowerCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FollowerCount, true
}

// SetFollowerCount sets field value
func (o *User) SetFollowerCount(v int32) {
	o.FollowerCount = v
}

// GetDoesFollowCurrentUser returns the DoesFollowCurrentUser field value if set, zero value otherwise.
func (o *User) GetDoesFollowCurrentUser() bool {
	if o == nil || IsNil(o.DoesFollowCurrentUser) {
		var ret bool
		return ret
	}
	return *o.DoesFollowCurrentUser
}

// GetDoesFollowCurrentUserOk returns a tuple with the DoesFollowCurrentUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDoesFollowCurrentUserOk() (*bool, bool) {
	if o == nil || IsNil(o.DoesFollowCurrentUser) {
		return nil, false
	}
	return o.DoesFollowCurrentUser, true
}

// HasDoesFollowCurrentUser returns a boolean if a field has been set.
func (o *User) HasDoesFollowCurrentUser() bool {
	if o != nil && !IsNil(o.DoesFollowCurrentUser) {
		return true
	}

	return false
}

// SetDoesFollowCurrentUser gets a reference to the given bool and assigns it to the DoesFollowCurrentUser field.
func (o *User) SetDoesFollowCurrentUser(v bool) {
	o.DoesFollowCurrentUser = &v
}

// GetHandle returns the Handle field value
func (o *User) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *User) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *User) SetHandle(v string) {
	o.Handle = v
}

// GetId returns the Id field value
func (o *User) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *User) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *User) SetId(v string) {
	o.Id = v
}

// GetIsVerified returns the IsVerified field value
func (o *User) GetIsVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsVerified
}

// GetIsVerifiedOk returns a tuple with the IsVerified field value
// and a boolean to check if the value has been set.
func (o *User) GetIsVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsVerified, true
}

// SetIsVerified sets field value
func (o *User) SetIsVerified(v bool) {
	o.IsVerified = v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *User) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *User) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *User) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value
func (o *User) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *User) SetName(v string) {
	o.Name = v
}

// GetPlaylistCount returns the PlaylistCount field value
func (o *User) GetPlaylistCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.PlaylistCount
}

// GetPlaylistCountOk returns a tuple with the PlaylistCount field value
// and a boolean to check if the value has been set.
func (o *User) GetPlaylistCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PlaylistCount, true
}

// SetPlaylistCount sets field value
func (o *User) SetPlaylistCount(v int32) {
	o.PlaylistCount = v
}

// GetProfilePicture returns the ProfilePicture field value if set, zero value otherwise.
func (o *User) GetProfilePicture() ProfilePicture {
	if o == nil || IsNil(o.ProfilePicture) {
		var ret ProfilePicture
		return ret
	}
	return *o.ProfilePicture
}

// GetProfilePictureOk returns a tuple with the ProfilePicture field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetProfilePictureOk() (*ProfilePicture, bool) {
	if o == nil || IsNil(o.ProfilePicture) {
		return nil, false
	}
	return o.ProfilePicture, true
}

// HasProfilePicture returns a boolean if a field has been set.
func (o *User) HasProfilePicture() bool {
	if o != nil && !IsNil(o.ProfilePicture) {
		return true
	}

	return false
}

// SetProfilePicture gets a reference to the given ProfilePicture and assigns it to the ProfilePicture field.
func (o *User) SetProfilePicture(v ProfilePicture) {
	o.ProfilePicture = &v
}

// GetRepostCount returns the RepostCount field value
func (o *User) GetRepostCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepostCount
}

// GetRepostCountOk returns a tuple with the RepostCount field value
// and a boolean to check if the value has been set.
func (o *User) GetRepostCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepostCount, true
}

// SetRepostCount sets field value
func (o *User) SetRepostCount(v int32) {
	o.RepostCount = v
}

// GetTrackCount returns the TrackCount field value
func (o *User) GetTrackCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TrackCount
}

// GetTrackCountOk returns a tuple with the TrackCount field value
// and a boolean to check if the value has been set.
func (o *User) GetTrackCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TrackCount, true
}

// SetTrackCount sets field value
func (o *User) SetTrackCount(v int32) {
	o.TrackCount = v
}

// GetIsDeactivated returns the IsDeactivated field value
func (o *User) GetIsDeactivated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDeactivated
}

// GetIsDeactivatedOk returns a tuple with the IsDeactivated field value
// and a boolean to check if the value has been set.
func (o *User) GetIsDeactivatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsDeactivated, true
}

// SetIsDeactivated sets field value
func (o *User) SetIsDeactivated(v bool) {
	o.IsDeactivated = v
}

// GetErcWallet returns the ErcWallet field value if set, zero value otherwise.
func (o *User) GetErcWallet() string {
	if o == nil || IsNil(o.ErcWallet) {
		var ret string
		return ret
	}
	return *o.ErcWallet
}

// GetErcWalletOk returns a tuple with the ErcWallet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetErcWalletOk() (*string, bool) {
	if o == nil || IsNil(o.ErcWallet) {
		return nil, false
	}
	return o.ErcWallet, true
}

// HasErcWallet returns a boolean if a field has been set.
func (o *User) HasErcWallet() bool {
	if o != nil && !IsNil(o.ErcWallet) {
		return true
	}

	return false
}

// SetErcWallet gets a reference to the given string and assigns it to the ErcWallet field.
func (o *User) SetErcWallet(v string) {
	o.ErcWallet = &v
}

// GetSplWallet returns the SplWallet field value
func (o *User) GetSplWallet() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SplWallet
}

// GetSplWalletOk returns a tuple with the SplWallet field value
// and a boolean to check if the value has been set.
func (o *User) GetSplWalletOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SplWallet, true
}

// SetSplWallet sets field value
func (o *User) SetSplWallet(v string) {
	o.SplWallet = v
}

// GetSupporterCount returns the SupporterCount field value
func (o *User) GetSupporterCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SupporterCount
}

// GetSupporterCountOk returns a tuple with the SupporterCount field value
// and a boolean to check if the value has been set.
func (o *User) GetSupporterCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupporterCount, true
}

// SetSupporterCount sets field value
func (o *User) SetSupporterCount(v int32) {
	o.SupporterCount = v
}

// GetSupportingCount returns the SupportingCount field value
func (o *User) GetSupportingCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SupportingCount
}

// GetSupportingCountOk returns a tuple with the SupportingCount field value
// and a boolean to check if the value has been set.
func (o *User) GetSupportingCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SupportingCount, true
}

// SetSupportingCount sets field value
func (o *User) SetSupportingCount(v int32) {
	o.SupportingCount = v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["album_count"] = o.AlbumCount
	if !IsNil(o.ArtistPickTrackId) {
		toSerialize["artist_pick_track_id"] = o.ArtistPickTrackId
	}
	if !IsNil(o.Bio) {
		toSerialize["bio"] = o.Bio
	}
	if !IsNil(o.CoverPhoto) {
		toSerialize["cover_photo"] = o.CoverPhoto
	}
	toSerialize["followee_count"] = o.FolloweeCount
	toSerialize["follower_count"] = o.FollowerCount
	if !IsNil(o.DoesFollowCurrentUser) {
		toSerialize["does_follow_current_user"] = o.DoesFollowCurrentUser
	}
	toSerialize["handle"] = o.Handle
	toSerialize["id"] = o.Id
	toSerialize["is_verified"] = o.IsVerified
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	toSerialize["name"] = o.Name
	toSerialize["playlist_count"] = o.PlaylistCount
	if !IsNil(o.ProfilePicture) {
		toSerialize["profile_picture"] = o.ProfilePicture
	}
	toSerialize["repost_count"] = o.RepostCount
	toSerialize["track_count"] = o.TrackCount
	toSerialize["is_deactivated"] = o.IsDeactivated
	if !IsNil(o.ErcWallet) {
		toSerialize["erc_wallet"] = o.ErcWallet
	}
	toSerialize["spl_wallet"] = o.SplWallet
	toSerialize["supporter_count"] = o.SupporterCount
	toSerialize["supporting_count"] = o.SupportingCount
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


