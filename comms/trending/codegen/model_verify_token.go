/*
API

Audius V1 API

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package codegen

import (
	"encoding/json"
)

// checks if the VerifyToken type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VerifyToken{}

// VerifyToken struct for VerifyToken
type VerifyToken struct {
	Data *DecodedUserToken `json:"data,omitempty"`
}

// NewVerifyToken instantiates a new VerifyToken object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyToken() *VerifyToken {
	this := VerifyToken{}
	return &this
}

// NewVerifyTokenWithDefaults instantiates a new VerifyToken object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyTokenWithDefaults() *VerifyToken {
	this := VerifyToken{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *VerifyToken) GetData() DecodedUserToken {
	if o == nil || IsNil(o.Data) {
		var ret DecodedUserToken
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyToken) GetDataOk() (*DecodedUserToken, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *VerifyToken) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given DecodedUserToken and assigns it to the Data field.
func (o *VerifyToken) SetData(v DecodedUserToken) {
	o.Data = &v
}

func (o VerifyToken) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VerifyToken) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableVerifyToken struct {
	value *VerifyToken
	isSet bool
}

func (v NullableVerifyToken) Get() *VerifyToken {
	return v.value
}

func (v *NullableVerifyToken) Set(val *VerifyToken) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyToken) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyToken) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyToken(val *VerifyToken) *NullableVerifyToken {
	return &NullableVerifyToken{value: val, isSet: true}
}

func (v NullableVerifyToken) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyToken) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


