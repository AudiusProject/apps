package pages

import (
	"encoding/json"
	"fmt"
	gen_proto "github.com/AudiusProject/audius-protocol/core/gen/proto"
	"github.com/dustin/go-humanize"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"time"
)

type BlockView struct {
	Height    string
	Hash      string
	Proposer  string
	Timestamp time.Time
	Txs       [][]byte
}

type BlockPageJSONResponse struct {
	Height   string                   `json:"block_height"`
	Hash     string                   `json:"block_hash"`
	Proposer string                   `json:"proposer"`
	Txs      []map[string]interface{} `json:"transactions"`
}

func (p *Pages) BlockPageJSON(data *BlockView) (*BlockPageJSONResponse, error) {
	txs := data.Txs

	jsonDataArray := [][]byte{}

	for _, tx := range txs {
		var transaction gen_proto.SignedTransaction
		err := proto.Unmarshal(tx, &transaction)
		if err != nil {
			return nil, fmt.Errorf("could not marshal tx into signed tx: %v", err)
		}

		jsonData, err := protojson.Marshal(&transaction)
		if err != nil {
			return nil, fmt.Errorf("could not marshal proto into json: %v", err)
		}
		jsonDataArray = append(jsonDataArray, jsonData)
	}

	var result []map[string]interface{}

	// Parse each byte array into a map and append to the result slice
	for _, jsonData := range jsonDataArray {
		var obj map[string]interface{}
		if err := json.Unmarshal(jsonData, &obj); err != nil {
			return nil, fmt.Errorf("invalid json")
		}
		result = append(result, obj)
	}

	resTxs := CamelCaseKeys(result)

	return &BlockPageJSONResponse{
		Height:   data.Height,
		Hash:     data.Hash,
		Proposer: data.Proposer,
		Txs:      resTxs,
	}, nil
}

templ (p *Pages) BlockPageHTML(view *BlockView) {
	@p.layout.SiteFrame() {
		<div class="bg-white shadow-md rounded-lg p-4 max-h-max">
			<h1 class="text-xl">
				Block Details
			</h1>
			<div class="p-4 h-full">
				<div>
					@p.components.Link("/block/%s", view.Hash) {
						<div>Hash: { view.Hash }</div>
					}
				</div>
				<div>
					@p.components.Link("/block/%s", view.Height) {
						<div>Height: { view.Height }</div>
					}
				</div>
				<div>
					Age: { humanize.Time(view.Timestamp) }
				</div>
				<div class="px-4 py-8 p font-bold text-l border-b border-gray-500">
					Transactions
				</div>
			</div>
		</div>
	}
}
