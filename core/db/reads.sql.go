// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reads.sql

package db

import (
	"context"
)

const getAllRegisteredNodes = `-- name: GetAllRegisteredNodes :many
select endpoint, eth_address, comet_address
from core_validators
`

type GetAllRegisteredNodesRow struct {
	Endpoint     string
	EthAddress   string
	CometAddress string
}

func (q *Queries) GetAllRegisteredNodes(ctx context.Context) ([]GetAllRegisteredNodesRow, error) {
	rows, err := q.db.Query(ctx, getAllRegisteredNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRegisteredNodesRow
	for rows.Next() {
		var i GetAllRegisteredNodesRow
		if err := rows.Scan(&i.Endpoint, &i.EthAddress, &i.CometAddress); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAppStateAtHeight = `-- name: GetAppStateAtHeight :one
select block_height, app_hash
from core_app_state
where block_height = $1
limit 1
`

type GetAppStateAtHeightRow struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) GetAppStateAtHeight(ctx context.Context, blockHeight int64) (GetAppStateAtHeightRow, error) {
	row := q.db.QueryRow(ctx, getAppStateAtHeight, blockHeight)
	var i GetAppStateAtHeightRow
	err := row.Scan(&i.BlockHeight, &i.AppHash)
	return i, err
}

const getKey = `-- name: GetKey :one
select id, key, value, tx_hash, created_at, updated_at from core_kvstore where key = $1
`

func (q *Queries) GetKey(ctx context.Context, key string) (CoreKvstore, error) {
	row := q.db.QueryRow(ctx, getKey, key)
	var i CoreKvstore
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLatestAppState = `-- name: GetLatestAppState :one
select block_height, app_hash
from core_app_state
order by block_height desc
limit 1
`

type GetLatestAppStateRow struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) GetLatestAppState(ctx context.Context) (GetLatestAppStateRow, error) {
	row := q.db.QueryRow(ctx, getLatestAppState)
	var i GetLatestAppStateRow
	err := row.Scan(&i.BlockHeight, &i.AppHash)
	return i, err
}

const getNodeByEndpoint = `-- name: GetNodeByEndpoint :one
select endpoint, eth_address, comet_address
from core_validators
where endpoint = $1
limit 1
`

type GetNodeByEndpointRow struct {
	Endpoint     string
	EthAddress   string
	CometAddress string
}

func (q *Queries) GetNodeByEndpoint(ctx context.Context, endpoint string) (GetNodeByEndpointRow, error) {
	row := q.db.QueryRow(ctx, getNodeByEndpoint, endpoint)
	var i GetNodeByEndpointRow
	err := row.Scan(&i.Endpoint, &i.EthAddress, &i.CometAddress)
	return i, err
}

const getTx = `-- name: GetTx :one
select rowid, block_id, index, created_at, tx_hash, tx_result from core_tx_results where lower(tx_hash) = lower($1) limit 1
`

func (q *Queries) GetTx(ctx context.Context, lower string) (CoreTxResult, error) {
	row := q.db.QueryRow(ctx, getTx, lower)
	var i CoreTxResult
	err := row.Scan(
		&i.Rowid,
		&i.BlockID,
		&i.Index,
		&i.CreatedAt,
		&i.TxHash,
		&i.TxResult,
	)
	return i, err
}

const totalTxResults = `-- name: TotalTxResults :one
select count(tx_hash) from core_tx_results
`

func (q *Queries) TotalTxResults(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, totalTxResults)
	var count int64
	err := row.Scan(&count)
	return count, err
}
