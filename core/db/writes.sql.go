// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: writes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearUncommittedSlaNodeReports = `-- name: ClearUncommittedSlaNodeReports :exec
delete from sla_node_reports
where sla_rollup_id is null
`

func (q *Queries) ClearUncommittedSlaNodeReports(ctx context.Context) error {
	_, err := q.db.Exec(ctx, clearUncommittedSlaNodeReports)
	return err
}

const commitSlaNodeReport = `-- name: CommitSlaNodeReport :exec
insert into sla_node_reports (sla_rollup_id, address, blocks_proposed)
values ($1, $2, $3)
`

type CommitSlaNodeReportParams struct {
	SlaRollupID    pgtype.Int4
	Address        string
	BlocksProposed int32
}

func (q *Queries) CommitSlaNodeReport(ctx context.Context, arg CommitSlaNodeReportParams) error {
	_, err := q.db.Exec(ctx, commitSlaNodeReport, arg.SlaRollupID, arg.Address, arg.BlocksProposed)
	return err
}

const commitSlaRollup = `-- name: CommitSlaRollup :one
insert into sla_rollups (time, tx_hash, block_start, block_end)
values ($1, $2, $3, $4)
returning id
`

type CommitSlaRollupParams struct {
	Time       pgtype.Timestamp
	TxHash     string
	BlockStart int64
	BlockEnd   int64
}

func (q *Queries) CommitSlaRollup(ctx context.Context, arg CommitSlaRollupParams) (int32, error) {
	row := q.db.QueryRow(ctx, commitSlaRollup,
		arg.Time,
		arg.TxHash,
		arg.BlockStart,
		arg.BlockEnd,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const insertKVStore = `-- name: InsertKVStore :one
insert into core_kvstore (key, value, tx_hash)
values ($1, $2, $3)
on conflict (key) 
do update set
    value = excluded.value,
    tx_hash = excluded.tx_hash,
    updated_at = now()
returning id, key, value, tx_hash, created_at, updated_at
`

type InsertKVStoreParams struct {
	Key    string
	Value  string
	TxHash string
}

func (q *Queries) InsertKVStore(ctx context.Context, arg InsertKVStoreParams) (CoreKvstore, error) {
	row := q.db.QueryRow(ctx, insertKVStore, arg.Key, arg.Value, arg.TxHash)
	var i CoreKvstore
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.TxHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertRegisteredNode = `-- name: InsertRegisteredNode :exec
insert into core_validators(pub_key, endpoint, eth_address, comet_address, eth_block, node_type, sp_id)
values ($1, $2, $3, $4, $5, $6, $7)
`

type InsertRegisteredNodeParams struct {
	PubKey       string
	Endpoint     string
	EthAddress   string
	CometAddress string
	EthBlock     string
	NodeType     string
	SpID         string
}

func (q *Queries) InsertRegisteredNode(ctx context.Context, arg InsertRegisteredNodeParams) error {
	_, err := q.db.Exec(ctx, insertRegisteredNode,
		arg.PubKey,
		arg.Endpoint,
		arg.EthAddress,
		arg.CometAddress,
		arg.EthBlock,
		arg.NodeType,
		arg.SpID,
	)
	return err
}

const upsertAppState = `-- name: UpsertAppState :exec
insert into core_app_state (block_height, app_hash)
values ($1, $2)
`

type UpsertAppStateParams struct {
	BlockHeight int64
	AppHash     []byte
}

func (q *Queries) UpsertAppState(ctx context.Context, arg UpsertAppStateParams) error {
	_, err := q.db.Exec(ctx, upsertAppState, arg.BlockHeight, arg.AppHash)
	return err
}

const upsertSlaRollupReport = `-- name: UpsertSlaRollupReport :exec
with updated as (
    update sla_node_reports 
    set blocks_proposed = blocks_proposed + 1
    where address = $1 and sla_rollup_id is null
    returning id, address, blocks_proposed, sla_rollup_id
)
insert into sla_node_reports (address, blocks_proposed, sla_rollup_id)
select $1, 1, null
where not exists (select 1 from updated)
`

func (q *Queries) UpsertSlaRollupReport(ctx context.Context, address string) error {
	_, err := q.db.Exec(ctx, upsertSlaRollupReport, address)
	return err
}
