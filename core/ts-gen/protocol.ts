// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.27.3
// source: protocol.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "protocol";

export interface Event {
  signature: string;
  plays?: PlaysEvent | undefined;
}

export interface SubmitEventRequest {
  event: Event | undefined;
}

export interface SubmitEventResponse {
  txhash: string;
}

export interface GetEventRequest {
  txhash: string;
}

export interface GetEventResponse {
  event: Event | undefined;
}

export interface PlaysEvent {
  listens: Listen[];
}

export interface Listen {
  userId: string;
  trackId: string;
  timestamp: Date | undefined;
  signature: string;
}

export interface PingRequest {
}

export interface PingResponse {
  message: string;
}

export interface SetKeyValueRequest {
  key: string;
  value: string;
}

export interface GetKeyValueRequest {
  key: string;
}

export interface KeyValueResponse {
  key: string;
  value: string;
  txhash: string;
}

function createBaseEvent(): Event {
  return { signature: "", plays: undefined };
}

export const Event = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.plays !== undefined) {
      PlaysEvent.encode(message.plays, writer.uint32(8002).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 1000:
          if (tag !== 8002) {
            break;
          }

          message.plays = PlaysEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      plays: isSet(object.plays) ? PlaysEvent.fromJSON(object.plays) : undefined,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.plays !== undefined) {
      obj.plays = PlaysEvent.toJSON(message.plays);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Event>, I>>(base?: I): Event {
    return Event.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Event>, I>>(object: I): Event {
    const message = createBaseEvent();
    message.signature = object.signature ?? "";
    message.plays = (object.plays !== undefined && object.plays !== null)
      ? PlaysEvent.fromPartial(object.plays)
      : undefined;
    return message;
  },
};

function createBaseSubmitEventRequest(): SubmitEventRequest {
  return { event: undefined };
}

export const SubmitEventRequest = {
  encode(message: SubmitEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitEventRequest {
    return { event: isSet(object.event) ? Event.fromJSON(object.event) : undefined };
  },

  toJSON(message: SubmitEventRequest): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitEventRequest>, I>>(base?: I): SubmitEventRequest {
    return SubmitEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitEventRequest>, I>>(object: I): SubmitEventRequest {
    const message = createBaseSubmitEventRequest();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

function createBaseSubmitEventResponse(): SubmitEventResponse {
  return { txhash: "" };
}

export const SubmitEventResponse = {
  encode(message: SubmitEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txhash !== "") {
      writer.uint32(10).string(message.txhash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txhash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitEventResponse {
    return { txhash: isSet(object.txhash) ? globalThis.String(object.txhash) : "" };
  },

  toJSON(message: SubmitEventResponse): unknown {
    const obj: any = {};
    if (message.txhash !== "") {
      obj.txhash = message.txhash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SubmitEventResponse>, I>>(base?: I): SubmitEventResponse {
    return SubmitEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SubmitEventResponse>, I>>(object: I): SubmitEventResponse {
    const message = createBaseSubmitEventResponse();
    message.txhash = object.txhash ?? "";
    return message;
  },
};

function createBaseGetEventRequest(): GetEventRequest {
  return { txhash: "" };
}

export const GetEventRequest = {
  encode(message: GetEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txhash !== "") {
      writer.uint32(10).string(message.txhash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txhash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventRequest {
    return { txhash: isSet(object.txhash) ? globalThis.String(object.txhash) : "" };
  },

  toJSON(message: GetEventRequest): unknown {
    const obj: any = {};
    if (message.txhash !== "") {
      obj.txhash = message.txhash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventRequest>, I>>(base?: I): GetEventRequest {
    return GetEventRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventRequest>, I>>(object: I): GetEventRequest {
    const message = createBaseGetEventRequest();
    message.txhash = object.txhash ?? "";
    return message;
  },
};

function createBaseGetEventResponse(): GetEventResponse {
  return { event: undefined };
}

export const GetEventResponse = {
  encode(message: GetEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventResponse {
    return { event: isSet(object.event) ? Event.fromJSON(object.event) : undefined };
  },

  toJSON(message: GetEventResponse): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetEventResponse>, I>>(base?: I): GetEventResponse {
    return GetEventResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetEventResponse>, I>>(object: I): GetEventResponse {
    const message = createBaseGetEventResponse();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

function createBasePlaysEvent(): PlaysEvent {
  return { listens: [] };
}

export const PlaysEvent = {
  encode(message: PlaysEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.listens) {
      Listen.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaysEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaysEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.listens.push(Listen.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaysEvent {
    return {
      listens: globalThis.Array.isArray(object?.listens) ? object.listens.map((e: any) => Listen.fromJSON(e)) : [],
    };
  },

  toJSON(message: PlaysEvent): unknown {
    const obj: any = {};
    if (message.listens?.length) {
      obj.listens = message.listens.map((e) => Listen.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaysEvent>, I>>(base?: I): PlaysEvent {
    return PlaysEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaysEvent>, I>>(object: I): PlaysEvent {
    const message = createBasePlaysEvent();
    message.listens = object.listens?.map((e) => Listen.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListen(): Listen {
  return { userId: "", trackId: "", timestamp: undefined, signature: "" };
}

export const Listen = {
  encode(message: Listen, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.signature !== "") {
      writer.uint32(34).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Listen {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListen();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Listen {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: Listen): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Listen>, I>>(base?: I): Listen {
    return Listen.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Listen>, I>>(object: I): Listen {
    const message = createBaseListen();
    message.userId = object.userId ?? "";
    message.trackId = object.trackId ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBasePingRequest(): PingRequest {
  return {};
}

export const PingRequest = {
  encode(_: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingRequest {
    return {};
  },

  toJSON(_: PingRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PingRequest>, I>>(base?: I): PingRequest {
    return PingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingRequest>, I>>(_: I): PingRequest {
    const message = createBasePingRequest();
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { message: "" };
}

export const PingResponse = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingResponse>, I>>(base?: I): PingResponse {
    return PingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingResponse>, I>>(object: I): PingResponse {
    const message = createBasePingResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSetKeyValueRequest(): SetKeyValueRequest {
  return { key: "", value: "" };
}

export const SetKeyValueRequest = {
  encode(message: SetKeyValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetKeyValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetKeyValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetKeyValueRequest {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: SetKeyValueRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetKeyValueRequest>, I>>(base?: I): SetKeyValueRequest {
    return SetKeyValueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetKeyValueRequest>, I>>(object: I): SetKeyValueRequest {
    const message = createBaseSetKeyValueRequest();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGetKeyValueRequest(): GetKeyValueRequest {
  return { key: "" };
}

export const GetKeyValueRequest = {
  encode(message: GetKeyValueRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetKeyValueRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetKeyValueRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetKeyValueRequest {
    return { key: isSet(object.key) ? globalThis.String(object.key) : "" };
  },

  toJSON(message: GetKeyValueRequest): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetKeyValueRequest>, I>>(base?: I): GetKeyValueRequest {
    return GetKeyValueRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetKeyValueRequest>, I>>(object: I): GetKeyValueRequest {
    const message = createBaseGetKeyValueRequest();
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseKeyValueResponse(): KeyValueResponse {
  return { key: "", value: "", txhash: "" };
}

export const KeyValueResponse = {
  encode(message: KeyValueResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.txhash !== "") {
      writer.uint32(26).string(message.txhash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KeyValueResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKeyValueResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.txhash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KeyValueResponse {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      txhash: isSet(object.txhash) ? globalThis.String(object.txhash) : "",
    };
  },

  toJSON(message: KeyValueResponse): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.txhash !== "") {
      obj.txhash = message.txhash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KeyValueResponse>, I>>(base?: I): KeyValueResponse {
    return KeyValueResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KeyValueResponse>, I>>(object: I): KeyValueResponse {
    const message = createBaseKeyValueResponse();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    message.txhash = object.txhash ?? "";
    return message;
  },
};

export interface Protocol {
  SubmitEvent(request: SubmitEventRequest): Promise<SubmitEventResponse>;
  GetEvent(request: GetEventRequest): Promise<GetEventResponse>;
  Ping(request: PingRequest): Promise<PingResponse>;
  SetKeyValue(request: SetKeyValueRequest): Promise<KeyValueResponse>;
  GetKeyValue(request: GetKeyValueRequest): Promise<KeyValueResponse>;
}

export const ProtocolServiceName = "protocol.Protocol";
export class ProtocolClientImpl implements Protocol {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProtocolServiceName;
    this.rpc = rpc;
    this.SubmitEvent = this.SubmitEvent.bind(this);
    this.GetEvent = this.GetEvent.bind(this);
    this.Ping = this.Ping.bind(this);
    this.SetKeyValue = this.SetKeyValue.bind(this);
    this.GetKeyValue = this.GetKeyValue.bind(this);
  }
  SubmitEvent(request: SubmitEventRequest): Promise<SubmitEventResponse> {
    const data = SubmitEventRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SubmitEvent", data);
    return promise.then((data) => SubmitEventResponse.decode(new BinaryReader(data)));
  }

  GetEvent(request: GetEventRequest): Promise<GetEventResponse> {
    const data = GetEventRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetEvent", data);
    return promise.then((data) => GetEventResponse.decode(new BinaryReader(data)));
  }

  Ping(request: PingRequest): Promise<PingResponse> {
    const data = PingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Ping", data);
    return promise.then((data) => PingResponse.decode(new BinaryReader(data)));
  }

  SetKeyValue(request: SetKeyValueRequest): Promise<KeyValueResponse> {
    const data = SetKeyValueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SetKeyValue", data);
    return promise.then((data) => KeyValueResponse.decode(new BinaryReader(data)));
  }

  GetKeyValue(request: GetKeyValueRequest): Promise<KeyValueResponse> {
    const data = GetKeyValueRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetKeyValue", data);
    return promise.then((data) => KeyValueResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
