worker_processes 1;

events {
    worker_connections 4096;
}

http {
    log_format format_with_cache_status '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status x-cache-status=$upstream_cache_status $bytes_sent '
                       '"$http_referer" "$http_user_agent" "$gzip_ratio"';
    access_log /usr/local/openresty/logs/access.log format_with_cache_status;

    # A value of 0 disables client upload size check on the nginx proxy layer, and shifts the responsibility
    # back to the app
    client_max_body_size 0;
    lua_package_path "/usr/local/openresty/conf/?.lua;;";

    proxy_cache_path /usr/local/openresty/cache levels=1:2 keys_zone=cidcache:1000m
					max_size=10g inactive=1m use_temp_path=off;
    proxy_read_timeout 3600; # 1 hour in seconds

    server {
        listen 4000;

        # Match the path /ipfs/<cid: string>. If present in cache, serve. 
        # Else, hit upstream server + update cache + serve.
        # ^~ : if request matches this route, do not attempt to bypass via the `/` pattern below
        location ^~ /ipfs {
            proxy_cache cidcache;
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header X-Forwarded-For $remote_addr;

            # This directive + proxy_cache_background_update -> deliver stale content when client requests
            # an item that is expired or in the process of being updated from origin server
            proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
            proxy_cache_background_update on;

            proxy_cache_valid 200 1m;
            proxy_cache_lock on;
            proxy_cache_lock_age 5s;

            # Bypass cache with bypasscache=true query string and save new response to proxy cache
            proxy_cache_bypass $arg_bypasscache;

            # Add header to indicate the status of the cache with this request
            add_header X-Cache-Status $upstream_cache_status always;
        }

        # Pass all other requests to upstream server
        location / {
            proxy_pass http://127.0.0.1:3000;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}