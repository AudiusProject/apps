import { randomBytes } from "crypto";
import { mkdir, writeFile } from "fs/promises";
import path from "path";

import chalk from "chalk";
import { program } from "commander";

import { ACCOUNTS_PATH, initializeAudiusLibs } from "./utils.mjs";

program.command("create-user")
  .description("Create a new user")
  .argument("[handle]", "The handle for the new user (chosen randomly if not specified)")
  .option("-p, --password <password>", "The password for the new user", "password")
  .option("-e, --email <email>", "The email for the new user (chosen randomly if not specified)")
  .action(async (handle, { password, email }) => {
    const audiusLibs = await initializeAudiusLibs();

    const rand = randomBytes(2).toString("hex").padStart(4, '0').toUpperCase();

    email = email || `audius-cmd+${rand}@audius.co`;

    const metadata = {
      bio: `account generated by audius-cmd ${rand}`,
      cover_photo: null,
      cover_photo_sizes: null,
      profile_picture: null,
      profile_picture_sizes: null,
      creator_node_endpoint: null,
      handle: handle || `handle${rand}`,
      is_deactivated: false,
      is_verified: false,
      location: `location${rand}`,
      name: `name ${rand}`,
    };

    try {
      const response = await audiusLibs.Account.signUp(
        email,
        password,
        metadata,
      );

      if (response.error) {
        program.error(chalk.red(response.error));
      }

      console.log(chalk.green("Successfully created user!"));
      console.log(chalk.yellow.bold("Handle:   "), metadata.handle);
      console.log(chalk.yellow.bold("Email:    "), email);
      console.log(chalk.yellow.bold("Password: "), password);

      await mkdir(ACCOUNTS_PATH, { recursive: true });
      await writeFile(
        path.join(ACCOUNTS_PATH, metadata.handle),
        audiusLibs.web3Manager.ownerWallet.privateKey.toString("hex"),
      );
    } catch (err) {
      program.error(err.message);
    }

    process.exit(0);
  });
