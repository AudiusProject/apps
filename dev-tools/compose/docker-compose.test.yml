# Do not expose any ports in this file to allow running multiple tests and e2e dev at the same time

x-logging: &default-logging
  options:
    max-size: '50m'
    max-file: '3'
  driver: json-file

services:
  ingress:
    logging: *default-logging
    volumes:
      - ./nginx_ingress_test.conf:/etc/nginx/conf.d/default.conf
    extra_hosts:
      - 'audius-protocol-creator-node-1:host-gateway'
      - 'audius-protocol-creator-node-2:host-gateway'
      - 'audius-protocol-creator-node-3:host-gateway'
      - 'audius-protocol-discovery-provider-1:host-gateway'
    extends:
      file: docker-compose.dev-tools.${DOCKERCOMPOSE_ENV_TYPE:-dev}.yml
      service: ingress
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/']
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - mediorum
      - core-tests

  db:
    image: postgres
    restart: unless-stopped
    ports:
      - 5455:5432
    environment:
      PGUSER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
    volumes:
      - ../startup/initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 10s
      timeout: 5s
    deploy:
      mode: global
      resources:
        limits:
          memory: 3G

  poa-ganache:
    image: audius/poa-ganache:latest
    command: bash /tmp/dev-tools/startup/poa-ganache.sh
    volumes:
      - poa-contracts-abis:/usr/src/app/build/contracts
      - ${PROJECT_ROOT}/dev-tools:/tmp/dev-tools
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - tests
      - chain
      - poa

  eth-ganache:
    image: audius/eth-ganache:latest
    command: bash /tmp/dev-tools/startup/eth-ganache.sh
    volumes:
      - eth-contracts-abis:/usr/src/app/build/contracts
      - ${PROJECT_ROOT}/dev-tools:/tmp/dev-tools
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - mediorum
      - core-tests
      - tests
      - chain
      - eth

  # NOTE: We don't need solana but services have depend_on solana-test-validator
  # so we use a dummy container
  solana-test-validator:
    image: alpine:3.14
    command: sleep inf
    healthcheck:
      test: ['CMD', 'true']
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - tests
      - chain
      - solana

  # core

  audiusd-1:
    image: audius/audiusd:prerelease
    env_file:
      - ${PROJECT_ROOT}/dev-tools/environment/audiusd-1.env
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:26659/console/health_check']
      interval: 10s
      start_period: 60s
      timeout: 5s
    profiles:
      - mediorum
      - core-tests
    depends_on:
      db:
        condition: service_healthy

  audiusd-2:
    image: audius/audiusd:prerelease
    env_file:
      - ${PROJECT_ROOT}/dev-tools/environment/audiusd-2.env
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:1991/health_check']
      interval: 10s
      start_period: 60s
      timeout: 5s
    profiles:
      - mediorum
      - core-tests
    depends_on:
      db:
        condition: service_healthy

  audiusd-3:
    image: audius/audiusd:prerelease
    env_file:
      - ${PROJECT_ROOT}/dev-tools/environment/audiusd-3.env
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:1991/health_check']
      interval: 10s
      start_period: 60s
      timeout: 5s
    profiles:
      - mediorum
      - core-tests
    depends_on:
      db:
        condition: service_healthy

  audiusd-4:
    image: audius/audiusd:prerelease
    env_file:
      - ${PROJECT_ROOT}/dev-tools/environment/audiusd-4.env
    restart: unless-stopped
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:1991/health_check']
      interval: 10s
      start_period: 60s
      timeout: 5s
    profiles:
      - mediorum
      - core-tests
    depends_on:
      db:
        condition: service_healthy

  test-core:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/cmd/core/infra/Dockerfile.tests
    logging: *default-logging
    entrypoint: sh -c '[ ! "$$1" = "test" ] && sleep inf || (shift; go test -v ./pkg/core/... -timeout 60s "$$@")' -
    profiles:
      - core-tests
    depends_on:
      ingress:
        condition: service_healthy
      audiusd-1:
        condition: service_started
      audiusd-2:
        condition: service_started
      audiusd-3:
        condition: service_started
      audiusd-4:
        condition: service_started
      eth-ganache:
        condition: service_healthy

  # libs

  test-audius-libs:
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/packages/libs/Dockerfile
      args:
        TURBO_TEAM: '${TURBO_TEAM}'
        TURBO_TOKEN: '${TURBO_TOKEN}'
    # TODO: also run integration test current blocker is that integration tests
    # use config.json which was removed with the addition of audius-compose
    entrypoint: sh -c '[ "$$1" = "test" ] || sleep inf && (shift; npm run test:unit)' -
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - tests

  # contracts
  test-contracts:
    user: ${DOCKER_UID:-root}:${DOCKER_GID:-root}
    build:
      context: ${PROJECT_ROOT}/contracts
      dockerfile: Dockerfile
      args:
        bootstrapSPIds: ${BOOTSTRAP_SP_IDS}
        bootstrapSPDelegateWallets: ${BOOTSTRAP_SP_DELEGATE_WALLETS}
        bootstrapSPOwnerWallets: ${BOOTSTRAP_SP_OWNER_WALLETS}
    entrypoint: sh -c '[ "$$1" = "test" ] || sleep inf && (shift; npm run test)' -
    logging: *default-logging
    deploy:
      mode: global
    depends_on:
      poa-ganache:
        condition: service_healthy
    profiles:
      - poa
    volumes:
      - ${PROJECT_ROOT}/contracts:/usr/src/app
      - /usr/src/app/node_modules

  # eth-contracts
  test-eth-contracts:
    user: ${DOCKER_UID:-root}:${DOCKER_GID:-root}
    build:
      context: ${PROJECT_ROOT}/eth-contracts
      args:
        CONTENT_NODE_VERSION: ${CONTENT_NODE_VERSION}
        DISCOVERY_NODE_VERSION: ${DISCOVERY_NODE_VERSION}
        antiAbuseOracleAddresses: '${AAO_WALLET_ADDRESSES}'
    entrypoint: sh -c '[ "$$1" = "test" ] || sleep inf && (shift; npm run test)' -
    logging: *default-logging
    deploy:
      mode: global
    depends_on:
      eth-ganache:
        condition: service_healthy
    profiles:
      - eth
    volumes:
      - ${PROJECT_ROOT}/eth-contracts:/usr/src/app
      - /usr/src/app/node_modules

  # discovery-provider

  discovery-provider-elasticsearch:
    extends:
      file: docker-compose.yml
      service: discovery-provider-elasticsearch
    deploy:
      mode: global
      replicas: 1 # Override default replicas
    profiles:
      - tests
      - discovery

  discovery-provider-db:
    image: postgres:11.4
    user: postgres
    command: postgres -c shared_buffers=512MB -c max_connections=500 -c shared_preload_libraries=pg_stat_statements
    environment:
      POSTGRES_DB: 'discovery_provider'
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 1s
      timeout: 2s
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - notifications
      - tests
      - discovery

  discovery-provider-redis:
    image: redis:7.0
    healthcheck:
      test: ['CMD', 'redis-cli', 'PING']
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - notifications
      - tests
      - discovery

  test-discovery-provider-migrations:
    extends:
      file: docker-compose.yml
      service: discovery-provider
    command: sh -c "./scripts/test-migrations.sh"
    environment:
      audius_db_url: 'postgresql://postgres:postgres@discovery-provider-db:5432/discovery_provider'
    depends_on:
      discovery-provider-db:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: global
      replicas: 1
    profiles:
      - tests
      - notifications

  # todo: this will need es-indexer container running for tests to pass..
  # unless we just skip all the search tests for now
  test-discovery-provider:
    user: ${DOCKER_UID:-root}:${DOCKER_GID:-root}
    extends:
      file: docker-compose.yml
      service: discovery-provider
    entrypoint: sh -c '[ ! "$$1" = "test" ] && sleep inf || (shift; pytest "$$@")' -
    command: ''
    environment:
      audius_db_url: 'postgresql+psycopg2://postgres:postgres@discovery-provider-db:5432/discovery_provider'
      audius_db_url_read_replica: 'postgresql+psycopg2://postgres:postgres@discovery-provider-db:5432/discovery_provider'

      audius_redis_url: 'redis://discovery-provider-redis:6379/00'

      audius_elasticsearch_url: 'http://discovery-provider-elasticsearch:9200'
    volumes:
      - ${PROJECT_ROOT}/packages/discovery-provider:/audius-discovery-provider
      - ${PROJECT_ROOT}/packages/es-indexer:/app/packages/discovery-provider/es-indexer
      - ${PROJECT_ROOT}/node_modules:/app/node_modules

    depends_on:
      discovery-provider-elasticsearch:
        condition: service_healthy
      discovery-provider-db:
        condition: service_healthy
      discovery-provider-redis:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: global
      replicas: 1 # Override default replicas
    profiles:
      - tests
      - elasticsearch
      - discovery

  test-discovery-provider-notifications:
    user: ${DOCKER_UID:-root}:${DOCKER_GID:-root}
    build:
      context: ${PROJECT_ROOT}/packages/discovery-provider/plugins/notifications
      dockerfile: Dockerfile
    entrypoint: sh -c '[ ! "$$1" = "test" ] && sleep inf || (shift; npm run test "$$@")' -
    environment:
      AUDIUS_REDIS_URL: 'redis://discovery-provider-redis:6379/00'
      DN_DB_URL: 'postgresql://postgres:postgres@discovery-provider-db:5432/discovery_provider'
      IDENTITY_DB_URL: 'postgresql://postgres:postgres@identity-service-db:5432/identity_service'
    volumes:
      - ${PROJECT_ROOT}/packages/discovery-provider/plugins/notifications:/notifications
      - /notifications/node_modules
    depends_on:
      test-discovery-provider-migrations:
        condition: service_completed_successfully
      test-comms-migrations:
        condition: service_completed_successfully
      test-identity-service-migrations:
        condition: service_completed_successfully
      discovery-provider-redis:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: replicas
      replicas: 1
    profiles:
      - tests
      - notifications

  # comms

  test-comms-migrations:
    build:
      context: ${PROJECT_ROOT}/comms
      dockerfile: Dockerfile
    command: comms discovery-migrations
    environment:
      audius_db_url: 'postgres://postgres:postgres@discovery-provider-db:5432/discovery_provider?sslmode=disable'
    depends_on:
      test-discovery-provider-migrations:
        condition: service_completed_successfully
    logging: *default-logging
    profiles:
      - tests
      - notifications

  # identity-service

  identity-service-db:
    image: postgres:11.4
    user: postgres
    command: postgres -c shared_buffers=512MB -c max_connections=500 -c shared_preload_libraries=pg_stat_statements
    environment:
      POSTGRES_DB: 'identity_service'
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 1s
      timeout: 2s
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - tests
      - notifications
      - identity

  identity-service-redis:
    image: redis:7.0
    command: redis-server
    healthcheck:
      test: ['CMD', 'redis-cli', 'PING']
      interval: 10s
      timeout: 5s
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - tests
      - identity

  test-identity-service-migrations:
    extends:
      file: docker-compose.identity.dev.yml
      service: identity-service
    command: sh -c "npm run db:migrate"
    environment:
      dbUrl: 'postgresql://postgres:postgres@identity-service-db:5432/identity_service'
    depends_on:
      identity-service-db:
        condition: service_healthy
    logging: *default-logging
    deploy:
      mode: global
    profiles:
      - tests
      - notifications

  test-identity-service:
    extends:
      file: docker-compose.identity.dev.yml
      service: identity-service
    build:
      context: ${PROJECT_ROOT}
      dockerfile: ${PROJECT_ROOT}/packages/identity-service/Dockerfile.dev
    entrypoint: sh -c '[ ! "$$1" = "test" ] && echo $$(ls) && sleep inf || (shift; npx mocha "$$@")' -
    command: ''
    environment:
      isTestRun: 'true'
      environment: 'test'
    profiles:
      - tests
      - identity

volumes:
  poa-contracts-abis:
  eth-contracts-abis:
  solana-programs-idl:
  postgresdata:
  mediorum:
  legacy_creator_file_storage:
