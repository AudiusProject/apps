worker_processes 1;

error_log logs/error.log;

env audius_openresty_accept_redirect_from;
env audius_openresty_public_url;
env audius_openresty_rate_limit;
env audius_openresty_redirect_targets;
env audius_openresty_rsa_private_key;
env audius_openresty_rsa_public_key;

events {
    worker_connections 1024;
}

http {
    lua_package_path "/usr/local/openresty/conf/?.lua;;";

    lua_shared_dict my_limit_count_store 100m;
    lua_shared_dict rsa_public_key_store 10m;
    lua_shared_dict nonce_store 10m;

    server {
        listen 5000;

        location = /openresty_pubkey {
            content_by_lua_block {
                local config = require "config"
                ngx.say(config.rsa_public_key)
            }
        }

        location ~* .*_(check|version) {
            proxy_pass http://127.0.0.1:3000;
        }

        location / {
            access_by_lua_block {
                local limit_count = require "resty.limit.count"

                local main = require "main"
                local config = require "config"

                if not config.rate_limiting_enabled then
                    return
                end

                if main.verify_signature(ngx.var.redirect_from, ngx.var.redirect_nonce, ngx.var.redirect_sig) then
                    return
                end

                local lim, err = limit_count.new("my_limit_count_store", config.rate_limit, 1)
                if not lim then
                    ngx.log(ngx.ERR, "failed to instantiate a resty.limit.req object: ", err)
                    return ngx.exit(500)
                end

                local delay, err = lim:incoming("k", true)
                if not delay then
                    if err == "rejected" then
                        local url = main.get_redirect_target() .. ngx.var.request_uri
                        url = url .. ((ngx.var.is_args == "?") and "&" or "?") .. main.get_redirect_args()
                        return ngx.redirect(url)
                    end

                    ngx.log(ngx.ERR, "failed to limit req: ", err)
                    return ngx.exit(500)
                end
            }

            proxy_pass http://127.0.0.1:3000;
        }
    }
}
