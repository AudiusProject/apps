"use strict";(self.webpackChunkdocs_audius_org=self.webpackChunkdocs_audius_org||[]).push([[6368],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>v});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(r),v=a,m=p["".concat(l,".").concat(v)]||p[v]||c[v]||o;return r?t.createElement(m,i(i({ref:n},u),{},{components:r})):t.createElement(m,i({ref:n},u))}));function v(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<o;d++)i[d]=r[d];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2592:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var t=r(7462),a=(r(7294),r(3905));const o={sidebar_label:"Advanced Setup",sidebar_position:4},i="Advanced Setup",s={unversionedId:"token/running-a-node/advanced_setup",id:"token/running-a-node/advanced_setup",title:"Advanced Setup",description:"Launching a new node from scratch",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/token/running-a-node/advanced_setup.md",sourceDirName:"token/running-a-node",slug:"/token/running-a-node/advanced_setup",permalink:"/token/running-a-node/advanced_setup",draft:!1,editUrl:"https://github.com/AudiusProject/docs.audius.org/docs/token/running-a-node/advanced_setup.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_label:"Advanced Setup",sidebar_position:4},sidebar:"sidebar",previous:{title:"Setup Instructions",permalink:"/token/running-a-node/setup"},next:{title:"Governance",permalink:"/token/governance"}},l={},d=[{value:"Launching a new node from scratch",id:"launching-a-new-node-from-scratch",level:2},{value:"Setting environment variables",id:"setting-environment-variables",level:3},{value:"Creator Node",id:"creator-node",level:4},{value:"External Creator Node Postgres",id:"external-creator-node-postgres",level:5},{value:"Discovery Provider",id:"discovery-provider",level:4},{value:"External Discovery Provider Postgres Instance",id:"external-discovery-provider-postgres-instance",level:5},{value:"Launch",id:"launch",level:3},{value:"Migration from Kubernetes",id:"migration-from-kubernetes",level:2}],u={toc:d};function c(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"advanced-setup"},"Advanced Setup"),(0,a.kt)("h2",{id:"launching-a-new-node-from-scratch"},"Launching a new node from scratch"),(0,a.kt)("h3",{id:"setting-environment-variables"},"Setting environment variables"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},'# to set individual environment variables\n# valid service-names are "creator-node" or "discovery-provider"\naudius-cli set-config creator-node\naudius-cli set-config discovery-provider\n\n# to set all the required environment variables for a service, use the --required flag\naudius-cli set-config --required creator-node\naudius-cli set-config --required discovery-provider\n')),(0,a.kt)("h4",{id:"creator-node"},"Creator Node"),(0,a.kt)("p",null,"There are four required creator node environment variables, available in the creator node section ",(0,a.kt)("a",{parentName:"p",href:"/token/running-a-node/setup#creator-node"},"here"),"."),(0,a.kt)("p",null,"The full list of variables and explanations can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/AudiusProject/audius-protocol/blob/master/creator-node/src/config.js"},"here"),". Generally node operators will not need to modify any other environment variables."),(0,a.kt)("h5",{id:"external-creator-node-postgres"},"External Creator Node Postgres"),(0,a.kt)("p",null,"If you set an external Postgres url during setup you can skip this section."),(0,a.kt)("p",null,"If you did not set an external Postgres url during setup and you want to add one now, replace the db url by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"audius-cli set-config creator-node\nkey   : dbUrl\nvalue : <db url>\n")),(0,a.kt)("h4",{id:"discovery-provider"},"Discovery Provider"),(0,a.kt)("p",null,"There are two required discovery provider environment variables, available in the discovery provider section ",(0,a.kt)("a",{parentName:"p",href:"/token/running-a-node/setup#discovery-provider"},"here"),"."),(0,a.kt)("p",null,"The full list of variables and explanations can be found ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/AudiusProject/audius-protocol/blob/master/discovery-provider/default_config.ini"},"here"),". Generally node operators will not need to modify any other environment variables."),(0,a.kt)("h5",{id:"external-discovery-provider-postgres-instance"},"External Discovery Provider Postgres Instance"),(0,a.kt)("p",null,"If you set an external Postgres url during setup you can skip this section."),(0,a.kt)("p",null,"The below is only if using a externally managed Postgres (version 11.1+) database:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"audius-cli set-config discovery-provider\nkey   : audius_db_url\nvalue : <audius_db_url>\n\n# If there's no read replica, enter the primary db url for both env vars.\naudius-cli set-config discovery-provider\nkey   : audius_db_url_read_replica\nvalue : <audius_db_url_read_replica>\n")),(0,a.kt)("p",null,"In the managed postgres database and set the ",(0,a.kt)("inlineCode",{parentName:"p"},"temp_file_limit")," flag to ",(0,a.kt)("inlineCode",{parentName:"p"},"2147483647")," and run the following SQL command on the destination db."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"CREATE EXTENSION pg_trgm;\n")),(0,a.kt)("h3",{id:"launch"},"Launch"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"audius-cli launch creator-node\n\n# or\n\naudius-cli launch discovery-provider (--seed)\n\n# Options:\n# --seed\n#     Seeds the database from a snapshot. Required for first-time discovery setup.\n")),(0,a.kt)("h2",{id:"migration-from-kubernetes"},"Migration from Kubernetes"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"# Clone and install related dependencies\ngit clone https://github.com/AudiusProject/audius-docker-compose.git ~/audius-docker-compose\nbash ~/audius-docker-compose/setup.sh\n\n# Get configs from k8s-manifests and set them again via set-config\ncat ~/audius-k8s-manifests/config.yaml\naudius-cli set-config <service>\n\n# Remember to configure firewalls and load balancers to allow the service port through\n\n# Turn off Postgres on the host. If this command returns an error it's not a problem.\nsudo systemctl stop postgresql.service\n\n# Remove kube\naudius-cli auto-upgrade --remove\nkubectl delete --all-namespaces --all deployments\nkubectl delete --all-namespaces --all pods\nsudo kubeadm reset\n\n# Launch the service\naudius-cli launch <service>\n")))}c.isMDXComponent=!0}}]);