/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SearchAutocompleteResponse } from '../model';
// @ts-ignore
import { SearchFullResponse } from '../model';
/**
 * SearchApi - axios parameter creator
 * @export
 */
export const SearchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
        * @param {SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery: async ({  query, userId, kind, limit, offset, }: SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQueryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> =>  {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery', 'query', query)
            const localVarPath = `/search/autocomplete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (kind !== undefined) {
                localVarQueryParameter['kind'] = kind;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
        * @param {SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0Request} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1: async ({  query, userId, kind, limit, offset, }: SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0Request, options: AxiosRequestConfig = {}): Promise<RequestArgs> =>  {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1', 'query', query)
            const localVarPath = `/search/full`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['user_id'] = userId;
            }

            if (kind !== undefined) {
                localVarQueryParameter['kind'] = kind;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SearchApi - functional programming interface
 * @export
 */
export const SearchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SearchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} query Search query text
         * @param {string} [userId] A User ID of the requesting user to personalize the response
         * @param {'all' | 'users' | 'tracks' | 'playlists' | 'albums'} [kind] The type of response, one of: all, users, tracks, playlists, or albums
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery(query: string, userId?: string, kind?: 'all' | 'users' | 'tracks' | 'playlists' | 'albums', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchAutocompleteResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery({ query, userId, kind, limit, offset, }, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} query Search query text
         * @param {string} [userId] A User ID of the requesting user to personalize the response
         * @param {'all' | 'users' | 'tracks' | 'playlists' | 'albums'} [kind] The type of response, one of: all, users, tracks, playlists, or albums
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1(query: string, userId?: string, kind?: 'all' | 'users' | 'tracks' | 'playlists' | 'albums', limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchFullResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1({ query, userId, kind, limit, offset, }, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SearchApi - factory interface
 * @export
 */
export const SearchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SearchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} query Search query text
         * @param {string} [userId] A User ID of the requesting user to personalize the response
         * @param {'all' | 'users' | 'tracks' | 'playlists' | 'albums'} [kind] The type of response, one of: all, users, tracks, playlists, or albums
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery(query: string, userId?: string, kind?: 'all' | 'users' | 'tracks' | 'playlists' | 'albums', limit?: number, offset?: number, options?: any): AxiosPromise<SearchAutocompleteResponse> {
            return localVarFp.getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery(query, userId, kind, limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} query Search query text
         * @param {string} [userId] A User ID of the requesting user to personalize the response
         * @param {'all' | 'users' | 'tracks' | 'playlists' | 'albums'} [kind] The type of response, one of: all, users, tracks, playlists, or albums
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1(query: string, userId?: string, kind?: 'all' | 'users' | 'tracks' | 'playlists' | 'albums', limit?: number, offset?: number, options?: any): AxiosPromise<SearchFullResponse> {
            return localVarFp.getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1(query, userId, kind, limit, offset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery operation in SearchApi.
 * @export
 * @interface SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQueryRequest
 */
export interface SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQueryRequest {
    /**
     * Search query text
     * @type {string}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery
     */
    readonly query: string

    /**
     * A User ID of the requesting user to personalize the response
     * @type {string}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery
     */
    readonly userId?: string

    /**
     * The type of response, one of: all, users, tracks, playlists, or albums
     * @type {'all' | 'users' | 'tracks' | 'playlists' | 'albums'}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery
     */
    readonly kind?: 'all' | 'users' | 'tracks' | 'playlists' | 'albums'

    /**
     * Limit
     * @type {number}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery
     */
    readonly limit?: number

    /**
     * Offset
     * @type {number}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery
     */
    readonly offset?: number
}

/**
 * Request parameters for getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1 operation in SearchApi.
 * @export
 * @interface SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0Request
 */
export interface SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0Request {
    /**
     * Search query text
     * @type {string}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0
     */
    readonly query: string

    /**
     * A User ID of the requesting user to personalize the response
     * @type {string}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0
     */
    readonly userId?: string

    /**
     * The type of response, one of: all, users, tracks, playlists, or albums
     * @type {'all' | 'users' | 'tracks' | 'playlists' | 'albums'}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0
     */
    readonly kind?: 'all' | 'users' | 'tracks' | 'playlists' | 'albums'

    /**
     * Limit
     * @type {number}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0
     */
    readonly limit?: number

    /**
     * Offset
     * @type {number}
     * @memberof SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0
     */
    readonly offset?: number
}

/**
 * SearchApi - object-oriented interface
 * @export
 * @class SearchApi
 * @extends {BaseAPI}
 */
export class SearchApi extends BaseAPI {
    /**
     * 
     * @param {SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery(requestParameters: SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQueryRequest, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery(requestParameters.query, requestParameters.userId, requestParameters.kind, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0Request} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SearchApi
     */
    public getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1(requestParameters: SearchApiGetUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery0Request, options?: AxiosRequestConfig) {
        return SearchApiFp(this.configuration).getUsersTracksPlaylistsAlbumsThatBestMatchTheSearchQuery_1(requestParameters.query, requestParameters.userId, requestParameters.kind, requestParameters.limit, requestParameters.offset, options).then((request) => request(this.axios, this.basePath));
    }
}
