/* tslint:disable */
// @ts-nocheck
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FullTrackResponse,
  FullTracksResponse,
  RemixesResponseFull,
  RemixingResponse,
  StemsResponse,
  TrackFavoritesResponseFull,
  TrackRepostsResponseFull,
  TrendingIdsResponse,
} from '../models';
import {
    FullTrackResponseFromJSON,
    FullTrackResponseToJSON,
    FullTracksResponseFromJSON,
    FullTracksResponseToJSON,
    RemixesResponseFullFromJSON,
    RemixesResponseFullToJSON,
    RemixingResponseFromJSON,
    RemixingResponseToJSON,
    StemsResponseFromJSON,
    StemsResponseToJSON,
    TrackFavoritesResponseFullFromJSON,
    TrackFavoritesResponseFullToJSON,
    TrackRepostsResponseFullFromJSON,
    TrackRepostsResponseFullToJSON,
    TrendingIdsResponseFromJSON,
    TrendingIdsResponseToJSON,
} from '../models';

export interface GetBulkTracksRequest {
    userId?: string;
    permalink?: Array<string>;
    id?: Array<string>;
}

export interface GetFeelingLuckyTracksRequest {
    userId?: string;
    limit?: number;
    withUsers?: boolean;
    minFollowers?: number;
}

export interface GetMostLovedTracksRequest {
    userId?: string;
    limit?: number;
    withUsers?: boolean;
}

export interface GetPremiumTrackSignaturesRequest {
    userId: string;
    trackIds?: Array<number>;
    tokenIds?: Array<string>;
}

export interface GetRecommendedTracksRequest {
    limit?: number;
    genre?: string;
    time?: GetRecommendedTracksTimeEnum;
    exclusionList?: Array<number>;
    userId?: string;
}

export interface GetRecommendedTracksWithVersionRequest {
    version: string;
    limit?: number;
    genre?: string;
    time?: GetRecommendedTracksWithVersionTimeEnum;
    exclusionList?: Array<number>;
    userId?: string;
}

export interface GetRemixableTracksRequest {
    limit?: number;
    userId?: string;
    withUsers?: boolean;
}

export interface GetTrackRequest {
    trackId: string;
    userId?: string;
    handle?: string;
    urlTitle?: string;
    showUnlisted?: boolean;
}

export interface GetTrackRemixParentsRequest {
    trackId: string;
    offset?: number;
    limit?: number;
    userId?: string;
}

export interface GetTrackRemixesRequest {
    trackId: string;
    offset?: number;
    limit?: number;
    userId?: string;
}

export interface GetTrackStemsRequest {
    trackId: string;
}

export interface GetTrendingTrackIDsRequest {
    genre?: string;
}

export interface GetTrendingTracksRequest {
    offset?: number;
    limit?: number;
    userId?: string;
    genre?: string;
    time?: GetTrendingTracksTimeEnum;
}

export interface GetTrendingTracksIDsWithVersionRequest {
    version: string;
    genre?: string;
}

export interface GetTrendingTracksWithVersionRequest {
    version: string;
    offset?: number;
    limit?: number;
    userId?: string;
    genre?: string;
    time?: GetTrendingTracksWithVersionTimeEnum;
}

export interface GetUnderTheRadarTracksRequest {
    offset?: number;
    limit?: number;
    userId?: string;
    filter?: GetUnderTheRadarTracksFilterEnum;
    tracksOnly?: boolean;
    withUsers?: boolean;
}

export interface GetUndergroundTrendingTracksRequest {
    offset?: number;
    limit?: number;
    userId?: string;
}

export interface GetUndergroundTrendingTracksWithVersionRequest {
    version: string;
    offset?: number;
    limit?: number;
    userId?: string;
}

export interface GetUsersFromFavoritesRequest {
    trackId: string;
    offset?: number;
    limit?: number;
    userId?: string;
}

export interface GetUsersFromRepostsRequest {
    trackId: string;
    offset?: number;
    limit?: number;
    userId?: string;
}

/**
 * 
 */
export class TracksApi extends runtime.BaseAPI {

    /** @hidden
     * Gets the tracks found on the \"Best New Releases\" smart playlist
     */
    async bestNewReleasesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/best_new_releases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the tracks found on the \"Best New Releases\" smart playlist
     */
    async bestNewReleases(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.bestNewReleasesRaw(initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets a list of tracks using their IDs or permalinks
     */
    async getBulkTracksRaw(requestParameters: GetBulkTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTrackResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.permalink) {
            queryParameters['permalink'] = requestParameters.permalink;
        }

        if (requestParameters.id) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTrackResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of tracks using their IDs or permalinks
     */
    async getBulkTracks(requestParameters: GetBulkTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTrackResponse> {
        const response = await this.getBulkTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets random tracks found on the \"Feeling Lucky\" smart playlist
     */
    async getFeelingLuckyTracksRaw(requestParameters: GetFeelingLuckyTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        if (requestParameters.minFollowers !== undefined) {
            queryParameters['min_followers'] = requestParameters.minFollowers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/feeling_lucky`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets random tracks found on the \"Feeling Lucky\" smart playlist
     */
    async getFeelingLuckyTracks(requestParameters: GetFeelingLuckyTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getFeelingLuckyTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the tracks found on the \"Most Loved\" smart playlist
     */
    async getMostLovedTracksRaw(requestParameters: GetMostLovedTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/most_loved`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the tracks found on the \"Most Loved\" smart playlist
     */
    async getMostLovedTracks(requestParameters: GetMostLovedTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getMostLovedTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets premium track signatures for passed in premium track ids
     */
    async getPremiumTrackSignaturesRaw(requestParameters: GetPremiumTrackSignaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getPremiumTrackSignatures.');
        }

        const queryParameters: any = {};

        if (requestParameters.trackIds) {
            queryParameters['track_ids'] = requestParameters.trackIds;
        }

        if (requestParameters.tokenIds) {
            queryParameters['token_ids'] = requestParameters.tokenIds;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{user_id}/nft-gated-signatures`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Gets premium track signatures for passed in premium track ids
     */
    async getPremiumTrackSignatures(requestParameters: GetPremiumTrackSignaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getPremiumTrackSignaturesRaw(requestParameters, initOverrides);
    }

    /** @hidden
     * Get recommended tracks
     */
    async getRecommendedTracksRaw(requestParameters: GetRecommendedTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.exclusionList) {
            queryParameters['exclusion_list'] = requestParameters.exclusionList;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/recommended`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Get recommended tracks
     */
    async getRecommendedTracks(requestParameters: GetRecommendedTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getRecommendedTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Get recommended tracks using the given trending strategy version
     */
    async getRecommendedTracksWithVersionRaw(requestParameters: GetRecommendedTracksWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getRecommendedTracksWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        if (requestParameters.exclusionList) {
            queryParameters['exclusion_list'] = requestParameters.exclusionList;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/recommended/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Get recommended tracks using the given trending strategy version
     */
    async getRecommendedTracksWithVersion(requestParameters: GetRecommendedTracksWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getRecommendedTracksWithVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets a list of tracks that have stems available for remixing
     */
    async getRemixableTracksRaw(requestParameters: GetRemixableTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTrackResponse>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/remixables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTrackResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of tracks that have stems available for remixing
     */
    async getRemixableTracks(requestParameters: GetRemixableTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTrackResponse> {
        const response = await this.getRemixableTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets a track by ID. If `show_unlisted` is true, then `handle` and `url_title` are required.
     */
    async getTrackRaw(requestParameters: GetTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTrackResponse>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrack.');
        }

        const queryParameters: any = {};

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.handle !== undefined) {
            queryParameters['handle'] = requestParameters.handle;
        }

        if (requestParameters.urlTitle !== undefined) {
            queryParameters['url_title'] = requestParameters.urlTitle;
        }

        if (requestParameters.showUnlisted !== undefined) {
            queryParameters['show_unlisted'] = requestParameters.showUnlisted;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{track_id}`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTrackResponseFromJSON(jsonValue));
    }

    /**
     * Gets a track by ID. If `show_unlisted` is true, then `handle` and `url_title` are required.
     */
    async getTrack(requestParameters: GetTrackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTrackResponse> {
        const response = await this.getTrackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets all the tracks that the given track remixes
     */
    async getTrackRemixParentsRaw(requestParameters: GetTrackRemixParentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemixingResponse>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrackRemixParents.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{track_id}/remixing`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemixingResponseFromJSON(jsonValue));
    }

    /**
     * Gets all the tracks that the given track remixes
     */
    async getTrackRemixParents(requestParameters: GetTrackRemixParentsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemixingResponse> {
        const response = await this.getTrackRemixParentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Get all tracks that remix the given track
     */
    async getTrackRemixesRaw(requestParameters: GetTrackRemixesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RemixesResponseFull>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrackRemixes.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{track_id}/remixes`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RemixesResponseFullFromJSON(jsonValue));
    }

    /**
     * Get all tracks that remix the given track
     */
    async getTrackRemixes(requestParameters: GetTrackRemixesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RemixesResponseFull> {
        const response = await this.getTrackRemixesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Get the remixable stems of a track
     */
    async getTrackStemsRaw(requestParameters: GetTrackStemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StemsResponse>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getTrackStems.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{track_id}/stems`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StemsResponseFromJSON(jsonValue));
    }

    /**
     * Get the remixable stems of a track
     */
    async getTrackStems(requestParameters: GetTrackStemsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StemsResponse> {
        const response = await this.getTrackStemsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the track IDs of the top trending tracks on Audius
     */
    async getTrendingTrackIDsRaw(requestParameters: GetTrendingTrackIDsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrendingIdsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/trending/ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendingIdsResponseFromJSON(jsonValue));
    }

    /**
     * Gets the track IDs of the top trending tracks on Audius
     */
    async getTrendingTrackIDs(requestParameters: GetTrendingTrackIDsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrendingIdsResponse> {
        const response = await this.getTrendingTrackIDsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the top 100 trending (most popular) tracks on Audius
     */
    async getTrendingTracksRaw(requestParameters: GetTrendingTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/trending`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the top 100 trending (most popular) tracks on Audius
     */
    async getTrendingTracks(requestParameters: GetTrendingTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getTrendingTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the track IDs of the top trending tracks on Audius based on the given trending strategy version
     */
    async getTrendingTracksIDsWithVersionRaw(requestParameters: GetTrendingTracksIDsWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrendingIdsResponse>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getTrendingTracksIDsWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/trending/ids/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrendingIdsResponseFromJSON(jsonValue));
    }

    /**
     * Gets the track IDs of the top trending tracks on Audius based on the given trending strategy version
     */
    async getTrendingTracksIDsWithVersion(requestParameters: GetTrendingTracksIDsWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrendingIdsResponse> {
        const response = await this.getTrendingTracksIDsWithVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the top 100 trending (most popular tracks on Audius using a given trending strategy version
     */
    async getTrendingTracksWithVersionRaw(requestParameters: GetTrendingTracksWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getTrendingTracksWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.genre !== undefined) {
            queryParameters['genre'] = requestParameters.genre;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/trending/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the top 100 trending (most popular tracks on Audius using a given trending strategy version
     */
    async getTrendingTracksWithVersion(requestParameters: GetTrendingTracksWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getTrendingTracksWithVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the tracks found on the \"Under the Radar\" smart playlist
     */
    async getUnderTheRadarTracksRaw(requestParameters: GetUnderTheRadarTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        if (requestParameters.filter !== undefined) {
            queryParameters['filter'] = requestParameters.filter;
        }

        if (requestParameters.tracksOnly !== undefined) {
            queryParameters['tracks_only'] = requestParameters.tracksOnly;
        }

        if (requestParameters.withUsers !== undefined) {
            queryParameters['with_users'] = requestParameters.withUsers;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/under_the_radar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the tracks found on the \"Under the Radar\" smart playlist
     */
    async getUnderTheRadarTracks(requestParameters: GetUnderTheRadarTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getUnderTheRadarTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the top 100 trending underground tracks on Audius
     */
    async getUndergroundTrendingTracksRaw(requestParameters: GetUndergroundTrendingTracksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/trending/underground`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the top 100 trending underground tracks on Audius
     */
    async getUndergroundTrendingTracks(requestParameters: GetUndergroundTrendingTracksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getUndergroundTrendingTracksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Gets the top 100 trending underground tracks on Audius using a given trending strategy version
     */
    async getUndergroundTrendingTracksWithVersionRaw(requestParameters: GetUndergroundTrendingTracksWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FullTracksResponse>> {
        if (requestParameters.version === null || requestParameters.version === undefined) {
            throw new runtime.RequiredError('version','Required parameter requestParameters.version was null or undefined when calling getUndergroundTrendingTracksWithVersion.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/trending/underground/{version}`.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters.version))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FullTracksResponseFromJSON(jsonValue));
    }

    /**
     * Gets the top 100 trending underground tracks on Audius using a given trending strategy version
     */
    async getUndergroundTrendingTracksWithVersion(requestParameters: GetUndergroundTrendingTracksWithVersionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FullTracksResponse> {
        const response = await this.getUndergroundTrendingTracksWithVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Get users that favorited a track
     */
    async getUsersFromFavoritesRaw(requestParameters: GetUsersFromFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackFavoritesResponseFull>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getUsersFromFavorites.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{track_id}/favorites`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackFavoritesResponseFullFromJSON(jsonValue));
    }

    /**
     * Get users that favorited a track
     */
    async getUsersFromFavorites(requestParameters: GetUsersFromFavoritesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackFavoritesResponseFull> {
        const response = await this.getUsersFromFavoritesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /** @hidden
     * Get the users that reposted a track
     */
    async getUsersFromRepostsRaw(requestParameters: GetUsersFromRepostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackRepostsResponseFull>> {
        if (requestParameters.trackId === null || requestParameters.trackId === undefined) {
            throw new runtime.RequiredError('trackId','Required parameter requestParameters.trackId was null or undefined when calling getUsersFromReposts.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.userId !== undefined) {
            queryParameters['user_id'] = requestParameters.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tracks/{track_id}/reposts`.replace(`{${"track_id"}}`, encodeURIComponent(String(requestParameters.trackId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackRepostsResponseFullFromJSON(jsonValue));
    }

    /**
     * Get the users that reposted a track
     */
    async getUsersFromReposts(requestParameters: GetUsersFromRepostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackRepostsResponseFull> {
        const response = await this.getUsersFromRepostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetRecommendedTracksTimeEnum = {
    Week: 'week',
    Month: 'month',
    Year: 'year',
    AllTime: 'allTime'
} as const;
export type GetRecommendedTracksTimeEnum = typeof GetRecommendedTracksTimeEnum[keyof typeof GetRecommendedTracksTimeEnum];
/**
 * @export
 */
export const GetRecommendedTracksWithVersionTimeEnum = {
    Week: 'week',
    Month: 'month',
    Year: 'year',
    AllTime: 'allTime'
} as const;
export type GetRecommendedTracksWithVersionTimeEnum = typeof GetRecommendedTracksWithVersionTimeEnum[keyof typeof GetRecommendedTracksWithVersionTimeEnum];
/**
 * @export
 */
export const GetTrendingTracksTimeEnum = {
    Week: 'week',
    Month: 'month',
    Year: 'year',
    AllTime: 'allTime'
} as const;
export type GetTrendingTracksTimeEnum = typeof GetTrendingTracksTimeEnum[keyof typeof GetTrendingTracksTimeEnum];
/**
 * @export
 */
export const GetTrendingTracksWithVersionTimeEnum = {
    Week: 'week',
    Month: 'month',
    Year: 'year',
    AllTime: 'allTime'
} as const;
export type GetTrendingTracksWithVersionTimeEnum = typeof GetTrendingTracksWithVersionTimeEnum[keyof typeof GetTrendingTracksWithVersionTimeEnum];
/**
 * @export
 */
export const GetUnderTheRadarTracksFilterEnum = {
    All: 'all',
    Repost: 'repost',
    Original: 'original'
} as const;
export type GetUnderTheRadarTracksFilterEnum = typeof GetUnderTheRadarTracksFilterEnum[keyof typeof GetUnderTheRadarTracksFilterEnum];
