/* tslint:disable */
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TransactionHistoryCountResponse,
  TransactionHistoryResponse,
} from '../models';
import {
    TransactionHistoryCountResponseFromJSON,
    TransactionHistoryCountResponseToJSON,
    TransactionHistoryResponseFromJSON,
    TransactionHistoryResponseToJSON,
} from '../models';

export interface GetAudioTransactionHistoryRequest {
    encodedDataMessage: string;
    encodedDataSignature: string;
    offset?: number;
    limit?: number;
    sortMethod?: GetAudioTransactionHistorySortMethodEnum;
    sortDirection?: GetAudioTransactionHistorySortDirectionEnum;
}

export interface GetAudioTransactionHistoryCountRequest {
    encodedDataMessage: string;
    encodedDataSignature: string;
}

/**
 * 
 */
export class TransactionsApi extends runtime.BaseAPI {

    /**
     * Gets the user\'s $AUDIO transaction history within the App
     */
    async getAudioTransactionHistoryRaw(requestParameters: GetAudioTransactionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionHistoryResponse>> {
        if (requestParameters.encodedDataMessage === null || requestParameters.encodedDataMessage === undefined) {
            throw new runtime.RequiredError('encodedDataMessage','Required parameter requestParameters.encodedDataMessage was null or undefined when calling getAudioTransactionHistory.');
        }

        if (requestParameters.encodedDataSignature === null || requestParameters.encodedDataSignature === undefined) {
            throw new runtime.RequiredError('encodedDataSignature','Required parameter requestParameters.encodedDataSignature was null or undefined when calling getAudioTransactionHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.sortMethod !== undefined) {
            queryParameters['sort_method'] = requestParameters.sortMethod;
        }

        if (requestParameters.sortDirection !== undefined) {
            queryParameters['sort_direction'] = requestParameters.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.encodedDataMessage !== undefined && requestParameters.encodedDataMessage !== null) {
            headerParameters['Encoded-Data-Message'] = String(requestParameters.encodedDataMessage);
        }

        if (requestParameters.encodedDataSignature !== undefined && requestParameters.encodedDataSignature !== null) {
            headerParameters['Encoded-Data-Signature'] = String(requestParameters.encodedDataSignature);
        }

        const response = await this.request({
            path: `/transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionHistoryResponseFromJSON(jsonValue));
    }

    /**
     * Gets the user\'s $AUDIO transaction history within the App
     */
    async getAudioTransactionHistory(requestParameters: GetAudioTransactionHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionHistoryResponse> {
        const response = await this.getAudioTransactionHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Gets the count of the user\'s $AUDIO transaction history within the App
     */
    async getAudioTransactionHistoryCountRaw(requestParameters: GetAudioTransactionHistoryCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionHistoryCountResponse>> {
        if (requestParameters.encodedDataMessage === null || requestParameters.encodedDataMessage === undefined) {
            throw new runtime.RequiredError('encodedDataMessage','Required parameter requestParameters.encodedDataMessage was null or undefined when calling getAudioTransactionHistoryCount.');
        }

        if (requestParameters.encodedDataSignature === null || requestParameters.encodedDataSignature === undefined) {
            throw new runtime.RequiredError('encodedDataSignature','Required parameter requestParameters.encodedDataSignature was null or undefined when calling getAudioTransactionHistoryCount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.encodedDataMessage !== undefined && requestParameters.encodedDataMessage !== null) {
            headerParameters['Encoded-Data-Message'] = String(requestParameters.encodedDataMessage);
        }

        if (requestParameters.encodedDataSignature !== undefined && requestParameters.encodedDataSignature !== null) {
            headerParameters['Encoded-Data-Signature'] = String(requestParameters.encodedDataSignature);
        }

        const response = await this.request({
            path: `/transactions/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionHistoryCountResponseFromJSON(jsonValue));
    }

    /**
     * Gets the count of the user\'s $AUDIO transaction history within the App
     */
    async getAudioTransactionHistoryCount(requestParameters: GetAudioTransactionHistoryCountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionHistoryCountResponse> {
        const response = await this.getAudioTransactionHistoryCountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetAudioTransactionHistorySortMethodEnum = {
    Date: 'date',
    TransactionType: 'transaction_type'
} as const;
export type GetAudioTransactionHistorySortMethodEnum = typeof GetAudioTransactionHistorySortMethodEnum[keyof typeof GetAudioTransactionHistorySortMethodEnum];
/**
 * @export
 */
export const GetAudioTransactionHistorySortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetAudioTransactionHistorySortDirectionEnum = typeof GetAudioTransactionHistorySortDirectionEnum[keyof typeof GetAudioTransactionHistorySortDirectionEnum];
