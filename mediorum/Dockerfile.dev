FROM golang:alpine3.18

# RUN apk add build-base make cmake ffmpeg fftw-dev libsndfile-dev git curl

# Essentia dependencies
# RUN apk add eigen-dev yaml-dev ffmpeg-dev libsamplerate-dev taglib-dev pkgconfig zlib-dev chromaprint-dev

RUN apk add \
    build-base \
    make \
    cmake \
    fftw-dev \
    libsndfile-dev \
    git \
    curl \
    eigen-dev \
    yaml-dev \
    libsamplerate-dev \
    taglib-dev \
    pkgconfig \
    zlib-dev \
    chromaprint-dev \
    nasm \
    yasm \
    libogg-dev \
    libvorbis-dev \
    libvpx-dev \
    x264-dev \
    x265-dev \
    bash \
    openssl-dev \
    bzip2-dev \
    musl-dev \
    libffi-dev \
    lame-dev \
    gcc

# Install ffmpeg and python from source because essentia is not compatible with the default versions on alpine3.18

# Download and build FFmpeg 4.4
ARG FFMPEG_VERSION=4.4
RUN cd /tmp && \
    wget https://ffmpeg.org/releases/ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    tar -xvjf ffmpeg-$FFMPEG_VERSION.tar.bz2 && \
    cd ffmpeg-$FFMPEG_VERSION && \
    ./configure --prefix=/usr/local --enable-shared --enable-libx264 --enable-gpl --enable-libmp3lame --enable-avresample && \
    make -j$(nproc) && \
    make install && \
    cd .. && \
    rm -rf ffmpeg-$FFMPEG_VERSION

# Install Python 3.9 from pyenv
RUN apk add python3 py3-pip py3-virtualenv bash && \
    apk add --virtual .build-deps gcc musl-dev libffi-dev openssl-dev bzip2-dev zlib-dev && \
    cd /tmp && \
    curl -OL https://www.python.org/ftp/python/3.9.12/Python-3.9.12.tgz && \
    tar -xzf Python-3.9.12.tgz && \
    cd Python-3.9.12 && \
    ./configure --enable-optimizations && \
    make altinstall && \
    cd .. && \
    rm -rf Python-3.9.12 && \
    apk del .build-deps

# Create and activate a virtual environment
RUN python3.9 -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

RUN pip install --upgrade pip
RUN pip install 'web3==6.6.1'
RUN pip install ipython numpy matplotlib pyyaml

WORKDIR /app

# Build and install libkeyfinder
RUN git clone https://github.com/mixxxdj/libKeyFinder.git /libKeyFinder
WORKDIR /libKeyFinder
RUN cmake -DCMAKE_INSTALL_PREFIX=/usr/local -DBUILD_TESTING=OFF -S . -B build && \
    cmake --build build --parallel $(nproc) && \
    cmake --install build

# Clone and build Essentia
ENV PKG_CONFIG_PATH="/usr/local/lib/pkgconfig:/usr/lib/pkgconfig"
ENV LD_LIBRARY_PATH="/usr/local/lib:/usr/lib"
RUN git clone https://github.com/MTG/essentia.git /essentia
WORKDIR /essentia
RUN git checkout v2.1_beta5 && \
    python3 waf configure --build-static --with-example=streaming_extractor_freesound --no-msse --pkg-config-path=$PKG_CONFIG_PATH && \
    python3 waf && \
    python3 waf install

WORKDIR /app
ENV CGO_ENABLED=0

RUN go install github.com/cosmtrek/air@v1.52.1

COPY go.mod go.sum ./
RUN go mod graph | awk '{if ($1 !~ "@") print $2}' | xargs go get

COPY . .

# Compile the keyfinder C++ executable
RUN g++ -o /bin/analyze-key cpp/keyfinder.cpp -I/usr/local/include -L/usr/local/lib -lkeyfinder -lsndfile && \
    chmod +x /bin/analyze-key

RUN go build
RUN go build -o mediorum-cmd cmd/main.go

VOLUME ["/mediorum_data"]
EXPOSE 1991
ENTRYPOINT ["air"]
