/*
* This file was generated by a tool.
* Rerun sql-ts to regenerate this file.
*/
export interface AudiusUsersEntity {
  'blockchainId': string;
  'clock': number;
  'cnodeUserUUID': string;
  'coverArtFileUUID'?: string | null;
  'createdAt': Date;
  'metadataFileUUID'?: string | null;
  'metadataJSON': any;
  'profilePicFileUUID'?: string | null;
  'updatedAt': Date;
}
export interface blobsEntity {
  'created_at'?: Date | null;
  'host': string;
  'key': string;
}
export interface cid_cursorEntity {
  'host': string;
  'updated_at': Date;
}
export interface cid_logEntity {
  'is_deleted'?: boolean | null;
  'multihash': string;
  'updated_at': Date;
}
export interface cid_lookupEntity {
  'host'?: string | null;
  'multihash'?: string | null;
}
export interface ClockRecordsEntity {
  'clock': number;
  'cnodeUserUUID': string;
  'createdAt': Date;
  'sourceTable': enum_ClockRecords_sourceTable;
  'updatedAt': Date;
}
export interface CNodeUsersEntity {
  'clock': number;
  'cnodeUserUUID': string;
  'createdAt': Date;
  'lastLogin'?: Date | null;
  'latestBlockNumber'?: number;
  'updatedAt': Date;
  'walletPublicKey': string;
}
export interface ContentBlacklistsEntity {
  'createdAt': Date;
  'id'?: number;
  'type': enum_ContentBlacklists_type;
  'updatedAt': Date;
  'value': string;
}
export interface cursorsEntity {
  'host': string;
  'last_ulid'?: string | null;
}
export interface delist_status_cursorEntity {
  'created_at': Date;
  'entity': delist_entity;
  'host'?: string | null;
}
export interface FilesEntity {
  'clock': number;
  'cnodeUserUUID'?: string | null;
  'createdAt': Date;
  'dirMultihash'?: string | null;
  'fileName'?: string | null;
  'fileUUID': string;
  'multihash': string;
  'skipped'?: boolean;
  'sourceFile'?: string | null;
  'storagePath': string;
  'trackBlockchainId'?: number | null;
  'type'?: string | null;
  'updatedAt': Date;
}
export interface log_linesEntity {
  'created_at'?: Date | null;
  'host': string;
  'id': string;
  'message'?: string | null;
}
export interface mediorum_migrationsEntity {
  'hash': string;
  'ts'?: Date | null;
}
export interface opsEntity {
  'action': string;
  'data'?: Object | null;
  'host': string;
  'table': string;
  'ulid': string;
}
export interface PlaylistsEntity {
  'blockchainId': string;
  'clock': number;
  'cnodeUserUUID': string;
  'createdAt': Date;
  'metadataFileUUID': string;
  'metadataJSON': any;
  'playlistImageFileUUID'?: string | null;
  'updatedAt': Date;
}
export interface SequelizeMetaEntity {
  'name': string;
}
export interface SessionTokensEntity {
  'cnodeUserUUID': string;
  'createdAt': Date;
  'id'?: number;
  'lastUsed'?: Date | null;
  'token': string;
  'updatedAt': Date;
}
export interface track_delist_statusesEntity {
  'createdAt': Date;
  'delisted': boolean;
  'ownerId': number;
  'reason': delist_track_reason;
  'trackCid': string;
  'trackId': number;
}
export interface TracksEntity {
  'blockchainId': string;
  'clock': number;
  'cnodeUserUUID': string;
  'coverArtFileUUID'?: string | null;
  'createdAt': Date;
  'metadataFileUUID'?: string | null;
  'metadataJSON': any;
  'updatedAt': Date;
}
export interface uploadsEntity {
  'created_at'?: Date | null;
  'created_by'?: string | null;
  'error'?: string | null;
  'error_count'?: string | null;
  'ff_probe'?: string | null;
  'id': string;
  'mirrors'?: string | null;
  'orig_file_cid'?: string | null;
  'orig_file_name'?: string | null;
  'selected_preview'?: string | null;
  'status'?: string | null;
  'template'?: string | null;
  'transcode_progress'?: string | null;
  'transcode_results'?: string | null;
  'transcoded_at'?: Date | null;
  'transcoded_by'?: string | null;
  'transcoded_mirrors'?: string | null;
  'updated_at'?: Date | null;
  'user_wallet'?: string | null;
}
export interface user_delist_statusesEntity {
  'createdAt': Date;
  'delisted': boolean;
  'reason': delist_user_reason;
  'userId': number;
}
export enum enum_ContentBlacklists_type {
  'TRACK' = 'TRACK',
  'USER' = 'USER',
  'CID' = 'CID',
}
export enum enum_ClockRecords_sourceTable {
  'AudiusUser' = 'AudiusUser',
  'Track' = 'Track',
  'File' = 'File',
  'Playlist' = 'Playlist',
}
export enum delist_user_reason {
  'STRIKE_THRESHOLD' = 'STRIKE_THRESHOLD',
  'COPYRIGHT_SCHOOL' = 'COPYRIGHT_SCHOOL',
  'MANUAL' = 'MANUAL',
}
export enum delist_track_reason {
  'DMCA' = 'DMCA',
  'ACR' = 'ACR',
  'MANUAL' = 'MANUAL',
}
export enum delist_entity {
  'tracks' = 'tracks',
  'users' = 'users',
}
