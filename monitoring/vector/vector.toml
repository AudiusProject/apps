[api]
  enabled = true
  address = "0.0.0.0:8686"

[sources.logs]
  type = "docker_logs"
  docker_host = "/var/run/docker.sock"
  include_containers = [
    "server",
    "indexer",
    "redis",
    "comms",
    "notifications",
    "chain",
    "mediorum",
    "relay",
    "solana-relay",
    "core",
    "audiusd"
  ]
  exclude_containers = [
    # System containers
    "vector",
    "logspout",
    "autoheal",
    "exporter",  # Exclude all containers beginning with exporter
    "postgres", # Temporary to stop spam from one SP. TODO: Move back to include_containers
  ]

[sources.auto_upgrade]
  type = "file"
  include = ["/auto-upgrade.log"]
  ignore_checkpoints = true

[transforms.parse]
  type = "remap"
  inputs = ["logs"]
  source = '''
    container_name = .container_name

    # Expand out log messages to the root if
    # they are all contained in .message or .log
    if exists(.message) {
      . = parse_json(string!(.message)) ?? .message
    }
    if exists(.log) {
      . = parse_json(string!(.log)) ?? .log
    }

    # If there are no message, log or msg fields, pull the whole string into message
    # this is used to capture logs from things like the nethermind container on discovery.
    # Otherwise, delete the message or log field because we've extracted them already.
    if !exists(.message) && !exists(.log) && !exists(.msg) {
      .message = .
    } else {
      del(.message)
      del(.log)
    }

    .node = "$node"
    .container_name = container_name

    del(.otelServiceName)
    del(.otelSpanID)
    del(.otelTraceID)
  '''

[transforms.parse_auto_upgrade]
  type = "remap"
  inputs = ["auto_upgrade"]
  source = '''
    .node = "$node"
  '''

[transforms.filter_log_levels]
  type = "filter"
  inputs = ["parse"]
  condition = '''
    match_any(string!(.level), [r'INFO', r'WARN', r'ERROR'])
  '''

[transforms.throttle]
  type = "throttle"
  inputs = ["filter_log_levels", "parse_auto_upgrade"]
  # throttle ~3mm logs per node per 24 hour period (2000 * 60 * 24)
  # 3mm is at the upper range of average node log volume at this current time
  key_field = "node"
  threshold = 2000
  window_secs = 60

# Enable for debugging purposes
# [sinks.out]
#   inputs = [ "parse" ]
#   type = "console"
#   encoding.codec = "json"

[sinks.axiom]
  inputs = [ "parse", "parse_auto_upgrade" ]
  type = "axiom"
  token = "$audius_axiom_token"
  dataset = "$audius_axiom_dataset"
  org_id = "audius-Lu52"
