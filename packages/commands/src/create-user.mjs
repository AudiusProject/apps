import { randomBytes } from 'crypto'
import { UserAuth } from '@audius/sdk'
import fs from 'fs'

import chalk from 'chalk'
import { program } from 'commander'

import {
  getCurrentAudiusSdkUser,
  initializeAudiusLibs,
  initializeAudiusSdk
} from './utils.mjs'

program
  .command('create-user')
  .description('Create a new user')
  .argument(
    '[handle]',
    'The handle for the new user (chosen randomly if not specified)'
  )
  .option(
    '-p, --password <password>',
    'The password for the new user',
    'password'
  )
  .option(
    '-e, --email <email>',
    'The email for the new user (chosen randomly if not specified)'
  )
  .option('-v, --verified', 'Include this flag to create a verified user')
  .option(
    '-o, --output <path>',
    'A path to which to write a json file containing the user data'
  )
  .action(async (handle, { password, email, verified, output }) => {
    const audiusLibs = await initializeAudiusLibs()
    const audiusSdk = await initializeAudiusSdk()

    const rand = randomBytes(2).toString('hex').padStart(4, '0').toUpperCase()

    email = email || `audius-cmd+${handle || rand}@audius.co`

    try {
      const auth = audiusSdk.services.auth
      // Create identity service user
      await auth.signUp({ email, password })

      const metadata = {
        bio: `account generated by audius-cmd ${rand}`,
        // profilePictureFile,
        //coverArtFile,
        handle: handle || `handle${rand}`,
        // is_verified: verified,
        location: `location${rand}`,
        name: `name ${rand}`,
        wallet: await auth.getAddress()
      }

      // TODO: profilePictureFile and coverArtFile?
      const response = await audiusSdk.users.createUser({ metadata })

      const entropy = audiusLibs.localStorage.getItem('hedgehog-entropy-key')

      console.log(chalk.green('Successfully created user!'))
      console.log(chalk.yellow.bold('Handle:   '), metadata.handle)
      console.log(chalk.yellow.bold('User ID:  '), response.userId)
      console.log(chalk.yellow.bold('Email:    '), email)
      console.log(chalk.yellow.bold('Password: '), password)
      console.log(chalk.yellow.bold('Entropy:  '), entropy)
      console.log(chalk.yellow.bold('Wallet:   '), metadata.wallet)

      audiusLibs.localStorage.setItem(`handle-${metadata.handle}`, entropy)

      if (output) {
        fs.writeFileSync(
          output,
          JSON.stringify(
            {
              handle: metadata.handle,
              name: metadata.name,
              userId: response.userId,
              email,
              password,
              entropy
            },
            null,
            2
          )
        )
      }
    } catch (err) {
      program.error(err.message)
    }
    process.exit(0)
  })
