import { randomBytes } from 'crypto'

import chalk from 'chalk'
import { Command } from '@commander-js/extra-typings'

import { getHedgehog, initializeAudiusSdk } from '../utils.js'
import { LocalStorage } from 'node-localstorage'
import { encodeHashId } from '@audius/sdk'
const localStorage = new LocalStorage('./local-storage')

export const createUserCommand = new Command('create')
  .description('Create a new user')
  .argument(
    '[handle]',
    'The handle for the new user (chosen randomly if not specified)'
  )
  .option(
    '-p, --password <password>',
    'The password for the new user',
    'password'
  )
  .option(
    '-e, --email <email>',
    'The email for the new user (chosen randomly if not specified)'
  )
  .action(async (handle, { password, email }) => {
    const audiusSdk = await initializeAudiusSdk()

    const rand = randomBytes(2).toString('hex').padStart(4, '0').toUpperCase()

    email = email || `audius-cmd+${handle || rand}@audius.co`

    const hedgehog = getHedgehog()
    // Create identity service user
    const res = await hedgehog.signUp({ username: email, password })

    const metadata = {
      bio: `account generated by audius-cmd ${rand}`,
      handle: handle || `handle${rand}`,
      location: `location${rand}`,
      name: `name ${rand}`,
      wallet: res.getAddressString()
    }

    const {
      metadata: { userId }
    } = await audiusSdk.users.createUser({ metadata })

    const entropy = localStorage.getItem('hedgehog-entropy-key')

    console.log(chalk.green('Successfully created user!'))
    console.log(chalk.yellow.bold('Handle:   '), metadata.handle)
    console.log(chalk.yellow.bold('User ID:  '), encodeHashId(userId))
    console.log(chalk.yellow.bold('Email:    '), email)
    console.log(chalk.yellow.bold('Password: '), password)
    console.log(chalk.yellow.bold('Entropy:  '), entropy)
    console.log(chalk.yellow.bold('Wallet:   '), metadata.wallet)

    localStorage.setItem(`handle-${metadata.handle}`, entropy!)
  })
