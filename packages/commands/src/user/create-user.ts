import { randomBytes } from 'crypto'

import chalk from 'chalk'
import { Command, Option } from '@commander-js/extra-typings'

import { getHedgehog, initializeAudiusSdk, parseBoolean } from '../utils.js'
import { LocalStorage } from 'node-localstorage'
import { encodeHashId } from '@audius/sdk'
import { outputFormatOption } from '../common-options.js'
const localStorage = new LocalStorage('./local-storage')

export const createUserCommand = new Command('create')
  .description('Create a new user')
  .argument(
    '[handle]',
    'The handle for the new user (chosen randomly if not specified)'
  )
  .option(
    '-p, --password <password>',
    'The password for the new user',
    'password'
  )
  .option(
    '-e, --email <email>',
    'The email for the new user (chosen randomly if not specified)'
  )
  .option(
    '-ai, --allow-ai-attribution [isAllowed]',
    "Whether to allow other users to attribute AI tracks using this user's likeness",
    parseBoolean
  )
  .addOption(outputFormatOption)
  .action(async (handle, options) => {
    const audiusSdk = await initializeAudiusSdk()

    const rand = randomBytes(2).toString('hex').padStart(4, '0').toUpperCase()

    const {
      email = `audius-cmd+${handle || rand}@audius.co`,
      password = 'password',
      allowAiAttribution
    } = options

    const hedgehog = getHedgehog()
    // Create identity service user
    const res = await hedgehog.signUp({ username: email, password })

    const { metadata: newMetadata } = await audiusSdk.users.createUser({
      metadata: {
        allowAiAttribution,
        bio: `account generated by audius-cmd ${rand}`,
        handle: handle || `handle${rand}`,
        location: `location${rand}`,
        name: `name ${rand}`,
        wallet: res.getAddressString()
      }
    })
    const { userId } = newMetadata

    const entropy = localStorage.getItem('hedgehog-entropy-key')

    // Ping identity with a signature to set the handle/blockchainUserId
    const message = `audius-cmd ping`
    const signature = await audiusSdk.services.audiusWalletClient.signMessage({
      message
    })
    await fetch('http://audius-protocol-identity-service-1/user/email', {
      headers: {
        ['Encoded-Data-Message']: message,
        ['Encoded-Data-Signature']: signature
      }
    })

    if (options.output === 'json') {
      console.log(JSON.stringify(newMetadata))
    } else {
      console.log(chalk.green('Successfully created user!'))
      console.log(chalk.yellow.bold('Handle:   '), newMetadata.handle)
      console.log(chalk.yellow.bold('User ID:  '), encodeHashId(userId))
      console.log(chalk.yellow.bold('User ID #:'), userId)
      console.log(chalk.yellow.bold('Email:    '), email)
      console.log(chalk.yellow.bold('Password: '), password)
      console.log(chalk.yellow.bold('Entropy:  '), entropy)
      console.log(chalk.yellow.bold('Wallet:   '), newMetadata.wallet)
    }

    localStorage.setItem(`handle-${newMetadata.handle}`, entropy!)
  })
