const glob = require('glob')
const fs = require('fs')

var getDirectories = function (callback) {
  glob('./mobile/src/**/*', callback)
}

const DIRECTORY = 'models'
const EXPORTS = [
  'Name',
  'ShareSource',
  'RepostSource',
  'FavoriteSource',
  'FollowSource',
  'CreatePlaylistSource',
  'PlaybackSource',
  'ModalSource',
  'ChallengeName',
  'FailureReason',
  'Chain',
  'Client',
  'CollectibleMediaType',
  'Variant',
  'DogEarType',
  'DownloadQuality',
  'ErrorLevel',
  'FavoriteType',
  'FeedFilter',
  'PlayableType',
  'DefaultSizes',
  'SquareSizes',
  'WidthSizes',
  'Kind',
  'OS',
  'MobileOS',
  'PurchaseMethod',
  'PurchaseVendor',
  'SmartCollectionVariant',
  'Status',
  'statusIsNotFinalized',
  'combineStatuses',
  'StemCategory',
  'stemCategoryFriendlyNames',
  'Theme',
  'SystemAppearance',
  'TimeRange',
  'GatedContentType',
  'TrackAccessType',
  'isContentCollectibleGated',
  'isContentFollowGated',
  'isContentTipGated',
  'isContentUSDCPurchaseGated',
  'TrackAvailabilityType',
  'USDCTransactionType',
  'USDCTransactionMethod',
  'USDCContentPurchaseType',
  'AnalyticsEvent',
  'CreateAccountOpen',
  'ShareToTwitter',
  'TipSource',
  'WithdrawUSDCEventFields',
  'WithdrawUSDCTransferEventFields',
  'WithdrawUSDCModalOpened',
  'WithdrawUSDCAddressPasted',
  'WithdrawUSDCFormError',
  'WithdrawUSDCRequested',
  'WithdrawUSDCSuccess',
  'WithdrawUSDCFailure',
  'WithdrawUSDCHelpLinkClicked',
  'WithdrawUSDCTxLinkClicked',
  'StripeEventFields',
  'BaseAnalyticsEvent',
  'AllTrackingEvents',
  'UserChallenge',
  'Specifier',
  'ChallengeRewardID',
  'FlowUIOpenEvent',
  'FlowUICloseEvent',
  'FlowErrorEvent',
  'FlowSessionID',
  'FlowSessionCreateEvent',
  'FlowSessionResumeEvent',
  'FlowSessionPassEvent',
  'FlowSessionFailEvent',
  'FlowSessionEvent',
  'UserChallengeState',
  'SpecifierWithAmount',
  'OptimisticUserChallenge',
  'BadgeTier',
  'Cacheable',
  'Cache',
  'ChatMessageWithExtras',
  'CollectiblesMetadata',
  'Collectible',
  'CollectibleState',
  'PlaylistTrackId',
  'CollectionMetadata',
  'CollectionDownloadReason',
  'OfflineCollectionMetadata',
  'ComputedCollectionProperties',
  'Collection',
  'UserCollectionMetadata',
  'UserCollection',
  'SmartCollection',
  'CollectionImage',
  'Color',
  'AdditionalErrorReportInfo',
  'ReportToSentryArgs',
  'Favorite',
  'ID',
  'UID',
  'CID',
  'URL',
  'ImageSizesObject',
  'CoverArtSizes',
  'ProfilePictureSizes',
  'CoverPhotoSizes',
  'Lineup',
  'LineupStateTrack',
  'Order',
  'LineupState',
  'OnChain',
  'OpenSeaAsset',
  'OpenSeaAssetExtended',
  'OpenSeaEvent',
  'OpenSeaEventExtended',
  'Playable',
  'PlaylistLibraryID',
  'PlaylistLibraryKind',
  'PlaylistIdentifier',
  'ExplorePlaylistIdentifier',
  'AudioNftPlaylistIdentifier',
  'PlaylistLibraryIdentifier',
  'PlaylistLibraryFolder',
  'PlaylistLibraryItem',
  'PlaylistLibrary',
  'Repost',
  'SearchUser',
  'SearchTrack',
  'SearchPlaylist',
  'ServiceMonitorType',
  'MonitorPayload',
  'SsrPageProps',
  'StemUpload',
  'StemUploadWithFile',
  'Timestamped',
  'Supporter',
  'Supporting',
  'UserTip',
  'LastDismissedTip',
  'TrackSegment',
  'Followee',
  'Download',
  'FieldVisibility',
  'Remix',
  'RemixOf',
  'TokenStandard',
  'AccessConditionsEthNFTCollection',
  'AccessConditionsSolNFTCollection',
  'CollectibleGatedConditions',
  'FollowGatedConditions',
  'TipGatedConditions',
  'USDCPurchaseConditions',
  'AccessConditions',
  'AccessPermissions',
  'AccessSignature',
  'EthCollectionMap',
  'SolCollectionMap',
  'GatedTrackStatus',
  'TrackMetadata',
  'DownloadReason',
  'OfflineTrackMetadata',
  'Stem',
  'ComputedTrackProperties',
  'Track',
  'UserTrackMetadata',
  'UserTrack',
  'LineupTrack',
  'StemTrackMetadata',
  'StemTrack',
  'StemUserTrack',
  'RemixTrack',
  'RemixUserTrack',
  'TrackImage',
  'USDCPurchaseDetails',
  'USDCTransactionDetails',
  'UserMetadata',
  'ComputedUserProperties',
  'User',
  'UserImage',
  'UserMultihash',
  'StringWei',
  'StringAudio',
  'StringUSDC',
  'BNWei',
  'BNAudio',
  'BNUSDC',
  'WalletAddress',
  'SolanaWalletAddress'
]

getDirectories(async function (err, res) {
  res
    .filter((path) => path.match(/\/[^\/]+\.(ts|tsx|js|jsx)$/))
    .forEach((path) => {
      const content = fs.readFileSync(path, { encoding: 'utf8', flag: 'r' })

      let matches = []
      let newContent = content
      EXPORTS.forEach((exportName) => {
        let regex = new RegExp(
          `(import[^{]*{[^}]* )(${exportName}( as [^,]*)*[, \\n])([^}]*}\\s*from '@audius/common')`
        )

        let match = content.match(regex)?.[2]

        if (match) {
          matches.push(exportName)

          // Delete old import
          newContent = newContent.replace(regex, '$1$4')
        }
      })

      // Add new imports
      if (matches.length) {
        console.log('matches', matches)
        const matchesList = matches.join(', ')
        newContent = `import { ${matchesList} } from '@audius/common/${DIRECTORY}'
     ${newContent}`

        fs.writeFileSync(path, newContent)
      }
    })
})
