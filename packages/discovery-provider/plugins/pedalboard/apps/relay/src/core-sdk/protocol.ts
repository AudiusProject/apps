// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.1
// source: protocol.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "protocol";

export interface SignedTransaction {
  signature: string;
  requestId: string;
  plays?: TrackPlays | undefined;
  validatorRegistration?: ValidatorRegistration | undefined;
  slaRollup?: SlaRollup | undefined;
  manageEntity?: ManageEntityLegacy | undefined;
}

export interface SendTransactionRequest {
  transaction: SignedTransaction | undefined;
}

export interface GetTransactionRequest {
  txhash: string;
}

export interface TransactionResponse {
  txhash: string;
  transaction: SignedTransaction | undefined;
}

export interface TrackPlays {
  plays: TrackPlay[];
}

export interface ValidatorRegistration {
  endpoint: string;
  cometAddress: string;
  ethBlock: string;
  nodeType: string;
  spId: string;
}

export interface TrackPlay {
  userId: string;
  trackId: string;
  timestamp: Date | undefined;
  signature: string;
}

export interface PingRequest {
}

export interface PingResponse {
  message: string;
}

export interface SlaRollup {
  timestamp: Date | undefined;
  blockStart: number;
  blockEnd: number;
  reports: SlaNodeReport[];
}

export interface SlaNodeReport {
  address: string;
  numBlocksProposed: number;
}

export interface ManageEntityLegacy {
  userId: number;
  entityType: string;
  entityId: number;
  action: string;
  metadata: string;
  signature: string;
}

function createBaseSignedTransaction(): SignedTransaction {
  return {
    signature: "",
    requestId: "",
    plays: undefined,
    validatorRegistration: undefined,
    slaRollup: undefined,
    manageEntity: undefined,
  };
}

export const SignedTransaction: MessageFns<SignedTransaction> = {
  encode(message: SignedTransaction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.signature !== "") {
      writer.uint32(10).string(message.signature);
    }
    if (message.requestId !== "") {
      writer.uint32(18).string(message.requestId);
    }
    if (message.plays !== undefined) {
      TrackPlays.encode(message.plays, writer.uint32(8002).fork()).join();
    }
    if (message.validatorRegistration !== undefined) {
      ValidatorRegistration.encode(message.validatorRegistration, writer.uint32(8010).fork()).join();
    }
    if (message.slaRollup !== undefined) {
      SlaRollup.encode(message.slaRollup, writer.uint32(8018).fork()).join();
    }
    if (message.manageEntity !== undefined) {
      ManageEntityLegacy.encode(message.manageEntity, writer.uint32(8026).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignedTransaction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedTransaction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signature = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.requestId = reader.string();
          continue;
        case 1000:
          if (tag !== 8002) {
            break;
          }

          message.plays = TrackPlays.decode(reader, reader.uint32());
          continue;
        case 1001:
          if (tag !== 8010) {
            break;
          }

          message.validatorRegistration = ValidatorRegistration.decode(reader, reader.uint32());
          continue;
        case 1002:
          if (tag !== 8018) {
            break;
          }

          message.slaRollup = SlaRollup.decode(reader, reader.uint32());
          continue;
        case 1003:
          if (tag !== 8026) {
            break;
          }

          message.manageEntity = ManageEntityLegacy.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignedTransaction {
    return {
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      plays: isSet(object.plays) ? TrackPlays.fromJSON(object.plays) : undefined,
      validatorRegistration: isSet(object.validatorRegistration)
        ? ValidatorRegistration.fromJSON(object.validatorRegistration)
        : undefined,
      slaRollup: isSet(object.slaRollup) ? SlaRollup.fromJSON(object.slaRollup) : undefined,
      manageEntity: isSet(object.manageEntity) ? ManageEntityLegacy.fromJSON(object.manageEntity) : undefined,
    };
  },

  toJSON(message: SignedTransaction): unknown {
    const obj: any = {};
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.plays !== undefined) {
      obj.plays = TrackPlays.toJSON(message.plays);
    }
    if (message.validatorRegistration !== undefined) {
      obj.validatorRegistration = ValidatorRegistration.toJSON(message.validatorRegistration);
    }
    if (message.slaRollup !== undefined) {
      obj.slaRollup = SlaRollup.toJSON(message.slaRollup);
    }
    if (message.manageEntity !== undefined) {
      obj.manageEntity = ManageEntityLegacy.toJSON(message.manageEntity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SignedTransaction>, I>>(base?: I): SignedTransaction {
    return SignedTransaction.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SignedTransaction>, I>>(object: I): SignedTransaction {
    const message = createBaseSignedTransaction();
    message.signature = object.signature ?? "";
    message.requestId = object.requestId ?? "";
    message.plays = (object.plays !== undefined && object.plays !== null)
      ? TrackPlays.fromPartial(object.plays)
      : undefined;
    message.validatorRegistration =
      (object.validatorRegistration !== undefined && object.validatorRegistration !== null)
        ? ValidatorRegistration.fromPartial(object.validatorRegistration)
        : undefined;
    message.slaRollup = (object.slaRollup !== undefined && object.slaRollup !== null)
      ? SlaRollup.fromPartial(object.slaRollup)
      : undefined;
    message.manageEntity = (object.manageEntity !== undefined && object.manageEntity !== null)
      ? ManageEntityLegacy.fromPartial(object.manageEntity)
      : undefined;
    return message;
  },
};

function createBaseSendTransactionRequest(): SendTransactionRequest {
  return { transaction: undefined };
}

export const SendTransactionRequest: MessageFns<SendTransactionRequest> = {
  encode(message: SendTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transaction !== undefined) {
      SignedTransaction.encode(message.transaction, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.transaction = SignedTransaction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendTransactionRequest {
    return { transaction: isSet(object.transaction) ? SignedTransaction.fromJSON(object.transaction) : undefined };
  },

  toJSON(message: SendTransactionRequest): unknown {
    const obj: any = {};
    if (message.transaction !== undefined) {
      obj.transaction = SignedTransaction.toJSON(message.transaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendTransactionRequest>, I>>(base?: I): SendTransactionRequest {
    return SendTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendTransactionRequest>, I>>(object: I): SendTransactionRequest {
    const message = createBaseSendTransactionRequest();
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? SignedTransaction.fromPartial(object.transaction)
      : undefined;
    return message;
  },
};

function createBaseGetTransactionRequest(): GetTransactionRequest {
  return { txhash: "" };
}

export const GetTransactionRequest: MessageFns<GetTransactionRequest> = {
  encode(message: GetTransactionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txhash !== "") {
      writer.uint32(10).string(message.txhash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTransactionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTransactionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txhash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTransactionRequest {
    return { txhash: isSet(object.txhash) ? globalThis.String(object.txhash) : "" };
  },

  toJSON(message: GetTransactionRequest): unknown {
    const obj: any = {};
    if (message.txhash !== "") {
      obj.txhash = message.txhash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTransactionRequest>, I>>(base?: I): GetTransactionRequest {
    return GetTransactionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTransactionRequest>, I>>(object: I): GetTransactionRequest {
    const message = createBaseGetTransactionRequest();
    message.txhash = object.txhash ?? "";
    return message;
  },
};

function createBaseTransactionResponse(): TransactionResponse {
  return { txhash: "", transaction: undefined };
}

export const TransactionResponse: MessageFns<TransactionResponse> = {
  encode(message: TransactionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txhash !== "") {
      writer.uint32(10).string(message.txhash);
    }
    if (message.transaction !== undefined) {
      SignedTransaction.encode(message.transaction, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TransactionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTransactionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txhash = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.transaction = SignedTransaction.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TransactionResponse {
    return {
      txhash: isSet(object.txhash) ? globalThis.String(object.txhash) : "",
      transaction: isSet(object.transaction) ? SignedTransaction.fromJSON(object.transaction) : undefined,
    };
  },

  toJSON(message: TransactionResponse): unknown {
    const obj: any = {};
    if (message.txhash !== "") {
      obj.txhash = message.txhash;
    }
    if (message.transaction !== undefined) {
      obj.transaction = SignedTransaction.toJSON(message.transaction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TransactionResponse>, I>>(base?: I): TransactionResponse {
    return TransactionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TransactionResponse>, I>>(object: I): TransactionResponse {
    const message = createBaseTransactionResponse();
    message.txhash = object.txhash ?? "";
    message.transaction = (object.transaction !== undefined && object.transaction !== null)
      ? SignedTransaction.fromPartial(object.transaction)
      : undefined;
    return message;
  },
};

function createBaseTrackPlays(): TrackPlays {
  return { plays: [] };
}

export const TrackPlays: MessageFns<TrackPlays> = {
  encode(message: TrackPlays, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.plays) {
      TrackPlay.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackPlays {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackPlays();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.plays.push(TrackPlay.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackPlays {
    return {
      plays: globalThis.Array.isArray(object?.plays) ? object.plays.map((e: any) => TrackPlay.fromJSON(e)) : [],
    };
  },

  toJSON(message: TrackPlays): unknown {
    const obj: any = {};
    if (message.plays?.length) {
      obj.plays = message.plays.map((e) => TrackPlay.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackPlays>, I>>(base?: I): TrackPlays {
    return TrackPlays.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackPlays>, I>>(object: I): TrackPlays {
    const message = createBaseTrackPlays();
    message.plays = object.plays?.map((e) => TrackPlay.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidatorRegistration(): ValidatorRegistration {
  return { endpoint: "", cometAddress: "", ethBlock: "", nodeType: "", spId: "" };
}

export const ValidatorRegistration: MessageFns<ValidatorRegistration> = {
  encode(message: ValidatorRegistration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpoint !== "") {
      writer.uint32(10).string(message.endpoint);
    }
    if (message.cometAddress !== "") {
      writer.uint32(18).string(message.cometAddress);
    }
    if (message.ethBlock !== "") {
      writer.uint32(26).string(message.ethBlock);
    }
    if (message.nodeType !== "") {
      writer.uint32(34).string(message.nodeType);
    }
    if (message.spId !== "") {
      writer.uint32(42).string(message.spId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValidatorRegistration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorRegistration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.cometAddress = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ethBlock = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.nodeType = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.spId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorRegistration {
    return {
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      cometAddress: isSet(object.cometAddress) ? globalThis.String(object.cometAddress) : "",
      ethBlock: isSet(object.ethBlock) ? globalThis.String(object.ethBlock) : "",
      nodeType: isSet(object.nodeType) ? globalThis.String(object.nodeType) : "",
      spId: isSet(object.spId) ? globalThis.String(object.spId) : "",
    };
  },

  toJSON(message: ValidatorRegistration): unknown {
    const obj: any = {};
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.cometAddress !== "") {
      obj.cometAddress = message.cometAddress;
    }
    if (message.ethBlock !== "") {
      obj.ethBlock = message.ethBlock;
    }
    if (message.nodeType !== "") {
      obj.nodeType = message.nodeType;
    }
    if (message.spId !== "") {
      obj.spId = message.spId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorRegistration>, I>>(base?: I): ValidatorRegistration {
    return ValidatorRegistration.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorRegistration>, I>>(object: I): ValidatorRegistration {
    const message = createBaseValidatorRegistration();
    message.endpoint = object.endpoint ?? "";
    message.cometAddress = object.cometAddress ?? "";
    message.ethBlock = object.ethBlock ?? "";
    message.nodeType = object.nodeType ?? "";
    message.spId = object.spId ?? "";
    return message;
  },
};

function createBaseTrackPlay(): TrackPlay {
  return { userId: "", trackId: "", timestamp: undefined, signature: "" };
}

export const TrackPlay: MessageFns<TrackPlay> = {
  encode(message: TrackPlay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(26).fork()).join();
    }
    if (message.signature !== "") {
      writer.uint32(34).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackPlay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackPlay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.signature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackPlay {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: TrackPlay): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TrackPlay>, I>>(base?: I): TrackPlay {
    return TrackPlay.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TrackPlay>, I>>(object: I): TrackPlay {
    const message = createBaseTrackPlay();
    message.userId = object.userId ?? "";
    message.trackId = object.trackId ?? "";
    message.timestamp = object.timestamp ?? undefined;
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBasePingRequest(): PingRequest {
  return {};
}

export const PingRequest: MessageFns<PingRequest> = {
  encode(_: PingRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingRequest {
    return {};
  },

  toJSON(_: PingRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PingRequest>, I>>(base?: I): PingRequest {
    return PingRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingRequest>, I>>(_: I): PingRequest {
    const message = createBasePingRequest();
    return message;
  },
};

function createBasePingResponse(): PingResponse {
  return { message: "" };
}

export const PingResponse: MessageFns<PingResponse> = {
  encode(message: PingResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: PingResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PingResponse>, I>>(base?: I): PingResponse {
    return PingResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingResponse>, I>>(object: I): PingResponse {
    const message = createBasePingResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseSlaRollup(): SlaRollup {
  return { timestamp: undefined, blockStart: 0, blockEnd: 0, reports: [] };
}

export const SlaRollup: MessageFns<SlaRollup> = {
  encode(message: SlaRollup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.timestamp), writer.uint32(10).fork()).join();
    }
    if (message.blockStart !== 0) {
      writer.uint32(16).int64(message.blockStart);
    }
    if (message.blockEnd !== 0) {
      writer.uint32(24).int64(message.blockEnd);
    }
    for (const v of message.reports) {
      SlaNodeReport.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlaRollup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlaRollup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.timestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockStart = longToNumber(reader.int64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockEnd = longToNumber(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.reports.push(SlaNodeReport.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlaRollup {
    return {
      timestamp: isSet(object.timestamp) ? fromJsonTimestamp(object.timestamp) : undefined,
      blockStart: isSet(object.blockStart) ? globalThis.Number(object.blockStart) : 0,
      blockEnd: isSet(object.blockEnd) ? globalThis.Number(object.blockEnd) : 0,
      reports: globalThis.Array.isArray(object?.reports)
        ? object.reports.map((e: any) => SlaNodeReport.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SlaRollup): unknown {
    const obj: any = {};
    if (message.timestamp !== undefined) {
      obj.timestamp = message.timestamp.toISOString();
    }
    if (message.blockStart !== 0) {
      obj.blockStart = Math.round(message.blockStart);
    }
    if (message.blockEnd !== 0) {
      obj.blockEnd = Math.round(message.blockEnd);
    }
    if (message.reports?.length) {
      obj.reports = message.reports.map((e) => SlaNodeReport.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlaRollup>, I>>(base?: I): SlaRollup {
    return SlaRollup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlaRollup>, I>>(object: I): SlaRollup {
    const message = createBaseSlaRollup();
    message.timestamp = object.timestamp ?? undefined;
    message.blockStart = object.blockStart ?? 0;
    message.blockEnd = object.blockEnd ?? 0;
    message.reports = object.reports?.map((e) => SlaNodeReport.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSlaNodeReport(): SlaNodeReport {
  return { address: "", numBlocksProposed: 0 };
}

export const SlaNodeReport: MessageFns<SlaNodeReport> = {
  encode(message: SlaNodeReport, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.numBlocksProposed !== 0) {
      writer.uint32(16).int32(message.numBlocksProposed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SlaNodeReport {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSlaNodeReport();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.numBlocksProposed = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SlaNodeReport {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      numBlocksProposed: isSet(object.numBlocksProposed) ? globalThis.Number(object.numBlocksProposed) : 0,
    };
  },

  toJSON(message: SlaNodeReport): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.numBlocksProposed !== 0) {
      obj.numBlocksProposed = Math.round(message.numBlocksProposed);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SlaNodeReport>, I>>(base?: I): SlaNodeReport {
    return SlaNodeReport.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SlaNodeReport>, I>>(object: I): SlaNodeReport {
    const message = createBaseSlaNodeReport();
    message.address = object.address ?? "";
    message.numBlocksProposed = object.numBlocksProposed ?? 0;
    return message;
  },
};

function createBaseManageEntityLegacy(): ManageEntityLegacy {
  return { userId: 0, entityType: "", entityId: 0, action: "", metadata: "", signature: "" };
}

export const ManageEntityLegacy: MessageFns<ManageEntityLegacy> = {
  encode(message: ManageEntityLegacy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int64(message.userId);
    }
    if (message.entityType !== "") {
      writer.uint32(18).string(message.entityType);
    }
    if (message.entityId !== 0) {
      writer.uint32(24).int64(message.entityId);
    }
    if (message.action !== "") {
      writer.uint32(34).string(message.action);
    }
    if (message.metadata !== "") {
      writer.uint32(42).string(message.metadata);
    }
    if (message.signature !== "") {
      writer.uint32(50).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ManageEntityLegacy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManageEntityLegacy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.userId = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.entityType = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.entityId = longToNumber(reader.int64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.action = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.metadata = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.signature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ManageEntityLegacy {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      entityId: isSet(object.entityId) ? globalThis.Number(object.entityId) : 0,
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: ManageEntityLegacy): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.entityId !== 0) {
      obj.entityId = Math.round(message.entityId);
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ManageEntityLegacy>, I>>(base?: I): ManageEntityLegacy {
    return ManageEntityLegacy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ManageEntityLegacy>, I>>(object: I): ManageEntityLegacy {
    const message = createBaseManageEntityLegacy();
    message.userId = object.userId ?? 0;
    message.entityType = object.entityType ?? "";
    message.entityId = object.entityId ?? 0;
    message.action = object.action ?? "";
    message.metadata = object.metadata ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

export interface Protocol {
  SendTransaction(request: SendTransactionRequest): Promise<TransactionResponse>;
  GetTransaction(request: GetTransactionRequest): Promise<TransactionResponse>;
  Ping(request: PingRequest): Promise<PingResponse>;
}

export const ProtocolServiceName = "protocol.Protocol";
export class ProtocolClientImpl implements Protocol {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ProtocolServiceName;
    this.rpc = rpc;
    this.SendTransaction = this.SendTransaction.bind(this);
    this.GetTransaction = this.GetTransaction.bind(this);
    this.Ping = this.Ping.bind(this);
  }
  SendTransaction(request: SendTransactionRequest): Promise<TransactionResponse> {
    const data = SendTransactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SendTransaction", data);
    return promise.then((data) => TransactionResponse.decode(new BinaryReader(data)));
  }

  GetTransaction(request: GetTransactionRequest): Promise<TransactionResponse> {
    const data = GetTransactionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetTransaction", data);
    return promise.then((data) => TransactionResponse.decode(new BinaryReader(data)));
  }

  Ping(request: PingRequest): Promise<PingResponse> {
    const data = PingRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Ping", data);
    return promise.then((data) => PingResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
