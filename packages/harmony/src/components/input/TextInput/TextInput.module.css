.root {
  /* This isolates z-index to only affect this component */
  isolation: isolate;
}

.inputRoot {
  display: flex;
  align-items: center;
  /* Dont need Y padding since the flex centering takes care of it */
  padding: 0 var(--harmony-spacing-l);
  /* The gap spaces the content around the icons */
  border: 1px solid var(--harmony-border-default);
  border-radius: var(--harmony-unit-1);
  background-color: var(--harmony-bg-surface-1);
  transition: border ease-in-out 0.1s;
  box-sizing: border-box;
  & svg path {
    fill: var(--harmony-text-subdued);
  }
}

.inputRoot:hover {
  border-color: var(--harmony-border-strong);
}

.small {
  /* gap between icons & content */
  gap: var(--harmony-spacing-s);
  font-size: var(--harmony-font-s);
  height: 34px;
}

.default {
  /* gap between icons & content */
  gap: var(--harmony-spacing-m);
  font-size: var(--harmony-font-m);
  height: 64px;
}

.focused,
.focused:hover {
  border-color: var(--harmony-secondary);
}

.warning,
.warning.focused,
.warning:hover {
  border-color: var(--harmony-orange);
}

.error,
.error.focused,
.error:hover {
  border-color: var(--harmony-red);
}

.disabled {
  background-color: var(--harmony-neutral-light-9);
  border-color: var(--harmony-neutral-light-8);
}

/* Actual input */
.textInput {
  padding: 0;
  overflow: visible;
  width: 100%;
  height: 100%;
  outline: 0;
  border: 0;
  background: none;
  font-weight: var(--harmony-font-medium);
  color: var(--harmony-text-default);
}

.textInput.small {
  font-size: var(--harmony-font-s);
}
.textInput.default {
  font-size: var(--harmony-font-l);
}

/* Placeholder and label */
.textInput::placeholder,
.label {
  color: var(--harmony-neutral-light-4);
  font-weight: var(--harmony-font-medium);
  font-family: var(--harmony-font-family);
}

.inputRow {
  width: 100%;
  justify-content: space-between;
}

.inputContainer {
  flex: 1 1 0;
}

/** 
 * Flex container containing the label text and the max character limit text
 **/
.elevatedLabelRow {
  position: relative;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  gap: var(--harmony-spacing-xs);
}

/** Add the "*" to required fields, but have it disappear when elevated **/
.required:not(.focused) .elevatedLabelRow .placeholder:not(.hasValue)::after {
  content: ' *';
}

/** Position the label in the center when unfocussed **/
.label {
  color: var(--harmony-text-subdued);
  z-index: 2;
  transition: all 0.3s ease;
  /* When not focussed, the label centers itself visually */
  transform: translate(0px, 50%);
}

/** Shrink the size of the label **/
.focused .elevatedLabelRow .label,
.hasValue {
  transform: translate(0, 0);
  font-size: var(--harmony-font-s);
}
