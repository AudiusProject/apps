/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NftCollection } from './NftCollection';
import {
    NftCollectionFromJSON,
    NftCollectionFromJSONTyped,
    NftCollectionToJSON,
} from './NftCollection';
import type { UsdcGate } from './UsdcGate';
import {
    UsdcGateFromJSON,
    UsdcGateFromJSONTyped,
    UsdcGateToJSON,
} from './UsdcGate';

/**
 * 
 * @export
 * @interface AccessGate
 */
export interface AccessGate {
    /**
     * Must pay the total price and split to the given addresses to unlock
     * @type {UsdcGate}
     * @memberof AccessGate
     */
    usdcPurchase?: UsdcGate;
    /**
     * Must follow the given user ID to unlock
     * @type {number}
     * @memberof AccessGate
     */
    followUserId?: number;
    /**
     * Must tip the given user ID to unlock
     * @type {number}
     * @memberof AccessGate
     */
    tipUserId?: number;
    /**
     * Must hold an NFT of the given collection to unlock
     * @type {NftCollection}
     * @memberof AccessGate
     */
    nftCollection?: NftCollection;
}

/**
 * Check if a given object implements the AccessGate interface.
 */
export function instanceOfAccessGate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AccessGateFromJSON(json: any): AccessGate {
    return AccessGateFromJSONTyped(json, false);
}

export function AccessGateFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccessGate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'usdcPurchase': !exists(json, 'usdc_purchase') ? undefined : UsdcGateFromJSON(json['usdc_purchase']),
        'followUserId': !exists(json, 'follow_user_id') ? undefined : json['follow_user_id'],
        'tipUserId': !exists(json, 'tip_user_id') ? undefined : json['tip_user_id'],
        'nftCollection': !exists(json, 'nft_collection') ? undefined : NftCollectionFromJSON(json['nft_collection']),
    };
}

export function AccessGateToJSON(value?: AccessGate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'usdc_purchase': UsdcGateToJSON(value.usdcPurchase),
        'follow_user_id': value.followUserId,
        'tip_user_id': value.tipUserId,
        'nft_collection': NftCollectionToJSON(value.nftCollection),
    };
}

