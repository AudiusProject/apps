/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ChallengeResponse
 */
export interface ChallengeResponse {
    /**
     * 
     * @type {string}
     * @memberof ChallengeResponse
     */
    challengeId: string;
    /**
     * 
     * @type {string}
     * @memberof ChallengeResponse
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ChallengeResponse
     */
    specifier?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ChallengeResponse
     */
    isComplete: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChallengeResponse
     */
    isActive: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof ChallengeResponse
     */
    isDisbursed: boolean;
    /**
     * 
     * @type {number}
     * @memberof ChallengeResponse
     */
    currentStepCount?: number;
    /**
     * 
     * @type {number}
     * @memberof ChallengeResponse
     */
    maxSteps?: number;
    /**
     * 
     * @type {string}
     * @memberof ChallengeResponse
     */
    challengeType: string;
    /**
     * 
     * @type {string}
     * @memberof ChallengeResponse
     */
    amount: string;
    /**
     * 
     * @type {number}
     * @memberof ChallengeResponse
     */
    disbursedAmount: number;
    /**
     * 
     * @type {number}
     * @memberof ChallengeResponse
     */
    cooldownDays?: number;
    /**
     * 
     * @type {object}
     * @memberof ChallengeResponse
     */
    metadata: object;
}

/**
 * Check if a given object implements the ChallengeResponse interface.
 */
export function instanceOfChallengeResponse(value: object): value is ChallengeResponse {
    let isInstance = true;
    isInstance = isInstance && "challengeId" in value && value["challengeId"] !== undefined;
    isInstance = isInstance && "userId" in value && value["userId"] !== undefined;
    isInstance = isInstance && "isComplete" in value && value["isComplete"] !== undefined;
    isInstance = isInstance && "isActive" in value && value["isActive"] !== undefined;
    isInstance = isInstance && "isDisbursed" in value && value["isDisbursed"] !== undefined;
    isInstance = isInstance && "challengeType" in value && value["challengeType"] !== undefined;
    isInstance = isInstance && "amount" in value && value["amount"] !== undefined;
    isInstance = isInstance && "disbursedAmount" in value && value["disbursedAmount"] !== undefined;
    isInstance = isInstance && "metadata" in value && value["metadata"] !== undefined;

    return isInstance;
}

export function ChallengeResponseFromJSON(json: any): ChallengeResponse {
    return ChallengeResponseFromJSONTyped(json, false);
}

export function ChallengeResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChallengeResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challengeId': json['challenge_id'],
        'userId': json['user_id'],
        'specifier': !exists(json, 'specifier') ? undefined : json['specifier'],
        'isComplete': json['is_complete'],
        'isActive': json['is_active'],
        'isDisbursed': json['is_disbursed'],
        'currentStepCount': !exists(json, 'current_step_count') ? undefined : json['current_step_count'],
        'maxSteps': !exists(json, 'max_steps') ? undefined : json['max_steps'],
        'challengeType': json['challenge_type'],
        'amount': json['amount'],
        'disbursedAmount': json['disbursed_amount'],
        'cooldownDays': !exists(json, 'cooldown_days') ? undefined : json['cooldown_days'],
        'metadata': json['metadata'],
    };
}

export function ChallengeResponseToJSON(value?: ChallengeResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge_id': value.challengeId,
        'user_id': value.userId,
        'specifier': value.specifier,
        'is_complete': value.isComplete,
        'is_active': value.isActive,
        'is_disbursed': value.isDisbursed,
        'current_step_count': value.currentStepCount,
        'max_steps': value.maxSteps,
        'challenge_type': value.challengeType,
        'amount': value.amount,
        'disbursed_amount': value.disbursedAmount,
        'cooldown_days': value.cooldownDays,
        'metadata': value.metadata,
    };
}

