/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Playlist } from './Playlist';
import {
    PlaylistFromJSON,
    PlaylistFromJSONTyped,
    PlaylistToJSON,
} from './Playlist';
import type { PurchasableContent } from './PurchasableContent';
import {
    PurchasableContentFromJSON,
    PurchasableContentFromJSONTyped,
    PurchasableContentToJSON,
} from './PurchasableContent';

/**
 * 
 * @export
 * @interface CollectionPurchasableContent
 */
export interface CollectionPurchasableContent extends PurchasableContent {
    /**
     * 
     * @type {string}
     * @memberof CollectionPurchasableContent
     */
    contentType: CollectionPurchasableContentContentTypeEnum;
    /**
     * 
     * @type {Playlist}
     * @memberof CollectionPurchasableContent
     */
    item: Playlist;
}


/**
 * @export
 */
export const CollectionPurchasableContentContentTypeEnum = {
    Album: 'album'
} as const;
export type CollectionPurchasableContentContentTypeEnum = typeof CollectionPurchasableContentContentTypeEnum[keyof typeof CollectionPurchasableContentContentTypeEnum];


/**
 * Check if a given object implements the CollectionPurchasableContent interface.
 */
export function instanceOfCollectionPurchasableContent(value: object): value is CollectionPurchasableContent {
    let isInstance = true;
    isInstance = isInstance && "contentType" in value && value["contentType"] !== undefined;
    isInstance = isInstance && "item" in value && value["item"] !== undefined;

    return isInstance;
}

export function CollectionPurchasableContentFromJSON(json: any): CollectionPurchasableContent {
    return CollectionPurchasableContentFromJSONTyped(json, false);
}

export function CollectionPurchasableContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionPurchasableContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...PurchasableContentFromJSONTyped(json, ignoreDiscriminator),
        'contentType': json['content_type'],
        'item': PlaylistFromJSON(json['item']),
    };
}

export function CollectionPurchasableContentToJSON(value?: CollectionPurchasableContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...PurchasableContentToJSON(value),
        'content_type': value.contentType,
        'item': PlaylistToJSON(value.item),
    };
}

