/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Access } from './Access';
import {
    AccessFromJSON,
    AccessFromJSONTyped,
    AccessToJSON,
} from './Access';
import type { PlaylistAddedTimestamp } from './PlaylistAddedTimestamp';
import {
    PlaylistAddedTimestampFromJSON,
    PlaylistAddedTimestampFromJSONTyped,
    PlaylistAddedTimestampToJSON,
} from './PlaylistAddedTimestamp';
import type { PlaylistArtwork } from './PlaylistArtwork';
import {
    PlaylistArtworkFromJSON,
    PlaylistArtworkFromJSONTyped,
    PlaylistArtworkToJSON,
} from './PlaylistArtwork';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * 
 * @export
 * @interface Playlist
 */
export interface Playlist {
    /**
     * 
     * @type {PlaylistArtwork}
     * @memberof Playlist
     */
    artwork?: PlaylistArtwork;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    permalink?: string;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof Playlist
     */
    isAlbum: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Playlist
     */
    isImageAutogenerated: boolean;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    playlistName: string;
    /**
     * 
     * @type {Array<PlaylistAddedTimestamp>}
     * @memberof Playlist
     */
    playlistContents: Array<PlaylistAddedTimestamp>;
    /**
     * 
     * @type {number}
     * @memberof Playlist
     */
    repostCount: number;
    /**
     * 
     * @type {number}
     * @memberof Playlist
     */
    favoriteCount: number;
    /**
     * 
     * @type {number}
     * @memberof Playlist
     */
    totalPlayCount: number;
    /**
     * 
     * @type {User}
     * @memberof Playlist
     */
    user: User;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    ddexApp?: string;
    /**
     * 
     * @type {Access}
     * @memberof Playlist
     */
    access?: Access;
    /**
     * 
     * @type {string}
     * @memberof Playlist
     */
    upc?: string;
    /**
     * 
     * @type {number}
     * @memberof Playlist
     */
    trackCount: number;
}

/**
 * Check if a given object implements the Playlist interface.
 */
export function instanceOfPlaylist(value: object): value is Playlist {
    let isInstance = true;
    isInstance = isInstance && "id" in value && value["id"] !== undefined;
    isInstance = isInstance && "isAlbum" in value && value["isAlbum"] !== undefined;
    isInstance = isInstance && "isImageAutogenerated" in value && value["isImageAutogenerated"] !== undefined;
    isInstance = isInstance && "playlistName" in value && value["playlistName"] !== undefined;
    isInstance = isInstance && "playlistContents" in value && value["playlistContents"] !== undefined;
    isInstance = isInstance && "repostCount" in value && value["repostCount"] !== undefined;
    isInstance = isInstance && "favoriteCount" in value && value["favoriteCount"] !== undefined;
    isInstance = isInstance && "totalPlayCount" in value && value["totalPlayCount"] !== undefined;
    isInstance = isInstance && "user" in value && value["user"] !== undefined;
    isInstance = isInstance && "trackCount" in value && value["trackCount"] !== undefined;

    return isInstance;
}

export function PlaylistFromJSON(json: any): Playlist {
    return PlaylistFromJSONTyped(json, false);
}

export function PlaylistFromJSONTyped(json: any, ignoreDiscriminator: boolean): Playlist {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'artwork': !exists(json, 'artwork') ? undefined : PlaylistArtworkFromJSON(json['artwork']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'permalink': !exists(json, 'permalink') ? undefined : json['permalink'],
        'id': json['id'],
        'isAlbum': json['is_album'],
        'isImageAutogenerated': json['is_image_autogenerated'],
        'playlistName': json['playlist_name'],
        'playlistContents': ((json['playlist_contents'] as Array<any>).map(PlaylistAddedTimestampFromJSON)),
        'repostCount': json['repost_count'],
        'favoriteCount': json['favorite_count'],
        'totalPlayCount': json['total_play_count'],
        'user': UserFromJSON(json['user']),
        'ddexApp': !exists(json, 'ddex_app') ? undefined : json['ddex_app'],
        'access': !exists(json, 'access') ? undefined : AccessFromJSON(json['access']),
        'upc': !exists(json, 'upc') ? undefined : json['upc'],
        'trackCount': json['track_count'],
    };
}

export function PlaylistToJSON(value?: Playlist | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'artwork': PlaylistArtworkToJSON(value.artwork),
        'description': value.description,
        'permalink': value.permalink,
        'id': value.id,
        'is_album': value.isAlbum,
        'is_image_autogenerated': value.isImageAutogenerated,
        'playlist_name': value.playlistName,
        'playlist_contents': ((value.playlistContents as Array<any>).map(PlaylistAddedTimestampToJSON)),
        'repost_count': value.repostCount,
        'favorite_count': value.favoriteCount,
        'total_play_count': value.totalPlayCount,
        'user': UserToJSON(value.user),
        'ddex_app': value.ddexApp,
        'access': AccessToJSON(value.access),
        'upc': value.upc,
        'track_count': value.trackCount,
    };
}

