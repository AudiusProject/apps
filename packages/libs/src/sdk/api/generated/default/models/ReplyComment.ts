/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ReplyComment
 */
export interface ReplyComment {
    /**
     * 
     * @type {string}
     * @memberof ReplyComment
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ReplyComment
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof ReplyComment
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof ReplyComment
     */
    trackTimestampMs?: number;
    /**
     * 
     * @type {number}
     * @memberof ReplyComment
     */
    reactCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof ReplyComment
     */
    isPinned: boolean;
    /**
     * 
     * @type {string}
     * @memberof ReplyComment
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof ReplyComment
     */
    updatedAt?: string;
}

/**
 * Check if a given object implements the ReplyComment interface.
 */
export function instanceOfReplyComment(value: object): value is ReplyComment {
    let isInstance = true;
    isInstance = isInstance && "id" in value && value["id"] !== undefined;
    isInstance = isInstance && "userId" in value && value["userId"] !== undefined;
    isInstance = isInstance && "message" in value && value["message"] !== undefined;
    isInstance = isInstance && "reactCount" in value && value["reactCount"] !== undefined;
    isInstance = isInstance && "isPinned" in value && value["isPinned"] !== undefined;
    isInstance = isInstance && "createdAt" in value && value["createdAt"] !== undefined;

    return isInstance;
}

export function ReplyCommentFromJSON(json: any): ReplyComment {
    return ReplyCommentFromJSONTyped(json, false);
}

export function ReplyCommentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReplyComment {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'userId': json['user_id'],
        'message': json['message'],
        'trackTimestampMs': !exists(json, 'track_timestamp_ms') ? undefined : json['track_timestamp_ms'],
        'reactCount': json['react_count'],
        'isPinned': json['is_pinned'],
        'createdAt': json['created_at'],
        'updatedAt': !exists(json, 'updated_at') ? undefined : json['updated_at'],
    };
}

export function ReplyCommentToJSON(value?: ReplyComment | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'user_id': value.userId,
        'message': value.message,
        'track_timestamp_ms': value.trackTimestampMs,
        'react_count': value.reactCount,
        'is_pinned': value.isPinned,
        'created_at': value.createdAt,
        'updated_at': value.updatedAt,
    };
}

