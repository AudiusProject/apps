/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PurchasableContent } from './PurchasableContent';
import {
    PurchasableContentFromJSON,
    PurchasableContentFromJSONTyped,
    PurchasableContentToJSON,
} from './PurchasableContent';
import type { Track } from './Track';
import {
    TrackFromJSON,
    TrackFromJSONTyped,
    TrackToJSON,
} from './Track';

/**
 * 
 * @export
 * @interface TrackPurchasableContent
 */
export interface TrackPurchasableContent extends PurchasableContent {
    /**
     * 
     * @type {string}
     * @memberof TrackPurchasableContent
     */
    contentType: TrackPurchasableContentContentTypeEnum;
    /**
     * 
     * @type {Track}
     * @memberof TrackPurchasableContent
     */
    item: Track;
}


/**
 * @export
 */
export const TrackPurchasableContentContentTypeEnum = {
    Track: 'track'
} as const;
export type TrackPurchasableContentContentTypeEnum = typeof TrackPurchasableContentContentTypeEnum[keyof typeof TrackPurchasableContentContentTypeEnum];


/**
 * Check if a given object implements the TrackPurchasableContent interface.
 */
export function instanceOfTrackPurchasableContent(value: object): value is TrackPurchasableContent {
    let isInstance = true;
    isInstance = isInstance && "contentType" in value && value["contentType"] !== undefined;
    isInstance = isInstance && "item" in value && value["item"] !== undefined;

    return isInstance;
}

export function TrackPurchasableContentFromJSON(json: any): TrackPurchasableContent {
    return TrackPurchasableContentFromJSONTyped(json, false);
}

export function TrackPurchasableContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): TrackPurchasableContent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...PurchasableContentFromJSONTyped(json, ignoreDiscriminator),
        'contentType': json['content_type'],
        'item': TrackFromJSON(json['item']),
    };
}

export function TrackPurchasableContentToJSON(value?: TrackPurchasableContent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...PurchasableContentToJSON(value),
        'content_type': value.contentType,
        'item': TrackToJSON(value.item),
    };
}

