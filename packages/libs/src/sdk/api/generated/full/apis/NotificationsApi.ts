/* tslint:disable */
// @ts-nocheck
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  NotificationsResponse,
} from '../models';
import {
    NotificationsResponseFromJSON,
    NotificationsResponseToJSON,
} from '../models';

export interface GetNotificationsRequest {
    userId: string;
    timestamp?: number;
    groupId?: string;
    limit?: number;
    validTypes?: Array<string>;
}

/**
 * 
 */
export class NotificationsApi extends runtime.BaseAPI {

    /**
     * @hidden
     * Get notifications for user ID
     */
    async getNotificationsRaw(params: GetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationsResponse>> {
        if (params.userId === null || params.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter params.userId was null or undefined when calling getNotifications.');
        }

        const queryParameters: any = {};

        if (params.timestamp !== undefined) {
            queryParameters['timestamp'] = params.timestamp;
        }

        if (params.groupId !== undefined) {
            queryParameters['group_id'] = params.groupId;
        }

        if (params.limit !== undefined) {
            queryParameters['limit'] = params.limit;
        }

        if (params.validTypes) {
            queryParameters['valid_types'] = params.validTypes;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/notifications/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(params.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationsResponseFromJSON(jsonValue));
    }

    /**
     * Get notifications for user ID
     */
    async getNotifications(params: GetNotificationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationsResponse> {
        const response = await this.getNotificationsRaw(params, initOverrides);
        return await response.value();
    }

}
