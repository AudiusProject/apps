/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlaylistFull } from './PlaylistFull';
import {
    PlaylistFullFromJSON,
    PlaylistFullFromJSONTyped,
    PlaylistFullToJSON,
} from './PlaylistFull';
import type { PurchasableContentFull } from './PurchasableContentFull';
import {
    PurchasableContentFullFromJSON,
    PurchasableContentFullFromJSONTyped,
    PurchasableContentFullToJSON,
} from './PurchasableContentFull';

/**
 * 
 * @export
 * @interface CollectionPurchasableContentFull
 */
export interface CollectionPurchasableContentFull extends PurchasableContentFull {
    /**
     * 
     * @type {string}
     * @memberof CollectionPurchasableContentFull
     */
    contentType: CollectionPurchasableContentFullContentTypeEnum;
    /**
     * 
     * @type {PlaylistFull}
     * @memberof CollectionPurchasableContentFull
     */
    item: PlaylistFull;
}


/**
 * @export
 */
export const CollectionPurchasableContentFullContentTypeEnum = {
    Album: 'album'
} as const;
export type CollectionPurchasableContentFullContentTypeEnum = typeof CollectionPurchasableContentFullContentTypeEnum[keyof typeof CollectionPurchasableContentFullContentTypeEnum];


/**
 * Check if a given object implements the CollectionPurchasableContentFull interface.
 */
export function instanceOfCollectionPurchasableContentFull(value: object): value is CollectionPurchasableContentFull {
    let isInstance = true;
    isInstance = isInstance && "contentType" in value && value["contentType"] !== undefined;
    isInstance = isInstance && "item" in value && value["item"] !== undefined;

    return isInstance;
}

export function CollectionPurchasableContentFullFromJSON(json: any): CollectionPurchasableContentFull {
    return CollectionPurchasableContentFullFromJSONTyped(json, false);
}

export function CollectionPurchasableContentFullFromJSONTyped(json: any, ignoreDiscriminator: boolean): CollectionPurchasableContentFull {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...PurchasableContentFullFromJSONTyped(json, ignoreDiscriminator),
        'contentType': json['content_type'],
        'item': PlaylistFullFromJSON(json['item']),
    };
}

export function CollectionPurchasableContentFullToJSON(value?: CollectionPurchasableContentFull | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...PurchasableContentFullToJSON(value),
        'content_type': value.contentType,
        'item': PlaylistFullToJSON(value.item),
    };
}

