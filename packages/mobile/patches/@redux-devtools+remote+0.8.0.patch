diff --git a/node_modules/@redux-devtools/remote/lib/cjs/devTools.js b/node_modules/@redux-devtools/remote/lib/cjs/devTools.js
index 5e9a11f..1a48048 100644
--- a/node_modules/@redux-devtools/remote/lib/cjs/devTools.js
+++ b/node_modules/@redux-devtools/remote/lib/cjs/devTools.js
@@ -49,13 +49,13 @@ class DevToolsEnhancer {
     });
     (0, _defineProperty2.default)(this, "handleMessages", message => {
       if (message.type === 'IMPORT' || message.type === 'SYNC' &&
-      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
-      this.socket.id &&
-      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
-      message.id !== this.socket.id) {
+          // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+          this.socket.id &&
+          // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+          message.id !== this.socket.id) {
         this.store.liftedStore.dispatch({
           type: 'IMPORT_STATE',
-          // eslint-disable-next-line @typescript-eslint/ban-types
+// eslint-disable-next-line @typescript-eslint/ban-types
           nextLiftedState: (0, _jsan.parse)(message.state)
         });
       } else if (message.type === 'UPDATE') {
@@ -74,7 +74,7 @@ class DevToolsEnhancer {
       }
     });
     (0, _defineProperty2.default)(this, "sendError", errorAction => {
-      // Prevent flooding
+// Prevent flooding
       if (errorAction.message && errorAction.message === this.lastErrorMsg) return;
       this.lastErrorMsg = errorAction.message;
       async(() => {
@@ -96,10 +96,14 @@ class DevToolsEnhancer {
       if (this.started || this.socket && this.socket.getState() === this.socket.CONNECTING) return;
       this.socket = _socketclusterClient.default.create(this.socketOptions);
       void (async () => {
-        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
-        for await (const data of this.socket.listener('error')) {
-          // if we've already had this error before, increment it's counter, otherwise assign it '1' since we've had the error once.
-          // eslint-disable-next-line no-prototype-builtins,@typescript-eslint/no-unsafe-argument
+        let consumer = this.socket.listener('error').createConsumer();
+        while (true) {
+          const {value: data, done} = await consumer.next();
+          if (done) break;
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// for await (const data of this.socket.listener('error')) {
+// if we've already had this error before, increment it's counter, otherwise assign it '1' since we've had the error once.
+// eslint-disable-next-line no-prototype-builtins,@typescript-eslint/no-unsafe-argument
           this.errorCounts[data.error.name] = this.errorCounts.hasOwnProperty(data.error.name) ? this.errorCounts[data.error.name] + 1 : 1;
           if (this.suppressConnectErrors) {
             if (this.errorCounts[data.error.name] === 1) {
@@ -112,16 +116,24 @@ class DevToolsEnhancer {
         }
       })();
       void (async () => {
-        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
-        for await (const data of this.socket.listener('connect')) {
+        let consumer = this.socket.listener('connect').createConsumer();
+        while (true) {
+          const {value: data, done} = await consumer.next();
+          if (done) break;
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// for await (const data of this.socket.listener('connect')) {
           console.log('connected to remotedev-server');
           this.errorCounts = {}; // clear the errorCounts object, so that we'll log any new errors in the event of a disconnect
           this.login();
         }
       })();
       void (async () => {
-        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
-        for await (const data of this.socket.listener('disconnect')) {
+        let consumer = this.socket.listener('disconnect').createConsumer();
+        while (true) {
+          const {value: data, done} = await consumer.next();
+          if (done) break;
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// for await (const data of this.socket.listener('disconnect')) {
           this.stop(true);
         }
       })();
@@ -162,7 +174,7 @@ class DevToolsEnhancer {
             shouldHotReload: options.shouldHotReload,
             shouldRecordChanges: options.shouldRecordChanges,
             shouldStartLocked: options.shouldStartLocked,
-            pauseActionType: options.pauseActionType || '@@PAUSED'
+            pauseActionType: options.pauseActionType || '@@Paused'
           })(reducer, initialState);
           if (realtime) _this.start();
           _this.store.subscribe(() => {
@@ -182,7 +194,7 @@ class DevToolsEnhancer {
   relay(type, state, action, nextActionId) {
     const message = {
       type,
-      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
       id: this.socket.id,
       name: this.instanceName,
       instanceId: this.appInstanceId
@@ -197,7 +209,7 @@ class DevToolsEnhancer {
     } else if (action) {
       message.action = action;
     }
-    // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
     void this.socket.transmit(this.socket.id ? 'log' : 'log-noid', message);
   }
   dispatchRemotely(action) {
@@ -234,7 +246,11 @@ class DevToolsEnhancer {
     this.sendOn = str2array(options.sendOn);
     this.sendOnError = options.sendOnError;
     if (this.sendOn || this.sendOnError) {
-      this.sendTo = options.sendTo || `${this.socketOptions.secure ? 'https' : 'http'}://${this.socketOptions.hostname}:${this.socketOptions.port}`;
+      this.sendTo =
+          options.sendTo ||
+          `${this.socketOptions.secure ? 'https' : 'http'}://${
+              this.socketOptions.hostname
+          }:${this.socketOptions.port}`;
       this.instanceId = options.id;
     }
     if (this.sendOnError === 1) (0, _utils.catchErrors)(this.sendError);
@@ -245,11 +261,15 @@ class DevToolsEnhancer {
   login() {
     void (async () => {
       try {
-        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
         const channelName = await this.socket.invoke('login', 'master');
         this.channel = channelName;
-        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
-        for await (const data of this.socket.subscribe(channelName)) {
+        let consumer = this.socket.subscribe(channelName).createConsumer();
+        while (true) {
+          const {value: data, done} = await consumer.next();
+          if (done) break;
+// eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion
+// for await (const data of this.socket.subscribe(channelName)) {
           this.handleMessages(data);
         }
       } catch (error) {
@@ -259,7 +279,7 @@ class DevToolsEnhancer {
     this.started = true;
     this.relay('START');
   }
-  // eslint-disable-next-line @typescript-eslint/ban-types
+// eslint-disable-next-line @typescript-eslint/ban-types
   handleChange(state, liftedState, maxAge) {
     if (this.checkForReducerErrors(liftedState)) return;
     if (this.lastAction === 'PERFORM_ACTION') {