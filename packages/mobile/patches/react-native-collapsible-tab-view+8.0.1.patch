diff --git a/node_modules/react-native-collapsible-tab-view/src/Container.tsx b/node_modules/react-native-collapsible-tab-view/src/Container.tsx
index e782b90..8054faa 100644
--- a/node_modules/react-native-collapsible-tab-view/src/Container.tsx
+++ b/node_modules/react-native-collapsible-tab-view/src/Container.tsx
@@ -145,7 +145,7 @@ export const Container = React.memo(
         }, [headerHeight, minHeaderHeight])
 
       const indexDecimal: ContextType['indexDecimal'] = useSharedValue(
-        index.value
+        initialIndex
       )
 
       const afterRender = useSharedValue(0)
@@ -330,8 +330,10 @@ export const Container = React.memo(
         ref,
         () => ({
           setIndex: (index) => {
-            const name = tabNames.value[index]
-            onTabPress(name)
+            runOnUI(() => {
+              const name = tabNames.value[index]
+              runOnJS(onTabPress)(name)
+            })()
             return true
           },
           jumpToTab: (name) => {
@@ -339,10 +341,12 @@ export const Container = React.memo(
             return true
           },
           getFocusedTab: () => {
-            return tabNames.value[index.value]
+            // Use current state instead of accessing .value during render
+            return tabNamesArray[initialIndex] || ''
           },
           getCurrentIndex: () => {
-            return index.value
+            // Use current state instead of accessing .value during render
+            return initialIndex
           },
         }),
         // eslint-disable-next-line react-hooks/exhaustive-deps
diff --git a/node_modules/react-native-collapsible-tab-view/src/hooks.tsx b/node_modules/react-native-collapsible-tab-view/src/hooks.tsx
index ba7dffa..5b9b9b7 100644
--- a/node_modules/react-native-collapsible-tab-view/src/hooks.tsx
+++ b/node_modules/react-native-collapsible-tab-view/src/hooks.tsx
@@ -579,21 +579,28 @@ export function useAfterMountEffect(
 export function useConvertAnimatedToValue<T>(
   animatedValue: Animated.SharedValue<T>
 ) {
-  const [value, setValue] = useState<T>(animatedValue.value)
+  const [value, setValue] = useState<T | undefined>(undefined)
 
   useAnimatedReaction(
     () => {
       return animatedValue.value
     },
     (animValue) => {
-      if (animValue !== value) {
-        runOnJS(setValue)(animValue)
-      }
+      runOnJS(setValue)(animValue)
     },
-    [value]
+    []
   )
 
-  return value || 0
+  // Initialize with current value on first render
+  useEffect(() => {
+    if (value === undefined) {
+      runOnUI(() => {
+        runOnJS(setValue)(animatedValue.value)
+      })()
+    }
+  }, [animatedValue, value])
+
+  return value
 }
 
 export interface HeaderMeasurements {
diff --git a/node_modules/react-native-collapsible-tab-view/src/types.ts b/node_modules/react-native-collapsible-tab-view/src/types.ts
index 00fbafc..983b04b 100644
--- a/node_modules/react-native-collapsible-tab-view/src/types.ts
+++ b/node_modules/react-native-collapsible-tab-view/src/types.ts
@@ -157,6 +157,8 @@ export type ContextType<T extends TabName = TabName> = {
    * Name of the current focused tab.
    */
   focusedTab: SharedValue<T>
+
+  initialFocusedTab: T
   /**
    * DiffClamp value. It's the current visible header height if
    * `diffClampEnabled={true}`.
