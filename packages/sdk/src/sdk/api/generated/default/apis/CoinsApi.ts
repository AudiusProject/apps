/* tslint:disable */
// @ts-nocheck
/* eslint-disable */
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetCoin200Response,
  GetCoinMembers200Response,
  GetCoins200Response,
} from '../models';
import {
    GetCoin200ResponseFromJSON,
    GetCoin200ResponseToJSON,
    GetCoinMembers200ResponseFromJSON,
    GetCoinMembers200ResponseToJSON,
    GetCoins200ResponseFromJSON,
    GetCoins200ResponseToJSON,
} from '../models';

export interface GetCoinRequest {
    mint: string;
}

export interface GetCoinMembersRequest {
    mint: string;
    offset?: number;
    limit?: number;
    sortDirection?: GetCoinMembersSortDirectionEnum;
}

export interface GetCoinsRequest {
    mint?: Array<string>;
    ownerId?: Array<string>;
    ticker?: Array<string>;
    offset?: number;
    limit?: number;
}

/**
 * 
 */
export class CoinsApi extends runtime.BaseAPI {

    /**
     * @hidden
     * Gets information about a specific coin by its mint address
     */
    async getCoinRaw(params: GetCoinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCoin200Response>> {
        if (params.mint === null || params.mint === undefined) {
            throw new runtime.RequiredError('mint','Required parameter params.mint was null or undefined when calling getCoin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins/{mint}`.replace(`{${"mint"}}`, encodeURIComponent(String(params.mint))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCoin200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about a specific coin by its mint address
     */
    async getCoin(params: GetCoinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCoin200Response> {
        const response = await this.getCoinRaw(params, initOverrides);
        return await response.value();
    }

    /**
     * @hidden
     * Gets a list of Audius users with a non-zero balance of a specific coin
     */
    async getCoinMembersRaw(params: GetCoinMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCoinMembers200Response>> {
        if (params.mint === null || params.mint === undefined) {
            throw new runtime.RequiredError('mint','Required parameter params.mint was null or undefined when calling getCoinMembers.');
        }

        const queryParameters: any = {};

        if (params.offset !== undefined) {
            queryParameters['offset'] = params.offset;
        }

        if (params.limit !== undefined) {
            queryParameters['limit'] = params.limit;
        }

        if (params.sortDirection !== undefined) {
            queryParameters['sort_direction'] = params.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins/{mint}/members`.replace(`{${"mint"}}`, encodeURIComponent(String(params.mint))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCoinMembers200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of Audius users with a non-zero balance of a specific coin
     */
    async getCoinMembers(params: GetCoinMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCoinMembers200Response> {
        const response = await this.getCoinMembersRaw(params, initOverrides);
        return await response.value();
    }

    /**
     * @hidden
     * Gets information about coins
     */
    async getCoinsRaw(params: GetCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCoins200Response>> {
        const queryParameters: any = {};

        if (params.mint) {
            queryParameters['mint'] = params.mint;
        }

        if (params.ownerId) {
            queryParameters['owner_id'] = params.ownerId;
        }

        if (params.ticker) {
            queryParameters['ticker'] = params.ticker;
        }

        if (params.offset !== undefined) {
            queryParameters['offset'] = params.offset;
        }

        if (params.limit !== undefined) {
            queryParameters['limit'] = params.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCoins200ResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about coins
     */
    async getCoins(params: GetCoinsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCoins200Response> {
        const response = await this.getCoinsRaw(params, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCoinMembersSortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetCoinMembersSortDirectionEnum = typeof GetCoinMembersSortDirectionEnum[keyof typeof GetCoinMembersSortDirectionEnum];
