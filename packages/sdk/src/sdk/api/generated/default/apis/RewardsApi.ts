/* tslint:disable */
// @ts-nocheck
/* eslint-disable */
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ClaimRewardsRequest,
  ClaimRewardsResponse,
} from '../models';
import {
    ClaimRewardsRequestFromJSON,
    ClaimRewardsRequestToJSON,
    ClaimRewardsResponseFromJSON,
    ClaimRewardsResponseToJSON,
} from '../models';

export interface ClaimRewardsOperationRequest {
    claimRewardsRequest: ClaimRewardsRequest;
}

/**
 * 
 */
export class RewardsApi extends runtime.BaseAPI {

    /**
     * @hidden
     * Claims all the filtered undisbursed rewards for a user
     */
    async claimRewardsRaw(params: ClaimRewardsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ClaimRewardsResponse>> {
        if (params.claimRewardsRequest === null || params.claimRewardsRequest === undefined) {
            throw new runtime.RequiredError('claimRewardsRequest','Required parameter params.claimRewardsRequest was null or undefined when calling claimRewards.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rewards/claim`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ClaimRewardsRequestToJSON(params.claimRewardsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ClaimRewardsResponseFromJSON(jsonValue));
    }

    /**
     * Claims all the filtered undisbursed rewards for a user
     */
    async claimRewards(body: ClaimRewardsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ClaimRewardsResponse> {
        const response = await this.claimRewardsRaw({ claimRewardsRequest: body }, initOverrides);
        return await response.value();
    }


}
