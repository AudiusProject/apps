/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UndisbursedChallenge
 */
export interface UndisbursedChallenge {
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    challengeId: string;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    specifier: string;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    amount: string;
    /**
     * 
     * @type {number}
     * @memberof UndisbursedChallenge
     */
    completedBlocknumber: number;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    handle: string;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    wallet: string;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    createdAt: string;
    /**
     * 
     * @type {string}
     * @memberof UndisbursedChallenge
     */
    completedAt: string;
    /**
     * 
     * @type {number}
     * @memberof UndisbursedChallenge
     */
    cooldownDays?: number;
}

/**
 * Check if a given object implements the UndisbursedChallenge interface.
 */
export function instanceOfUndisbursedChallenge(value: object): value is UndisbursedChallenge {
    let isInstance = true;
    isInstance = isInstance && "challengeId" in value && value["challengeId"] !== undefined;
    isInstance = isInstance && "userId" in value && value["userId"] !== undefined;
    isInstance = isInstance && "specifier" in value && value["specifier"] !== undefined;
    isInstance = isInstance && "amount" in value && value["amount"] !== undefined;
    isInstance = isInstance && "completedBlocknumber" in value && value["completedBlocknumber"] !== undefined;
    isInstance = isInstance && "handle" in value && value["handle"] !== undefined;
    isInstance = isInstance && "wallet" in value && value["wallet"] !== undefined;
    isInstance = isInstance && "createdAt" in value && value["createdAt"] !== undefined;
    isInstance = isInstance && "completedAt" in value && value["completedAt"] !== undefined;

    return isInstance;
}

export function UndisbursedChallengeFromJSON(json: any): UndisbursedChallenge {
    return UndisbursedChallengeFromJSONTyped(json, false);
}

export function UndisbursedChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): UndisbursedChallenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'challengeId': json['challenge_id'],
        'userId': json['user_id'],
        'specifier': json['specifier'],
        'amount': json['amount'],
        'completedBlocknumber': json['completed_blocknumber'],
        'handle': json['handle'],
        'wallet': json['wallet'],
        'createdAt': json['created_at'],
        'completedAt': json['completed_at'],
        'cooldownDays': !exists(json, 'cooldown_days') ? undefined : json['cooldown_days'],
    };
}

export function UndisbursedChallengeToJSON(value?: UndisbursedChallenge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'challenge_id': value.challengeId,
        'user_id': value.userId,
        'specifier': value.specifier,
        'amount': value.amount,
        'completed_blocknumber': value.completedBlocknumber,
        'handle': value.handle,
        'wallet': value.wallet,
        'created_at': value.createdAt,
        'completed_at': value.completedAt,
        'cooldown_days': value.cooldownDays,
    };
}

