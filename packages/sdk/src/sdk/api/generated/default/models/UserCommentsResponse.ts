/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * Audius V1 API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Comment } from './Comment';
import {
    CommentFromJSON,
    CommentFromJSONTyped,
    CommentToJSON,
} from './Comment';
import type { Related } from './Related';
import {
    RelatedFromJSON,
    RelatedFromJSONTyped,
    RelatedToJSON,
} from './Related';

/**
 * 
 * @export
 * @interface UserCommentsResponse
 */
export interface UserCommentsResponse {
    /**
     * 
     * @type {Array<Comment>}
     * @memberof UserCommentsResponse
     */
    data?: Array<Comment>;
    /**
     * 
     * @type {Related}
     * @memberof UserCommentsResponse
     */
    related?: Related;
}

/**
 * Check if a given object implements the UserCommentsResponse interface.
 */
export function instanceOfUserCommentsResponse(value: object): value is UserCommentsResponse {
    let isInstance = true;

    return isInstance;
}

export function UserCommentsResponseFromJSON(json: any): UserCommentsResponse {
    return UserCommentsResponseFromJSONTyped(json, false);
}

export function UserCommentsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserCommentsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'data': !exists(json, 'data') ? undefined : ((json['data'] as Array<any>).map(CommentFromJSON)),
        'related': !exists(json, 'related') ? undefined : RelatedFromJSON(json['related']),
    };
}

export function UserCommentsResponseToJSON(value?: UserCommentsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'data': value.data === undefined ? undefined : ((value.data as Array<any>).map(CommentToJSON)),
        'related': RelatedToJSON(value.related),
    };
}

