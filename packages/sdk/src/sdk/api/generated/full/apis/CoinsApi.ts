/* tslint:disable */
// @ts-nocheck
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CoinResponse,
  CoinsResponse,
  CreateCoinRequest,
  CreateCoinResponse,
  UpdateCoinRequest,
  UpdateCoinResponse,
} from '../models';
import {
    CoinResponseFromJSON,
    CoinResponseToJSON,
    CoinsResponseFromJSON,
    CoinsResponseToJSON,
    CreateCoinRequestFromJSON,
    CreateCoinRequestToJSON,
    CreateCoinResponseFromJSON,
    CreateCoinResponseToJSON,
    UpdateCoinRequestFromJSON,
    UpdateCoinRequestToJSON,
    UpdateCoinResponseFromJSON,
    UpdateCoinResponseToJSON,
} from '../models';

export interface CreateCoinOperationRequest {
    userId: string;
    createCoinRequest: CreateCoinRequest;
}

export interface GetCoinRequest {
    mint: string;
}

export interface GetCoinByTickerRequest {
    ticker: string;
}

export interface GetCoinsRequest {
    ticker?: Array<string>;
    mint?: Array<string>;
    ownerId?: Array<string>;
    limit?: number;
    offset?: number;
    query?: string;
    sortMethod?: GetCoinsSortMethodEnum;
    sortDirection?: GetCoinsSortDirectionEnum;
}

export interface UpdateCoinOperationRequest {
    mint: string;
    userId: string;
    updateCoinRequest: UpdateCoinRequest;
}

/**
 * 
 */
export class CoinsApi extends runtime.BaseAPI {

    /**
     * @hidden
     * Creates a new artist coin
     */
    async createCoinRaw(params: CreateCoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCoinResponse>> {
        if (params.userId === null || params.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter params.userId was null or undefined when calling createCoin.');
        }

        if (params.createCoinRequest === null || params.createCoinRequest === undefined) {
            throw new runtime.RequiredError('createCoinRequest','Required parameter params.createCoinRequest was null or undefined when calling createCoin.');
        }

        const queryParameters: any = {};

        if (params.userId !== undefined) {
            queryParameters['user_id'] = params.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCoinRequestToJSON(params.createCoinRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCoinResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new artist coin
     */
    async createCoin(params: CreateCoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCoinResponse> {
        const response = await this.createCoinRaw(params, initOverrides);
        return await response.value();
    }

    /**
     * @hidden
     * Gets information about a specific coin by its mint address
     */
    async getCoinRaw(params: GetCoinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinResponse>> {
        if (params.mint === null || params.mint === undefined) {
            throw new runtime.RequiredError('mint','Required parameter params.mint was null or undefined when calling getCoin.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins/{mint}`.replace(`{${"mint"}}`, encodeURIComponent(String(params.mint))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about a specific coin by its mint address
     */
    async getCoin(params: GetCoinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinResponse> {
        const response = await this.getCoinRaw(params, initOverrides);
        return await response.value();
    }

    /**
     * @hidden
     * Gets information about a specific coin by its ticker
     */
    async getCoinByTickerRaw(params: GetCoinByTickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinResponse>> {
        if (params.ticker === null || params.ticker === undefined) {
            throw new runtime.RequiredError('ticker','Required parameter params.ticker was null or undefined when calling getCoinByTicker.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins/ticker/{ticker}`.replace(`{${"ticker"}}`, encodeURIComponent(String(params.ticker))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinResponseFromJSON(jsonValue));
    }

    /**
     * Gets information about a specific coin by its ticker
     */
    async getCoinByTicker(params: GetCoinByTickerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinResponse> {
        const response = await this.getCoinByTickerRaw(params, initOverrides);
        return await response.value();
    }

    /**
     * @hidden
     * Gets a list of coins with optional filtering
     */
    async getCoinsRaw(params: GetCoinsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CoinsResponse>> {
        const queryParameters: any = {};

        if (params.ticker) {
            queryParameters['ticker'] = params.ticker;
        }

        if (params.mint) {
            queryParameters['mint'] = params.mint;
        }

        if (params.ownerId) {
            queryParameters['owner_id'] = params.ownerId;
        }

        if (params.limit !== undefined) {
            queryParameters['limit'] = params.limit;
        }

        if (params.offset !== undefined) {
            queryParameters['offset'] = params.offset;
        }

        if (params.query !== undefined) {
            queryParameters['query'] = params.query;
        }

        if (params.sortMethod !== undefined) {
            queryParameters['sort_method'] = params.sortMethod;
        }

        if (params.sortDirection !== undefined) {
            queryParameters['sort_direction'] = params.sortDirection;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/coins`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CoinsResponseFromJSON(jsonValue));
    }

    /**
     * Gets a list of coins with optional filtering
     */
    async getCoins(params: GetCoinsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CoinsResponse> {
        const response = await this.getCoinsRaw(params, initOverrides);
        return await response.value();
    }

    /**
     * @hidden
     * Updates information about a specific coin by its mint address
     */
    async updateCoinRaw(params: UpdateCoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UpdateCoinResponse>> {
        if (params.mint === null || params.mint === undefined) {
            throw new runtime.RequiredError('mint','Required parameter params.mint was null or undefined when calling updateCoin.');
        }

        if (params.userId === null || params.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter params.userId was null or undefined when calling updateCoin.');
        }

        if (params.updateCoinRequest === null || params.updateCoinRequest === undefined) {
            throw new runtime.RequiredError('updateCoinRequest','Required parameter params.updateCoinRequest was null or undefined when calling updateCoin.');
        }

        const queryParameters: any = {};

        if (params.userId !== undefined) {
            queryParameters['user_id'] = params.userId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/coins/{mint}`.replace(`{${"mint"}}`, encodeURIComponent(String(params.mint))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateCoinRequestToJSON(params.updateCoinRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateCoinResponseFromJSON(jsonValue));
    }

    /**
     * Updates information about a specific coin by its mint address
     */
    async updateCoin(params: UpdateCoinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UpdateCoinResponse> {
        const response = await this.updateCoinRaw(params, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetCoinsSortMethodEnum = {
    MarketCap: 'market_cap',
    Price: 'price',
    Volume: 'volume',
    CreatedAt: 'created_at',
    Holder: 'holder'
} as const;
export type GetCoinsSortMethodEnum = typeof GetCoinsSortMethodEnum[keyof typeof GetCoinsSortMethodEnum];
/**
 * @export
 */
export const GetCoinsSortDirectionEnum = {
    Asc: 'asc',
    Desc: 'desc'
} as const;
export type GetCoinsSortDirectionEnum = typeof GetCoinsSortDirectionEnum[keyof typeof GetCoinsSortDirectionEnum];
