/* tslint:disable */
// @ts-nocheck
/* eslint-disable */
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BestSellingFullResponse,
} from '../models';
import {
    BestSellingFullResponseFromJSON,
    BestSellingFullResponseToJSON,
} from '../models';

export interface GetFullBestSellingRequest {
    offset?: number;
    limit?: number;
    userId?: string;
    type?: GetFullBestSellingTypeEnum;
}

/**
 * 
 */
export class ExploreApi extends runtime.BaseAPI {

    /**
     * @hidden
     * Get best selling tracks and/or albums with related entities
     * Get best selling tracks and playlists with related entities
     */
    async getFullBestSellingRaw(params: GetFullBestSellingRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BestSellingFullResponse>> {
        const queryParameters: any = {};

        if (params.offset !== undefined) {
            queryParameters['offset'] = params.offset;
        }

        if (params.limit !== undefined) {
            queryParameters['limit'] = params.limit;
        }

        if (params.userId !== undefined) {
            queryParameters['user_id'] = params.userId;
        }

        if (params.type !== undefined) {
            queryParameters['type'] = params.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/explore/best-selling`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BestSellingFullResponseFromJSON(jsonValue));
    }

    /**
     * Get best selling tracks and/or albums with related entities
     * Get best selling tracks and playlists with related entities
     */
    async getFullBestSelling(params: GetFullBestSellingRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BestSellingFullResponse> {
        const response = await this.getFullBestSellingRaw(params, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetFullBestSellingTypeEnum = {
    All: 'all',
    Track: 'track',
    Album: 'album'
} as const;
export type GetFullBestSellingTypeEnum = typeof GetFullBestSellingTypeEnum[keyof typeof GetFullBestSellingTypeEnum];
