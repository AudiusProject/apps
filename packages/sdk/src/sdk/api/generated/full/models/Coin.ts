/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A coin object
 * @export
 * @interface Coin
 */
export interface Coin {
    /**
     * The mint address of the coin
     * @type {string}
     * @memberof Coin
     */
    mint: string;
    /**
     * The coin symbol/ticker
     * @type {string}
     * @memberof Coin
     */
    ticker: string;
    /**
     * The number of decimals for the coin
     * @type {number}
     * @memberof Coin
     */
    decimals: number;
    /**
     * The coin name
     * @type {string}
     * @memberof Coin
     */
    name: string;
    /**
     * The URI for the coin's logo image
     * @type {string}
     * @memberof Coin
     */
    logoUri?: string;
    /**
     * The description of the coin
     * @type {string}
     * @memberof Coin
     */
    description?: string;
    /**
     * X (Twitter) handle for the coin
     * @type {string}
     * @memberof Coin
     */
    xHandle?: string;
    /**
     * Instagram handle for the coin
     * @type {string}
     * @memberof Coin
     */
    instagramHandle?: string;
    /**
     * TikTok handle for the coin
     * @type {string}
     * @memberof Coin
     */
    tiktokHandle?: string;
    /**
     * Website URL for the coin
     * @type {string}
     * @memberof Coin
     */
    website?: string;
    /**
     * Whether the coin has a Discord server
     * @type {boolean}
     * @memberof Coin
     */
    hasDiscord?: boolean;
    /**
     * The date and time when the coin was created
     * @type {Date}
     * @memberof Coin
     */
    createdAt: Date;
    /**
     * The date and time when the coin was last updated
     * @type {Date}
     * @memberof Coin
     */
    updatedAt?: Date;
    /**
     * The user ID of the coin owner
     * @type {string}
     * @memberof Coin
     */
    ownerId?: string;
}

/**
 * Check if a given object implements the Coin interface.
 */
export function instanceOfCoin(value: object): value is Coin {
    let isInstance = true;
    isInstance = isInstance && "mint" in value && value["mint"] !== undefined;
    isInstance = isInstance && "ticker" in value && value["ticker"] !== undefined;
    isInstance = isInstance && "decimals" in value && value["decimals"] !== undefined;
    isInstance = isInstance && "name" in value && value["name"] !== undefined;
    isInstance = isInstance && "createdAt" in value && value["createdAt"] !== undefined;

    return isInstance;
}

export function CoinFromJSON(json: any): Coin {
    return CoinFromJSONTyped(json, false);
}

export function CoinFromJSONTyped(json: any, ignoreDiscriminator: boolean): Coin {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'mint': json['mint'],
        'ticker': json['ticker'],
        'decimals': json['decimals'],
        'name': json['name'],
        'logoUri': !exists(json, 'logo_uri') ? undefined : json['logo_uri'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'xHandle': !exists(json, 'x_handle') ? undefined : json['x_handle'],
        'instagramHandle': !exists(json, 'instagram_handle') ? undefined : json['instagram_handle'],
        'tiktokHandle': !exists(json, 'tiktok_handle') ? undefined : json['tiktok_handle'],
        'website': !exists(json, 'website') ? undefined : json['website'],
        'hasDiscord': !exists(json, 'has_discord') ? undefined : json['has_discord'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'ownerId': !exists(json, 'owner_id') ? undefined : json['owner_id'],
    };
}

export function CoinToJSON(value?: Coin | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'mint': value.mint,
        'ticker': value.ticker,
        'decimals': value.decimals,
        'name': value.name,
        'logo_uri': value.logoUri,
        'description': value.description,
        'x_handle': value.xHandle,
        'instagram_handle': value.instagramHandle,
        'tiktok_handle': value.tiktokHandle,
        'website': value.website,
        'has_discord': value.hasDiscord,
        'created_at': (value.createdAt.toISOString()),
        'updated_at': value.updatedAt === undefined ? undefined : (value.updatedAt.toISOString()),
        'owner_id': value.ownerId,
    };
}

