/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TrackFull } from './TrackFull';
import {
    TrackFullFromJSON,
    TrackFullFromJSONTyped,
    TrackFullToJSON,
} from './TrackFull';
import type { UserFull } from './UserFull';
import {
    UserFullFromJSON,
    UserFullFromJSONTyped,
    UserFullToJSON,
} from './UserFull';

/**
 * 
 * @export
 * @interface Related
 */
export interface Related {
    /**
     * 
     * @type {Array<UserFull>}
     * @memberof Related
     */
    users?: Array<UserFull>;
    /**
     * 
     * @type {Array<TrackFull>}
     * @memberof Related
     */
    tracks?: Array<TrackFull>;
}

/**
 * Check if a given object implements the Related interface.
 */
export function instanceOfRelated(value: object): value is Related {
    let isInstance = true;

    return isInstance;
}

export function RelatedFromJSON(json: any): Related {
    return RelatedFromJSONTyped(json, false);
}

export function RelatedFromJSONTyped(json: any, ignoreDiscriminator: boolean): Related {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'users': !exists(json, 'users') ? undefined : ((json['users'] as Array<any>).map(UserFullFromJSON)),
        'tracks': !exists(json, 'tracks') ? undefined : ((json['tracks'] as Array<any>).map(TrackFullFromJSON)),
    };
}

export function RelatedToJSON(value?: Related | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'users': value.users === undefined ? undefined : ((value.users as Array<any>).map(UserFullToJSON)),
        'tracks': value.tracks === undefined ? undefined : ((value.tracks as Array<any>).map(TrackFullToJSON)),
    };
}

