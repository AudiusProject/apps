/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TastemakerNotificationActionData
 */
export interface TastemakerNotificationActionData {
    /**
     * 
     * @type {string}
     * @memberof TastemakerNotificationActionData
     */
    tastemakerItemOwnerId: string;
    /**
     * 
     * @type {string}
     * @memberof TastemakerNotificationActionData
     */
    tastemakerItemId: string;
    /**
     * 
     * @type {string}
     * @memberof TastemakerNotificationActionData
     */
    action: string;
    /**
     * 
     * @type {string}
     * @memberof TastemakerNotificationActionData
     */
    tastemakerItemType: string;
    /**
     * 
     * @type {string}
     * @memberof TastemakerNotificationActionData
     */
    tastemakerUserId: string;
}

/**
 * Check if a given object implements the TastemakerNotificationActionData interface.
 */
export function instanceOfTastemakerNotificationActionData(value: object): value is TastemakerNotificationActionData {
    let isInstance = true;
    isInstance = isInstance && "tastemakerItemOwnerId" in value && value["tastemakerItemOwnerId"] !== undefined;
    isInstance = isInstance && "tastemakerItemId" in value && value["tastemakerItemId"] !== undefined;
    isInstance = isInstance && "action" in value && value["action"] !== undefined;
    isInstance = isInstance && "tastemakerItemType" in value && value["tastemakerItemType"] !== undefined;
    isInstance = isInstance && "tastemakerUserId" in value && value["tastemakerUserId"] !== undefined;

    return isInstance;
}

export function TastemakerNotificationActionDataFromJSON(json: any): TastemakerNotificationActionData {
    return TastemakerNotificationActionDataFromJSONTyped(json, false);
}

export function TastemakerNotificationActionDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): TastemakerNotificationActionData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'tastemakerItemOwnerId': json['tastemaker_item_owner_id'],
        'tastemakerItemId': json['tastemaker_item_id'],
        'action': json['action'],
        'tastemakerItemType': json['tastemaker_item_type'],
        'tastemakerUserId': json['tastemaker_user_id'],
    };
}

export function TastemakerNotificationActionDataToJSON(value?: TastemakerNotificationActionData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'tastemaker_item_owner_id': value.tastemakerItemOwnerId,
        'tastemaker_item_id': value.tastemakerItemId,
        'action': value.action,
        'tastemaker_item_type': value.tastemakerItemType,
        'tastemaker_user_id': value.tastemakerUserId,
    };
}

