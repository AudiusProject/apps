import { readFileSync } from 'fs'
import path from 'path'

import { ClaimableTokensProgram } from '@audius/spl'
import { TOKEN_2022_PROGRAM_ID, TOKEN_PROGRAM_ID } from '@solana/spl-token'
import {
  AddressLookupTableProgram,
  Keypair,
  PublicKey,
  SystemProgram,
  SYSVAR_INSTRUCTIONS_PUBKEY,
  SYSVAR_RENT_PUBKEY,
  TransactionMessage,
  VersionedTransaction
} from '@solana/web3.js'
import { program } from 'commander'
import untildify from 'untildify'

import { developmentConfig } from '../config/development'
import { productionConfig } from '../config/production'
import { stagingConfig } from '../config/staging'
import { sdk as audiusSdk } from '../sdk'
import { Logger } from '../services'
import type { SdkConfig } from '../types'



/**
 * Get the proper config for the given environment
 */
const getConfig = (environment: SdkConfig['environment']) => {
  const config =
    environment === 'development'
      ? developmentConfig
      : environment === 'staging'
      ? stagingConfig
      : productionConfig
  return config
}

/**
 * Creates the swap lookup table for the given environment with the given keypair as
 * both payer and authority.
 *
 * After running, be sure to update `generateServicesConfig.ts` with the address
 * of the lookup table.
 */
const createLookupTable = async ({
  environment,
  keypair
}: {
  environment: SdkConfig['environment']
  keypair: string
}) => {
  console.info(
    'Creating swap lookup table for',
    environment,
    'using keypair',
    keypair
  )
  const wallet = Keypair.fromSecretKey(
    Uint8Array.from(
      JSON.parse(
        readFileSync(
          path.resolve(untildify(keypair ?? '~/.config/solana/id.json')),
          { encoding: 'utf-8' }
        )
      )
    )
  )
  const sdk = audiusSdk({
    appName: 'generate-swap-lookup-table',
    environment,
    services: {
      logger: new Logger()
    }
  })
  const config = getConfig(environment)
  const connection = sdk.services.solanaClient.connection

  // Token mints
  const usdcMint = new PublicKey(config.solana.usdcTokenMint)
  const wAudioMint = new PublicKey(config.solana.wAudioTokenMint)
  const bonkMint = new PublicKey(config.solana.bonkTokenMint)

  // Claimable tokens program and authorities
  const claimableTokensProgramId = new PublicKey(
    config.solana.claimableTokensProgramAddress
  )
  const usdcAuthority = ClaimableTokensProgram.deriveAuthority({
    programId: claimableTokensProgramId,
    mint: usdcMint
  })
  const wAudioAuthority = ClaimableTokensProgram.deriveAuthority({
    programId: claimableTokensProgramId,
    mint: wAudioMint
  })
  const bonkAuthority = ClaimableTokensProgram.deriveAuthority({
    programId: claimableTokensProgramId,
    mint: bonkMint
  })

  const addresses = [
    SystemProgram.programId,
    SYSVAR_RENT_PUBKEY,
    SYSVAR_INSTRUCTIONS_PUBKEY,
    TOKEN_PROGRAM_ID,
    TOKEN_2022_PROGRAM_ID,
    claimableTokensProgramId,
    // Token mints
    usdcMint,
    wAudioMint,
    bonkMint,
    // Claimable token authorities
    usdcAuthority,
    wAudioAuthority,
    bonkAuthority
  ]

  const payer = wallet.publicKey
  const authority = wallet.publicKey

  const slot = await connection.getSlot()
  const { blockhash, lastValidBlockHeight } =
    await connection.getLatestBlockhash()
  const [createLookupTableInstruction, lookupTableAddress] =
    AddressLookupTableProgram.createLookupTable({
      authority,
      payer,
      recentSlot: slot - 1
    })
  const extendInstruction = AddressLookupTableProgram.extendLookupTable({
    lookupTable: lookupTableAddress,
    payer,
    authority,
    addresses
  })
  const transaction = new VersionedTransaction(
    new TransactionMessage({
      payerKey: payer,
      recentBlockhash: blockhash,
      instructions: [createLookupTableInstruction, extendInstruction]
    }).compileToV0Message()
  )
  transaction.sign([wallet])
  console.info(
    'Creating Swap Lookup Table',
    lookupTableAddress.toBase58(),
    'with swap accounts...'
  )
  const signature = await connection.sendTransaction(transaction)
  console.info('Confirming...')
  await connection.confirmTransaction({
    signature,
    blockhash,
    lastValidBlockHeight
  })
  console.info('Confirmed.')

  console.info('Swap lookup table created at', lookupTableAddress.toBase58())
}

/**
 * Updates the swap lookup table for the given environment using the keypair as both
 * the payer and the authority.
 *
 * The lookup table address is stored in the config generated by
 * `generateServicesConfig.ts`
 */
const updateLookupTable = async () => {
  console.warn('Update functionality not yet implemented for swap lookup table.')
  console.warn('First create a swap lookup table, then add its address to the config.')
  process.exit(1)
}

program
  .command('create')
  .description('Creates the swap lookup table for the specified environment.')
  .option(
    '-k,--keypair <pathToKeypairFile>',
    'Path to the keypair file to use as both payer and authority (default: ~/.config/solana/id.json',
    '~/.config/solana/id.json'
  )
  .option(
    '-e,--environment <environment>',
    'The environment of the lookup table',
    'production'
  )
  .action(async (args) => {
    await createLookupTable(args)
    process.exit(0)
  })

program
  .command('update')
  .description('Update the swap lookup table for the specified environment.')
  .option(
    '-k,--keypair <pathToKeypairFile>',
    'Path to the keypair file to use as both payer and authority (default: ~/.config/solana/id.json',
    '~/.config/solana/id.json'
  )
  .option(
    '-e,--environment <environment>',
    'The environment of the lookup table',
    'production'
  )
  .action(async () => {
    await updateLookupTable()
    process.exit(0)
  })

program.parseAsync()
