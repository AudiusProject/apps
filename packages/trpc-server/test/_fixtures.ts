/*

ES Indexer uses blocknumber for cursor.
So records should have a blocknumber to get indexed.


*/

import { sql } from '../src/db'
import {
  FollowRow,
  PlayRow,
  PlaylistRow,
  RepostRow,
  SaveRow,
  TrackRow,
} from '../src/db-tables'

type TableFixture<RowType> = {
  common: Partial<RowType>
  rows: RowType[]
}

const fixtures = {
  blocks: {
    common: {},
    rows: [
      { blockhash: '0x1', number: 1 },
      { blockhash: '0x2', number: 2 },
    ],
  },

  users: {
    common: {
      blocknumber: 1,
      is_current: true,
      is_verified: true,
      created_at: new Date(),
      updated_at: new Date(),
      has_collectibles: false,
      txhash: '0x123',
      is_deactivated: false,
      is_available: true,
      is_storage_v2: true,
      allow_ai_attribution: false,
    },
    rows: [
      {
        user_id: 101,
        handle: 'steve',
        name: 'Steve Steve',
      },
      {
        user_id: 102,
        handle: 'dave',
        name: 'Dave Dave',
      },
      {
        user_id: 103,
        handle: 'dave again',
        name: 'Dave Again',
      },
    ],
  },

  tracks: {
    common: {
      blocknumber: 1,
      isCurrent: true,
      isDelete: false,
      createdAt: new Date(),
      updatedAt: new Date(),
      isUnlisted: false,
      txhash: '0x123',
      isAvailable: true,
      isPremium: false,
      isPlaylistUpload: false,
      trackSegments: '[]',
    },
    rows: [
      {
        ownerId: 101,
        trackId: 201,
        title: 'Who let the dogs out',
      },
      {
        ownerId: 101,
        trackId: 202,
        title: "Steve's unlisted dogs track",
        isUnlisted: true,
      },
      {
        ownerId: 101,
        trackId: 203,
        title: 'Dogs remix',
      },
      {
        ownerId: 101,
        trackId: 204,
        title: 'Future dogs release',
        isUnlisted: true,
        releaseDate: dateAddDays(30),
      },
    ],
  } as TableFixture<TrackRow>,

  playlists: {
    common: {
      blocknumber: 1,
      createdAt: new Date(),
      updatedAt: new Date(),
      isCurrent: true,
      isDelete: false,
      isAlbum: false,
      isPrivate: false,
      txhash: '0x123',
      isImageAutogenerated: false,
      playlistContents: { track_ids: [] },
    },
    rows: [
      {
        playlistOwnerId: 101,
        playlistId: 301,
        playlistName: "Steve's Playlist",
        playlistContents: { track_ids: [{ track: 101 }, { track: 103 }] },
      },
      {
        playlistOwnerId: 101,
        playlistId: 302,
        playlistName: "Steve's private Playlist",
        isPrivate: true,
        playlistContents: { track_ids: [{ track: 101 }, { track: 103 }] },
      },
    ],
  } as TableFixture<PlaylistRow>,

  follows: {
    common: {
      blocknumber: 1,
      createdAt: new Date(),
      isCurrent: true,
      isDelete: false,
      txhash: '0x123',
    },
    rows: [
      {
        followerUserId: 101,
        followeeUserId: 102,
      },
    ],
  } as TableFixture<FollowRow>,

  saves: {
    common: {
      blocknumber: 1,
      createdAt: new Date(),
      isCurrent: true,
      isDelete: false,
      txhash: '0x123',
      isSaveOfRepost: false,
    },
    rows: [
      {
        userId: 102,
        saveType: 'track',
        saveItemId: 201,
      },
    ],
  } as TableFixture<SaveRow>,

  reposts: {
    common: {
      blocknumber: 1,
      createdAt: new Date(),
      isCurrent: true,
      isDelete: false,
      txhash: '0x123',
      isRepostOfRepost: false,
    },
    rows: [
      {
        userId: 102,
        repostType: 'track',
        repostItemId: 201,
      },
    ],
  } as TableFixture<RepostRow>,

  plays: {
    common: {},
    rows: [
      {
        userId: 101,
        playItemId: 201,
        createdAt: dateAddDays(-1),
        updatedAt: dateAddDays(-1),
      },
      {
        userId: 101,
        playItemId: 202,
        createdAt: dateAddDays(-2),
        updatedAt: dateAddDays(-2),
      },
      {
        userId: 101,
        playItemId: 203,
        createdAt: dateAddDays(-4),
        updatedAt: dateAddDays(-4),
      },
    ],
  } as TableFixture<PlayRow>,
}

function dateAddDays(dayDelta: number) {
  const date = new Date()
  date.setDate(date.getDate() + dayDelta)
  return date
}

async function main() {
  // truncate tables
  for (const table of Object.keys(fixtures)) {
    await sql`truncate ${sql(table)} cascade`
  }
  await sql`truncate aggregate_user cascade`
  await sql`truncate aggregate_track cascade`
  await sql`truncate aggregate_playlist cascade`

  // create records
  for (const [table, fixture] of Object.entries(fixtures)) {
    await Promise.all(
      fixture.rows.map(
        (r) =>
          sql`insert into ${sql(table)} ${sql({ ...fixture.common, ...r })}`
      )
    )
  }

  await sql.end()
}

main()
