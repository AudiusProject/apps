import { SquareSizes } from '@audius/common/models'
import { Text } from '@audius/harmony'
import { http, HttpResponse } from 'msw'
import { setupServer } from 'msw/node'
import { Routes, Route } from 'react-router-dom-v5-compat'
import { describe, it, expect, beforeAll, afterEach, afterAll } from 'vitest'

import { render, screen } from 'test/test-utils'

import { CollectionCard } from './CollectionCard'

const testCollection = {
  id: '7eP5n',
  playlist_name: 'Test Collection',
  user_id: '7eP5n',
  permalink: '/test-user/test-collection',
  repost_count: 10,
  favorite_count: 5,
  total_play_count: 0,
  track_count: 0,
  blocknumber: 0,
  created_at: new Date().toISOString(),
  updated_at: new Date().toISOString(),
  is_album: false,
  is_image_autogenerated: false,
  is_delete: false,
  is_private: false,
  is_stream_gated: false,
  is_scheduled_release: false,
  has_current_user_reposted: false,
  has_current_user_saved: false,
  playlist_contents: [],
  added_timestamps: [],
  followee_reposts: [],
  followee_favorites: [],
  artwork: {
    [SquareSizes.SIZE_150_BY_150]:
      'https://node.com/image-collection-small.jpg',
    [SquareSizes.SIZE_480_BY_480]:
      'https://node.com/image-collection-medium.jpg',
    mirrors: ['https://node.com']
  },
  access: { stream: true },
  user: {
    id: '7eP5n',
    handle: 'test-user',
    name: 'Test User'
  }
}

const server = setupServer(
  http.get('http://audius-protocol-discovery-provider-1/health_check', () => {
    return HttpResponse.json({
      data: {
        service: 'discovery-node',
        version: '1.0.0',
        healthy: true,
        chain_health: { status: 'healthy' },
        latest_block_num: 1000,
        latest_indexed_block_num: 999,
        block_difference: 1,
        maximum_healthy_block_difference: 15,
        meets_min_requirements: true,
        network: {
          content_nodes: [],
          discovery_nodes: [],
          discovery_nodes_with_owner: []
        }
      }
    })
  }),
  http.get(
    'http://audius-protocol-discovery-provider-1/v1/full/playlists',
    ({ request }) => {
      const url = new URL(request.url)
      const id = url.searchParams.get('id')
      if (id === '7eP5n') {
        return HttpResponse.json({ data: [testCollection] })
      }
      return new HttpResponse(null, { status: 404 })
    }
  )
)

describe('CollectionCard', () => {
  beforeAll(() => {
    server.listen()
  })

  afterEach(() => {
    server.resetHandlers()
  })

  afterAll(() => {
    server.close()
  })

  it('renders a button with the label comprising the collection and artist name, and favorites and reposts', async () => {
    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    expect(
      await screen.findByRole('button', {
        name: /test collection test user reposts 10 favorites 5/i
      })
    ).toBeInTheDocument()
  })

  it('navigates to collection page when clicked', async () => {
    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    screen.getByRole('button').click()
    expect(
      await screen.findByRole('heading', { name: /test collection page/i })
    ).toBeInTheDocument()
  })

  it('renders the cover image', async () => {
    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    expect(await screen.findByTestId('cover-art-1')).toHaveAttribute(
      'src',
      'https://node.com/image-collection-medium.jpg'
    )
  })

  it('renders the collection owner link which navigates to user page', async () => {
    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    const userNameElement = screen.getByRole('link', { name: 'Test User' })
    expect(userNameElement).toBeInTheDocument()
    userNameElement.click()
    expect(
      await screen.findByRole('heading', { name: /test user page/i })
    ).toBeInTheDocument()
  })

  it('hidden collections are rendered correctly', async () => {
    server.use(
      http.get('/api/v1/collections/:id', () => {
        return HttpResponse.json({ ...testCollection, is_private: true })
      })
    )

    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    expect(
      await screen.findByRole('button', {
        name: /test collection test user hidden/i
      })
    ).toBeInTheDocument()
  })

  it('premium locked collections are rendered correctly', async () => {
    server.use(
      http.get('/api/v1/collections/:id', () => {
        return HttpResponse.json({
          ...testCollection,
          access: { stream: false, download: false },
          stream_conditions: {
            usdc_purchase: { price: 10, albumTrackPrice: 1, splits: {} }
          }
        })
      })
    )

    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    expect(
      await screen.findByRole('button', {
        name: /test collection test user reposts 10 favorites 5 available for purchase/i
      })
    ).toBeInTheDocument()
  })

  it('premium unlocked collections are rendered correctly', async () => {
    server.use(
      http.get('/api/v1/collections/:id', () => {
        return HttpResponse.json({
          ...testCollection,
          access: { stream: true, download: true },
          stream_conditions: {
            usdc_purchase: { price: 10, albumTrackPrice: 1, splits: {} }
          }
        })
      })
    )

    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    expect(
      await screen.findByRole('button', {
        name: /test collection test user reposts 10 favorites 5 purchased/i
      })
    ).toBeInTheDocument()
  })

  it('premium collections owned by user are rendered correctly', async () => {
    server.use(
      http.get('/api/v1/collections/:id', () => {
        return HttpResponse.json({
          ...testCollection,
          playlist_owner_id: 2 // Same as current user
        })
      })
    )

    render(
      <Routes>
        <Route path='/' element={<CollectionCard id={1} size='s' />} />
        <Route
          path='/test-user/test-collection'
          element={<Text variant='heading'>Test Collection Page</Text>}
        />
        <Route
          path='/test-user'
          element={<Text variant='heading'>Test User Page</Text>}
        />
      </Routes>
    )

    expect(
      await screen.findByRole('button', {
        name: 'Test Collection Test User Reposts 10 Favorites 5'
      })
    ).toBeInTheDocument()
  })
})
