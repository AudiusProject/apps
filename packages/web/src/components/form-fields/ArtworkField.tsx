import { useState } from 'react'

import { EditCollectionValues } from '@audius/common/store'
import { getErrorMessage } from '@audius/common/utils'
import { useField, useFormikContext } from 'formik'

import { HelperText } from 'components/data-entry/HelperText'
import { TrackEditFormValues } from 'components/edit-track/types'
import UploadArtwork, {
  UploadArtworkProps
} from 'components/upload/UploadArtwork'
import { resizeImage } from 'utils/imageProcessingUtil'

type ArtworkFieldProps = Partial<UploadArtworkProps> & {
  name: string
  size: 'small' | 'large'
  autoFocus?: boolean
}

export const ArtworkField = (props: ArtworkFieldProps) => {
  const { name, autoFocus, ...other } = props
  const { submitCount, initialValues } = useFormikContext<
    TrackEditFormValues | EditCollectionValues
  >()
  const [field, { touched, error }, { setValue }] = useField(name)
  const { value, ...otherField } = field
  const [
    { value: isImageAutogenerated },
    ,
    { setValue: setImageAutogenerated }
  ] = useField('is_image_autogenerated')
  const [imageProcessingError, setImageProcessingError] = useState(false)
  const isUpload =
    'trackMetadatas' in initialValues
      ? initialValues?.trackMetadatas?.[0]?.track_id === undefined
      : !initialValues?.artwork?.url

  const handleDropArtwork = async (selectedFiles: File[], source: string) => {
    try {
      let file = selectedFiles[0]
      file = await resizeImage(file)
      // @ts-ignore writing to read-only property. Maybe bugged?
      file.name = selectedFiles[0].name
      const url = URL.createObjectURL(file)
      setValue({ url, file, source })
      setImageAutogenerated(false)
      setImageProcessingError(false)
    } catch (err) {
      console.error(getErrorMessage(err))
      setImageProcessingError(true)
    }
  }

  const handleRemoveArtwork = () => {
    if (!isUpload) {
      setValue(null)
    } else {
      setValue(initialValues[name])
    }
    setImageAutogenerated(true)
  }

  const hasError = Boolean((touched || submitCount > 0) && error)

  return (
    <div>
      <UploadArtwork
        {...otherField}
        artworkUrl={value?.url}
        onDropArtwork={handleDropArtwork}
        imageProcessingError={imageProcessingError}
        {...other}
        isImageAutogenerated={isImageAutogenerated}
        onRemoveArtwork={handleRemoveArtwork}
        isUpload={isUpload}
        defaultPopupOpen={autoFocus}
      />
      {hasError ? <HelperText error={hasError}>{error}</HelperText> : null}
    </div>
  )
}
