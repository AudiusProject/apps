import { useState, useEffect, useRef } from 'react'

import { imageBlank, imageBlank as placeholderArt } from '@audius/common/assets'
import cn from 'classnames'

import ImageSelectionButton from 'components/image-selection/ImageSelectionButton'
import LoadingSpinner from 'components/loading-spinner/LoadingSpinner'
import Toast from 'components/toast/Toast'

import styles from './UploadArtwork.module.css'

const UploadArtwork = ({
  artworkUrl = '',
  error,
  size,
  className,
  imageProcessingError,
  onDropArtwork,
  onOpenPopup,
  onClosePopup,
  onRemoveArtwork,
  defaultPopupOpen = false,
  isImageAutogenerated = false,
  isUpload = false
}) => {
  const [processing, setProcessing] = useState(false)
  const [showTip, setShowTip] = useState(false)
  const imageSelectionAnchorRef = useRef()

  useEffect(() => {
    if (error) {
      setShowTip(true)
      setTimeout(() => {
        setShowTip(false)
      }, 4000)
    }
  }, [error])

  const onDrop = async (file, source) => {
    setProcessing(true)
    const image = await file
    await onDropArtwork([].concat(image), source)
    setProcessing(false)
  }

  const hasImage = !!artworkUrl && artworkUrl !== imageBlank
  const xy = size === 'small' ? 218 : 280

  return (
    <div
      className={cn(
        styles.uploadArtwork,
        {
          [styles.error]: error
        },
        className
      )}
      css={{ width: xy, height: xy }}
      ref={imageSelectionAnchorRef}
    >
      <div
        className={styles.artworkWrapper}
        style={{
          backgroundImage: `url(${
            artworkUrl || (processing ? '' : placeholderArt)
          })`
        }}
      >
        {processing ? <LoadingSpinner className={styles.overlay} /> : null}
      </div>
      <div className={styles.button}>
        <Toast
          text='No artwork? Pick from our library instead!'
          placement='top'
          fireOnClick={false}
          fillParent={false}
          mount='parent'
          open={showTip}
        >
          <ImageSelectionButton
            anchorRef={imageSelectionAnchorRef}
            defaultPopupOpen={defaultPopupOpen}
            hasImage={hasImage}
            error={imageProcessingError}
            onOpenPopup={onOpenPopup}
            onClosePopup={onClosePopup}
            onRemoveArtwork={onRemoveArtwork}
            onSelect={onDrop}
            source='UploadArtwork'
            isImageAutogenerated={isImageAutogenerated}
            imageName={'artwork'}
            showImageName={false}
            isUpload={isUpload}
          />
        </Toast>
      </div>
    </div>
  )
}

export default UploadArtwork
