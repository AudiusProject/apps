.root {
  display: flex;
  flex-direction: column;
  gap: var(--harmony-unit-2);
  align-items: flex-start;
}

.root.isAuthor {
  align-items: flex-end;
}

.root.hasReaction {
  margin-bottom: var(--harmony-unit-2);
}

.bubble {
  --bubble-color: var(--harmony-white);
  position: relative;
  z-index: 1;
  display: inline-block;
  max-width: 448px;
  filter: var(--drop-shadow-near);
  transition:
    background-color var(--harmony-expressive),
    filter var(--harmony-expressive);
}

.bubbleCorners {
  border-radius: var(--harmony-unit-3);
  overflow: hidden;
}

.bubble:not(.nonInteractive):hover {
  --bubble-color: var(--harmony-n-25);
  filter: var(--drop-shadow-far);
}

.isAuthor .bubble {
  --bubble-color: var(--harmony-s-100);
}

.isAuthor .bubble:hover {
  --bubble-color: var(--harmony-s-200);
}

.unfurl {
  border-radius: 0;
  flex: 1 1;
}

.textWrapper {
  background-color: var(--bubble-color);
  text-align: left;
  max-width: 448px;
}

.text {
  white-space: pre-wrap;
  word-break: break-word;
  user-select: text;
}

.meta {
  font-size: var(--harmony-font-xs);
  color: var(--harmony-n-600);
  margin-bottom: var(--harmony-unit-4);
}

/* Reactions positioning */

.reactionsContainer {
  bottom: -24px;
  position: absolute;
  flex-direction: row-reverse;
  align-items: center;
  justify-content: center;
  display: flex;
  cursor: pointer;
}

.reactionsContainer:not(.hasReaction) {
  bottom: -16px;
}

.root.isAuthor .reactionsContainer {
  left: -16px;
}
.root:not(.isAuthor) .reactionsContainer {
  right: -16px;
  direction: rtl;
}

.root.isAuthor .reactionsContainer.hasReaction {
  left: -24px;
}

.root:not(.isAuthor) .reactionsContainer.hasReaction {
  right: -24px;
}

/* Styling of reaction button inside the reactions container */

.reactionsButton {
  display: flex;
  width: 100px;
  height: 100px;
  align-items: center;
  justify-content: center;
  opacity: 0;
  /* transform looks better if it only eases-out */
  transition:
    opacity var(--harmony-quick),
    transform 0.07s ease-out;
}

.reactionsContainer:not(.hasReaction) .reactionsButton {
  background-color: var(--harmony-white);
  border: 1px solid var(--harmony-n-200);
  width: var(--harmony-unit-8);
  height: var(--harmony-unit-8);
  border-radius: 50%;
}

.bubble:hover .reactionsButton,
.reactionsContainer.isOpened .reactionsButton,
.reactionsContainer.hasReaction .reactionsButton {
  transform: scale(1, 1);
  opacity: 1;
}

.reactionsContainer:not(.hasReaction) path {
  width: var(--harmony-unit-6);
  height: var(--harmony-unit-6);
  fill: var(--harmony-secondary);
  transition: fill var(--harmony-quick);
}

.reactionsContainer:not(.hasReaction):hover .reactionsButton {
  transform: scale(1.1);
}

.reactionsContainer:not(.hasReaction):hover .reactionsButton path {
  fill: var(--harmony-s-500);
}

.reactionsContainer:not(.hasReaction):active .reactionsButton {
  transform: scale(0.6);
}

.reactionEmoji {
  margin-inline-end: -28px;
  filter: drop-shadow(-2px 0px 4px rgba(0, 0, 0, 0.15));
}

.reactionEmoji:hover {
  transform: scale(1.1);
}

.reactionEmoji:active {
  transform: scale(0.6);
}

.tail {
  display: flex;
  position: absolute;
  bottom: 0;
  z-index: -1;
}

:not(.hideMessage) .tail svg * {
  fill: var(--bubble-color);
  transition: fill var(--harmony-quick);
}

.hideMessage .tail svg * {
  fill: var(--harmony-white);
  transition: fill var(--harmony-quick);
}

.root:not(.isAuthor) .tail {
  transform: scaleX(-1);
  left: -7px;
}

.root.isAuthor .tail {
  right: -7px;
}

.error {
  display: flex;
  align-items: center;
  gap: var(--harmony-unit-1);

  color: var(--harmony-red);
}

.error:hover {
  cursor: pointer;
}

.error svg {
  width: var(--harmony-unit-3);
  height: var(--harmony-unit-3);
}

.error svg path {
  fill: var(--harmony-red);
}
