diff --git a/ios/ReactNativePageView.h b/ios/ReactNativePageView.h
index 8887fd2..76edf4e 100644
--- a/ios/ReactNativePageView.h
+++ b/ios/ReactNativePageView.h
@@ -23,6 +23,7 @@ NS_ASSUME_NONNULL_BEGIN
 @property(nonatomic) BOOL overdrag;
 @property(nonatomic) NSString* layoutDirection;
 @property(nonatomic, assign) BOOL animating;
+@property(nonatomic) NSUInteger previousNavigationStackCount;
 
 - (void)goTo:(NSInteger)index animated:(BOOL)animated;
 - (void)shouldScroll:(BOOL)scrollEnabled;
diff --git a/ios/ReactNativePageView.m b/ios/ReactNativePageView.m
index d7b6c3a..c339a67 100644
--- a/ios/ReactNativePageView.m
+++ b/ios/ReactNativePageView.m
@@ -3,6 +3,7 @@
 #import "React/RCTLog.h"
 #import <React/RCTViewManager.h>
 
+#import "RNGestureHandler.h"
 #import "UIViewController+CreateExtension.h"
 #import "RCTOnPageScrollEvent.h"
 #import "RCTOnPageScrollStateChanged.h"
@@ -47,6 +48,7 @@
         _cachedControllers = [NSHashTable hashTableWithOptions:NSHashTableStrongMemory];
         _overdrag = NO;
         _layoutDirection = @"ltr";
+        _previousNavigationStackCount = 1;
         UIPanGestureRecognizer* panGestureRecognizer = [UIPanGestureRecognizer new];
         self.panGestureRecognizer = panGestureRecognizer;
         panGestureRecognizer.delegate = self;
@@ -85,6 +87,56 @@
         [self embed];
         [self setupInitialController];
     }
+    if (self.reactViewController.navigationController != nil) {
+        NSUInteger count = [self.reactViewController.navigationController.viewControllers count];
+
+        if (count >= _previousNavigationStackCount) {
+            // We are pushing to the stack, always enable the stack navigator
+            for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                recognizer.enabled = YES;
+            }
+        } else {
+            // We are popping from the stack, only enable stack if we're on the first tab
+            if (self.currentIndex == 0) {
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = YES;
+                }
+            } else {
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    // Do not disable the gesture immediately as the window is popping.
+                    NSTimeInterval delayInSeconds = 0.5;
+                    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
+                        dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
+                        recognizer.enabled = NO;
+                    });
+                }
+            }
+        }
+
+        if (self.currentIndex == 0) {
+            // On the first tab, we want to listen to the drawer's gestures, so
+            // swiping it open works.
+            NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+            NSEnumerator *enumerator = [handlers objectEnumerator];
+            RNGestureHandler* handler;
+            while ((handler = [enumerator nextObject])) {
+                handler.recognizer.enabled = YES;
+                handler.frozen = NO;
+                [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:handler.recognizer];
+            }
+        } else {
+            // On the other tabs tab, we should disable the drawer's gestures.
+            NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+            NSEnumerator *enumerator = [handlers objectEnumerator];
+            RNGestureHandler* handler;
+            while ((handler = [enumerator nextObject])) {
+                handler.recognizer.enabled = NO;
+                handler.frozen = YES;
+            }
+        }
+
+      _previousNavigationStackCount = count;
+    }
 
     if (self.reactViewController.navigationController != nil && self.reactViewController.navigationController.interactivePopGestureRecognizer != nil) {
         [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:self.reactViewController.navigationController.interactivePopGestureRecognizer];
@@ -198,6 +250,42 @@
                 strongSelf.lastReportedIndex = strongSelf.currentIndex;
             }
         }
+
+        if (self.reactViewController.navigationController != nil) {
+            if (strongSelf.currentIndex == 0) {
+                // On the first tab, we want to listen to the navigation's gestures, so
+                // swipe back works.
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = YES;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:recognizer];
+                }
+
+                // On the first tab, we want to listen to the drawer's gestures, so
+                // swiping it open works.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = YES;
+                    handler.frozen = NO;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:handler.recognizer];
+                }
+            } else {
+                // On other tabs, we should disable the navigations's gestures
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = NO;
+                }
+
+                // On the other tabs tab, we should disable the drawer's gestures.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = NO;
+                    handler.frozen = YES;
+                }
+            }
+        }
     }];
 }
 
@@ -341,6 +429,42 @@
         [self.eventDispatcher sendEvent:[[RCTOnPageSelected alloc] initWithReactTag:self.reactTag position:@(currentIndex) coalescingKey:_coalescingKey++]];
         [self.eventDispatcher sendEvent:[[RCTOnPageScrollEvent alloc] initWithReactTag:self.reactTag position:@(currentIndex) offset:@(0.0)]];
         self.lastReportedIndex = currentIndex;
+
+        if (self.reactViewController.navigationController != nil) {
+            if (self.currentIndex == 0) {
+                // On the first tab, we want to listen to the navigation's gestures, so
+                // swipe back works.
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = YES;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:recognizer];
+                }
+
+                // On the first tab, we want to listen to the drawer's gestures, so
+                // swiping it open works.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = YES;
+                    handler.frozen = NO;
+                    [self.scrollView.panGestureRecognizer requireGestureRecognizerToFail:handler.recognizer];
+                }
+            } else {
+                // On other tabs, we should disable the navigations's gestures
+                for (UIGestureRecognizer *recognizer in self.reactViewController.navigationController.view.gestureRecognizers) {
+                    recognizer.enabled = NO;
+                }
+
+                // On the other tabs tab, we should disable the drawer's gestures.
+                NSHashTable<RNGestureHandler *> *handlers = [RNGestureHandler getGestureHandlers];
+                NSEnumerator *enumerator = [handlers objectEnumerator];
+                RNGestureHandler* handler;
+                while ((handler = [enumerator nextObject])) {
+                    handler.recognizer.enabled = NO;
+                    handler.frozen = YES;
+                }
+            }
+        }
     }
 }
 
