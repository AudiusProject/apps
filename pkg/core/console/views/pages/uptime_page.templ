package pages

import (
	"fmt"
	"github.com/AudiusProject/audius-protocol/pkg/core/db"
)

type UptimePageView struct {
	Rollup        db.SlaRollup
	Reports       []db.SlaNodeReport
	RecentRollups []db.SlaRollup
}

var colors = []string{
	"red",
	"yellow",
	"blue",
	"orange",
	"green",
	"purple",
	"magenta",
	"gray",
	"brown",
}

func createColorGradientsForReports(reports []db.SlaNodeReport, totalBlocks int64) string {
	pos := 0
	share := 0
	res := ""
	for i, r := range reports {
		if i == len(reports)-1 {
			res = fmt.Sprintf("%s %s 0%%", res, colors[i%len(colors)])
		} else {
			share = int(float32(r.BlocksProposed) / float32(totalBlocks) * 100)
			res = fmt.Sprintf("%s %s %d%% %d%%, ", res, colors[i%len(colors)], pos, pos+share)
			pos += share
		}
	}
	return fmt.Sprintf("conic-gradient(%s)", res)
}

css piechart(reports []db.SlaNodeReport, totalBlocks int64) {
	width: 400px;
	height: 400px;
	margin: 50px;
	border-radius: 50%;
	background-image: { templ.SafeCSSProperty(createColorGradientsForReports(reports, totalBlocks)) };
}

css legendItem() {
	display: flex;
	align-items: center;
	margin-bottom: 8px;
	font-family: 'Courier New';
}

css colorBox(colorIndex int) {
	width: 16px;
	height: 16px;
	background-color: { colors[colorIndex % len(colors)] };
	margin-right: 8px;
}

css recentRollupItem() {
	display: flex;
	align-items: center;
	margin-bottom: 8px;
	border-bottom: 2px solid gray;
}

templ (c *Pages) UptimePageHTML(props *UptimePageView) {
	@c.layout.SiteFrame() {
        if props.Rollup.BlockEnd > int64(0) {
            <h1 class="text-xl">
                SLA Rollup For Blocks { fmt.Sprintf("%d - %d", props.Rollup.BlockStart, props.Rollup.BlockEnd) }
            </h1>
        } else {
            <h1 class="text-xl"> No SLA Rollups have been finalized. </h1>
        }
		<div class={ piechart(props.Reports, props.Rollup.BlockEnd-props.Rollup.BlockStart) }></div>
		<ul>
			for i, r := range props.Reports {
				<li class={ legendItem() }>
					<div class={ colorBox(i) }></div>
					<span>{ fmt.Sprintf("%s | %d Blocks", r.Address, r.BlocksProposed) }</span>
				</li>
			}
		</ul>
        if len(props.RecentRollups) > 0 {
            <h2 class="text-lg">Explore Recent Rollups</h2>
            <ul>
                for _, rr := range props.RecentRollups {
                    <li class={ recentRollupItem() }>
                        <a href={ templ.URL(fmt.Sprintf("/console/uptime/%d", rr.ID)) }>{ rr.Time.Time.String() }</a>
                    </li>
                }
            </ul>
        }
	}
}
