// Code generated by go-swagger; DO NOT EDIT.

package protocol

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewProtocolSendTransactionParams creates a new ProtocolSendTransactionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewProtocolSendTransactionParams() *ProtocolSendTransactionParams {
	return &ProtocolSendTransactionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewProtocolSendTransactionParamsWithTimeout creates a new ProtocolSendTransactionParams object
// with the ability to set a timeout on a request.
func NewProtocolSendTransactionParamsWithTimeout(timeout time.Duration) *ProtocolSendTransactionParams {
	return &ProtocolSendTransactionParams{
		timeout: timeout,
	}
}

// NewProtocolSendTransactionParamsWithContext creates a new ProtocolSendTransactionParams object
// with the ability to set a context for a request.
func NewProtocolSendTransactionParamsWithContext(ctx context.Context) *ProtocolSendTransactionParams {
	return &ProtocolSendTransactionParams{
		Context: ctx,
	}
}

// NewProtocolSendTransactionParamsWithHTTPClient creates a new ProtocolSendTransactionParams object
// with the ability to set a custom HTTPClient for a request.
func NewProtocolSendTransactionParamsWithHTTPClient(client *http.Client) *ProtocolSendTransactionParams {
	return &ProtocolSendTransactionParams{
		HTTPClient: client,
	}
}

/*
ProtocolSendTransactionParams contains all the parameters to send to the API endpoint

	for the protocol send transaction operation.

	Typically these are written to a http.Request.
*/
type ProtocolSendTransactionParams struct {

	// TransactionManageEntityAction.
	TransactionManageEntityAction *string

	// TransactionManageEntityEntityID.
	//
	// Format: int64
	TransactionManageEntityEntityID *string

	// TransactionManageEntityEntityType.
	TransactionManageEntityEntityType *string

	// TransactionManageEntityMetadata.
	TransactionManageEntityMetadata *string

	// TransactionManageEntitySignature.
	TransactionManageEntitySignature *string

	// TransactionManageEntityUserID.
	//
	// Format: int64
	TransactionManageEntityUserID *string

	// TransactionRequestID.
	TransactionRequestID *string

	// TransactionSignature.
	TransactionSignature *string

	// TransactionSLARollupBlockEnd.
	//
	// Format: int64
	TransactionSLARollupBlockEnd *string

	// TransactionSLARollupBlockStart.
	//
	// Format: int64
	TransactionSLARollupBlockStart *string

	// TransactionSLARollupTimestamp.
	//
	// Format: date-time
	TransactionSLARollupTimestamp *strfmt.DateTime

	// TransactionValidatorRegistrationCometAddress.
	TransactionValidatorRegistrationCometAddress *string

	// TransactionValidatorRegistrationEndpoint.
	TransactionValidatorRegistrationEndpoint *string

	// TransactionValidatorRegistrationEthBlock.
	TransactionValidatorRegistrationEthBlock *string

	// TransactionValidatorRegistrationNodeType.
	TransactionValidatorRegistrationNodeType *string

	// TransactionValidatorRegistrationSpID.
	TransactionValidatorRegistrationSpID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the protocol send transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProtocolSendTransactionParams) WithDefaults() *ProtocolSendTransactionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the protocol send transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ProtocolSendTransactionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTimeout(timeout time.Duration) *ProtocolSendTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithContext(ctx context.Context) *ProtocolSendTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithHTTPClient(client *http.Client) *ProtocolSendTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithTransactionManageEntityAction adds the transactionManageEntityAction to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionManageEntityAction(transactionManageEntityAction *string) *ProtocolSendTransactionParams {
	o.SetTransactionManageEntityAction(transactionManageEntityAction)
	return o
}

// SetTransactionManageEntityAction adds the transactionManageEntityAction to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionManageEntityAction(transactionManageEntityAction *string) {
	o.TransactionManageEntityAction = transactionManageEntityAction
}

// WithTransactionManageEntityEntityID adds the transactionManageEntityEntityID to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionManageEntityEntityID(transactionManageEntityEntityID *string) *ProtocolSendTransactionParams {
	o.SetTransactionManageEntityEntityID(transactionManageEntityEntityID)
	return o
}

// SetTransactionManageEntityEntityID adds the transactionManageEntityEntityId to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionManageEntityEntityID(transactionManageEntityEntityID *string) {
	o.TransactionManageEntityEntityID = transactionManageEntityEntityID
}

// WithTransactionManageEntityEntityType adds the transactionManageEntityEntityType to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionManageEntityEntityType(transactionManageEntityEntityType *string) *ProtocolSendTransactionParams {
	o.SetTransactionManageEntityEntityType(transactionManageEntityEntityType)
	return o
}

// SetTransactionManageEntityEntityType adds the transactionManageEntityEntityType to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionManageEntityEntityType(transactionManageEntityEntityType *string) {
	o.TransactionManageEntityEntityType = transactionManageEntityEntityType
}

// WithTransactionManageEntityMetadata adds the transactionManageEntityMetadata to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionManageEntityMetadata(transactionManageEntityMetadata *string) *ProtocolSendTransactionParams {
	o.SetTransactionManageEntityMetadata(transactionManageEntityMetadata)
	return o
}

// SetTransactionManageEntityMetadata adds the transactionManageEntityMetadata to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionManageEntityMetadata(transactionManageEntityMetadata *string) {
	o.TransactionManageEntityMetadata = transactionManageEntityMetadata
}

// WithTransactionManageEntitySignature adds the transactionManageEntitySignature to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionManageEntitySignature(transactionManageEntitySignature *string) *ProtocolSendTransactionParams {
	o.SetTransactionManageEntitySignature(transactionManageEntitySignature)
	return o
}

// SetTransactionManageEntitySignature adds the transactionManageEntitySignature to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionManageEntitySignature(transactionManageEntitySignature *string) {
	o.TransactionManageEntitySignature = transactionManageEntitySignature
}

// WithTransactionManageEntityUserID adds the transactionManageEntityUserID to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionManageEntityUserID(transactionManageEntityUserID *string) *ProtocolSendTransactionParams {
	o.SetTransactionManageEntityUserID(transactionManageEntityUserID)
	return o
}

// SetTransactionManageEntityUserID adds the transactionManageEntityUserId to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionManageEntityUserID(transactionManageEntityUserID *string) {
	o.TransactionManageEntityUserID = transactionManageEntityUserID
}

// WithTransactionRequestID adds the transactionRequestID to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionRequestID(transactionRequestID *string) *ProtocolSendTransactionParams {
	o.SetTransactionRequestID(transactionRequestID)
	return o
}

// SetTransactionRequestID adds the transactionRequestId to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionRequestID(transactionRequestID *string) {
	o.TransactionRequestID = transactionRequestID
}

// WithTransactionSignature adds the transactionSignature to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionSignature(transactionSignature *string) *ProtocolSendTransactionParams {
	o.SetTransactionSignature(transactionSignature)
	return o
}

// SetTransactionSignature adds the transactionSignature to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionSignature(transactionSignature *string) {
	o.TransactionSignature = transactionSignature
}

// WithTransactionSLARollupBlockEnd adds the transactionSLARollupBlockEnd to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionSLARollupBlockEnd(transactionSLARollupBlockEnd *string) *ProtocolSendTransactionParams {
	o.SetTransactionSLARollupBlockEnd(transactionSLARollupBlockEnd)
	return o
}

// SetTransactionSLARollupBlockEnd adds the transactionSlaRollupBlockEnd to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionSLARollupBlockEnd(transactionSLARollupBlockEnd *string) {
	o.TransactionSLARollupBlockEnd = transactionSLARollupBlockEnd
}

// WithTransactionSLARollupBlockStart adds the transactionSLARollupBlockStart to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionSLARollupBlockStart(transactionSLARollupBlockStart *string) *ProtocolSendTransactionParams {
	o.SetTransactionSLARollupBlockStart(transactionSLARollupBlockStart)
	return o
}

// SetTransactionSLARollupBlockStart adds the transactionSlaRollupBlockStart to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionSLARollupBlockStart(transactionSLARollupBlockStart *string) {
	o.TransactionSLARollupBlockStart = transactionSLARollupBlockStart
}

// WithTransactionSLARollupTimestamp adds the transactionSLARollupTimestamp to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionSLARollupTimestamp(transactionSLARollupTimestamp *strfmt.DateTime) *ProtocolSendTransactionParams {
	o.SetTransactionSLARollupTimestamp(transactionSLARollupTimestamp)
	return o
}

// SetTransactionSLARollupTimestamp adds the transactionSlaRollupTimestamp to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionSLARollupTimestamp(transactionSLARollupTimestamp *strfmt.DateTime) {
	o.TransactionSLARollupTimestamp = transactionSLARollupTimestamp
}

// WithTransactionValidatorRegistrationCometAddress adds the transactionValidatorRegistrationCometAddress to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionValidatorRegistrationCometAddress(transactionValidatorRegistrationCometAddress *string) *ProtocolSendTransactionParams {
	o.SetTransactionValidatorRegistrationCometAddress(transactionValidatorRegistrationCometAddress)
	return o
}

// SetTransactionValidatorRegistrationCometAddress adds the transactionValidatorRegistrationCometAddress to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionValidatorRegistrationCometAddress(transactionValidatorRegistrationCometAddress *string) {
	o.TransactionValidatorRegistrationCometAddress = transactionValidatorRegistrationCometAddress
}

// WithTransactionValidatorRegistrationEndpoint adds the transactionValidatorRegistrationEndpoint to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionValidatorRegistrationEndpoint(transactionValidatorRegistrationEndpoint *string) *ProtocolSendTransactionParams {
	o.SetTransactionValidatorRegistrationEndpoint(transactionValidatorRegistrationEndpoint)
	return o
}

// SetTransactionValidatorRegistrationEndpoint adds the transactionValidatorRegistrationEndpoint to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionValidatorRegistrationEndpoint(transactionValidatorRegistrationEndpoint *string) {
	o.TransactionValidatorRegistrationEndpoint = transactionValidatorRegistrationEndpoint
}

// WithTransactionValidatorRegistrationEthBlock adds the transactionValidatorRegistrationEthBlock to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionValidatorRegistrationEthBlock(transactionValidatorRegistrationEthBlock *string) *ProtocolSendTransactionParams {
	o.SetTransactionValidatorRegistrationEthBlock(transactionValidatorRegistrationEthBlock)
	return o
}

// SetTransactionValidatorRegistrationEthBlock adds the transactionValidatorRegistrationEthBlock to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionValidatorRegistrationEthBlock(transactionValidatorRegistrationEthBlock *string) {
	o.TransactionValidatorRegistrationEthBlock = transactionValidatorRegistrationEthBlock
}

// WithTransactionValidatorRegistrationNodeType adds the transactionValidatorRegistrationNodeType to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionValidatorRegistrationNodeType(transactionValidatorRegistrationNodeType *string) *ProtocolSendTransactionParams {
	o.SetTransactionValidatorRegistrationNodeType(transactionValidatorRegistrationNodeType)
	return o
}

// SetTransactionValidatorRegistrationNodeType adds the transactionValidatorRegistrationNodeType to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionValidatorRegistrationNodeType(transactionValidatorRegistrationNodeType *string) {
	o.TransactionValidatorRegistrationNodeType = transactionValidatorRegistrationNodeType
}

// WithTransactionValidatorRegistrationSpID adds the transactionValidatorRegistrationSpID to the protocol send transaction params
func (o *ProtocolSendTransactionParams) WithTransactionValidatorRegistrationSpID(transactionValidatorRegistrationSpID *string) *ProtocolSendTransactionParams {
	o.SetTransactionValidatorRegistrationSpID(transactionValidatorRegistrationSpID)
	return o
}

// SetTransactionValidatorRegistrationSpID adds the transactionValidatorRegistrationSpId to the protocol send transaction params
func (o *ProtocolSendTransactionParams) SetTransactionValidatorRegistrationSpID(transactionValidatorRegistrationSpID *string) {
	o.TransactionValidatorRegistrationSpID = transactionValidatorRegistrationSpID
}

// WriteToRequest writes these params to a swagger request
func (o *ProtocolSendTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.TransactionManageEntityAction != nil {

		// query param transaction.manageEntity.action
		var qrTransactionManageEntityAction string

		if o.TransactionManageEntityAction != nil {
			qrTransactionManageEntityAction = *o.TransactionManageEntityAction
		}
		qTransactionManageEntityAction := qrTransactionManageEntityAction
		if qTransactionManageEntityAction != "" {

			if err := r.SetQueryParam("transaction.manageEntity.action", qTransactionManageEntityAction); err != nil {
				return err
			}
		}
	}

	if o.TransactionManageEntityEntityID != nil {

		// query param transaction.manageEntity.entityId
		var qrTransactionManageEntityEntityID string

		if o.TransactionManageEntityEntityID != nil {
			qrTransactionManageEntityEntityID = *o.TransactionManageEntityEntityID
		}
		qTransactionManageEntityEntityID := qrTransactionManageEntityEntityID
		if qTransactionManageEntityEntityID != "" {

			if err := r.SetQueryParam("transaction.manageEntity.entityId", qTransactionManageEntityEntityID); err != nil {
				return err
			}
		}
	}

	if o.TransactionManageEntityEntityType != nil {

		// query param transaction.manageEntity.entityType
		var qrTransactionManageEntityEntityType string

		if o.TransactionManageEntityEntityType != nil {
			qrTransactionManageEntityEntityType = *o.TransactionManageEntityEntityType
		}
		qTransactionManageEntityEntityType := qrTransactionManageEntityEntityType
		if qTransactionManageEntityEntityType != "" {

			if err := r.SetQueryParam("transaction.manageEntity.entityType", qTransactionManageEntityEntityType); err != nil {
				return err
			}
		}
	}

	if o.TransactionManageEntityMetadata != nil {

		// query param transaction.manageEntity.metadata
		var qrTransactionManageEntityMetadata string

		if o.TransactionManageEntityMetadata != nil {
			qrTransactionManageEntityMetadata = *o.TransactionManageEntityMetadata
		}
		qTransactionManageEntityMetadata := qrTransactionManageEntityMetadata
		if qTransactionManageEntityMetadata != "" {

			if err := r.SetQueryParam("transaction.manageEntity.metadata", qTransactionManageEntityMetadata); err != nil {
				return err
			}
		}
	}

	if o.TransactionManageEntitySignature != nil {

		// query param transaction.manageEntity.signature
		var qrTransactionManageEntitySignature string

		if o.TransactionManageEntitySignature != nil {
			qrTransactionManageEntitySignature = *o.TransactionManageEntitySignature
		}
		qTransactionManageEntitySignature := qrTransactionManageEntitySignature
		if qTransactionManageEntitySignature != "" {

			if err := r.SetQueryParam("transaction.manageEntity.signature", qTransactionManageEntitySignature); err != nil {
				return err
			}
		}
	}

	if o.TransactionManageEntityUserID != nil {

		// query param transaction.manageEntity.userId
		var qrTransactionManageEntityUserID string

		if o.TransactionManageEntityUserID != nil {
			qrTransactionManageEntityUserID = *o.TransactionManageEntityUserID
		}
		qTransactionManageEntityUserID := qrTransactionManageEntityUserID
		if qTransactionManageEntityUserID != "" {

			if err := r.SetQueryParam("transaction.manageEntity.userId", qTransactionManageEntityUserID); err != nil {
				return err
			}
		}
	}

	if o.TransactionRequestID != nil {

		// query param transaction.requestId
		var qrTransactionRequestID string

		if o.TransactionRequestID != nil {
			qrTransactionRequestID = *o.TransactionRequestID
		}
		qTransactionRequestID := qrTransactionRequestID
		if qTransactionRequestID != "" {

			if err := r.SetQueryParam("transaction.requestId", qTransactionRequestID); err != nil {
				return err
			}
		}
	}

	if o.TransactionSignature != nil {

		// query param transaction.signature
		var qrTransactionSignature string

		if o.TransactionSignature != nil {
			qrTransactionSignature = *o.TransactionSignature
		}
		qTransactionSignature := qrTransactionSignature
		if qTransactionSignature != "" {

			if err := r.SetQueryParam("transaction.signature", qTransactionSignature); err != nil {
				return err
			}
		}
	}

	if o.TransactionSLARollupBlockEnd != nil {

		// query param transaction.slaRollup.blockEnd
		var qrTransactionSLARollupBlockEnd string

		if o.TransactionSLARollupBlockEnd != nil {
			qrTransactionSLARollupBlockEnd = *o.TransactionSLARollupBlockEnd
		}
		qTransactionSLARollupBlockEnd := qrTransactionSLARollupBlockEnd
		if qTransactionSLARollupBlockEnd != "" {

			if err := r.SetQueryParam("transaction.slaRollup.blockEnd", qTransactionSLARollupBlockEnd); err != nil {
				return err
			}
		}
	}

	if o.TransactionSLARollupBlockStart != nil {

		// query param transaction.slaRollup.blockStart
		var qrTransactionSLARollupBlockStart string

		if o.TransactionSLARollupBlockStart != nil {
			qrTransactionSLARollupBlockStart = *o.TransactionSLARollupBlockStart
		}
		qTransactionSLARollupBlockStart := qrTransactionSLARollupBlockStart
		if qTransactionSLARollupBlockStart != "" {

			if err := r.SetQueryParam("transaction.slaRollup.blockStart", qTransactionSLARollupBlockStart); err != nil {
				return err
			}
		}
	}

	if o.TransactionSLARollupTimestamp != nil {

		// query param transaction.slaRollup.timestamp
		var qrTransactionSLARollupTimestamp strfmt.DateTime

		if o.TransactionSLARollupTimestamp != nil {
			qrTransactionSLARollupTimestamp = *o.TransactionSLARollupTimestamp
		}
		qTransactionSLARollupTimestamp := qrTransactionSLARollupTimestamp.String()
		if qTransactionSLARollupTimestamp != "" {

			if err := r.SetQueryParam("transaction.slaRollup.timestamp", qTransactionSLARollupTimestamp); err != nil {
				return err
			}
		}
	}

	if o.TransactionValidatorRegistrationCometAddress != nil {

		// query param transaction.validatorRegistration.cometAddress
		var qrTransactionValidatorRegistrationCometAddress string

		if o.TransactionValidatorRegistrationCometAddress != nil {
			qrTransactionValidatorRegistrationCometAddress = *o.TransactionValidatorRegistrationCometAddress
		}
		qTransactionValidatorRegistrationCometAddress := qrTransactionValidatorRegistrationCometAddress
		if qTransactionValidatorRegistrationCometAddress != "" {

			if err := r.SetQueryParam("transaction.validatorRegistration.cometAddress", qTransactionValidatorRegistrationCometAddress); err != nil {
				return err
			}
		}
	}

	if o.TransactionValidatorRegistrationEndpoint != nil {

		// query param transaction.validatorRegistration.endpoint
		var qrTransactionValidatorRegistrationEndpoint string

		if o.TransactionValidatorRegistrationEndpoint != nil {
			qrTransactionValidatorRegistrationEndpoint = *o.TransactionValidatorRegistrationEndpoint
		}
		qTransactionValidatorRegistrationEndpoint := qrTransactionValidatorRegistrationEndpoint
		if qTransactionValidatorRegistrationEndpoint != "" {

			if err := r.SetQueryParam("transaction.validatorRegistration.endpoint", qTransactionValidatorRegistrationEndpoint); err != nil {
				return err
			}
		}
	}

	if o.TransactionValidatorRegistrationEthBlock != nil {

		// query param transaction.validatorRegistration.ethBlock
		var qrTransactionValidatorRegistrationEthBlock string

		if o.TransactionValidatorRegistrationEthBlock != nil {
			qrTransactionValidatorRegistrationEthBlock = *o.TransactionValidatorRegistrationEthBlock
		}
		qTransactionValidatorRegistrationEthBlock := qrTransactionValidatorRegistrationEthBlock
		if qTransactionValidatorRegistrationEthBlock != "" {

			if err := r.SetQueryParam("transaction.validatorRegistration.ethBlock", qTransactionValidatorRegistrationEthBlock); err != nil {
				return err
			}
		}
	}

	if o.TransactionValidatorRegistrationNodeType != nil {

		// query param transaction.validatorRegistration.nodeType
		var qrTransactionValidatorRegistrationNodeType string

		if o.TransactionValidatorRegistrationNodeType != nil {
			qrTransactionValidatorRegistrationNodeType = *o.TransactionValidatorRegistrationNodeType
		}
		qTransactionValidatorRegistrationNodeType := qrTransactionValidatorRegistrationNodeType
		if qTransactionValidatorRegistrationNodeType != "" {

			if err := r.SetQueryParam("transaction.validatorRegistration.nodeType", qTransactionValidatorRegistrationNodeType); err != nil {
				return err
			}
		}
	}

	if o.TransactionValidatorRegistrationSpID != nil {

		// query param transaction.validatorRegistration.spId
		var qrTransactionValidatorRegistrationSpID string

		if o.TransactionValidatorRegistrationSpID != nil {
			qrTransactionValidatorRegistrationSpID = *o.TransactionValidatorRegistrationSpID
		}
		qTransactionValidatorRegistrationSpID := qrTransactionValidatorRegistrationSpID
		if qTransactionValidatorRegistrationSpID != "" {

			if err := r.SetQueryParam("transaction.validatorRegistration.spId", qTransactionValidatorRegistrationSpID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
