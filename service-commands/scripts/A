#!/usr/bin/env python3.9

import os
import sys
import subprocess
import argparse


def create_instance(name, azure, image_project, image_family, size, machine_type):
    if not azure:
        project = (
            subprocess.run(
                [
                    "gcloud",
                    "config",
                    "get-value",
                    "project",
                ],
                capture_output=True,
            )
            .stdout.decode()
            .strip()
        )

        account = (
            subprocess.run(
                [
                    "gcloud",
                    "config",
                    "list",
                    "account",
                    "--format",
                    "value(core.account)",
                ],
                capture_output=True,
            )
            .stdout.decode()
            .strip()
        )

        print("Project:", project)
        print("Account:", account)

        if input("Confirm account and project? [y/N]").lower() != "y":
            return

        subprocess.run(
            [
                "gcloud",
                "compute",
                "instances",
                "create",
                name,
                "--image-project",
                image_project,
                "--image-family",
                image_family,
                "--boot-disk-size",
                size,
                "--machine-type",
                machine_type or "n2-custom-12-24576",
            ]
        )

        ip = (
            subprocess.run(
                [
                    "gcloud",
                    "compute",
                    "instances",
                    "describe",
                    name,
                    "--format",
                    "get(networkInterfaces[0].accessConfigs[0].natIP)",
                ],
                capture_output=True,
            )
            .stdout.decode()
            .strip()
        )
        print("IP address:", ip)
    else:
        subprocess.run(
            [
                "az",
                "group",
                "create",
                "-n",
                "audius-azure",
                "--location",
                "eastus",
            ],
        )

        subprocess.run(
            [
                "ssh-keygen",
                "-m",
                "PEM",
                "-t",
                "rsa",
                "-b",
                "4096",
                "-P",
                "",
                "-f",
                f"{os.getenv('HOME')}/.ssh/audius-azure",
            ],
            input=b"n\n",
            stdout=subprocess.DEVNULL,
        )

        subprocess.run(
            [
                "az",
                "vm",
                "create",
                "-n",
                name,
                "-g",
                "audius-azure",
                "--image",
                "UbuntuLTS",
                "--size",
                machine_type or "Standard_F8s_v2",
                "--os-disk-size-gb",
                size,
                "--ssh-key-values",
                f"{os.getenv('HOME')}/.ssh/audius-azure.pub",
                "--public-ip-sku",
                "Basic",
            ],
        )

        ip = (
            subprocess.run(
                [
                    "az",
                    "vm",
                    "list-ip-addresses",
                    "--name",
                    name,
                    "--resource-group",
                    "audius-azure",
                    "--query",
                    "[0].virtualMachine.network.publicIpAddresses[0].ipAddress",
                ],
                capture_output=True,
            )
            .stdout.decode()
            .strip()
            .strip('"')
        )  # TODO: process ip
        print("IP address:", ip)

    return ip


def setup(name, azure, service, config, user):
    if not azure:
        proc = subprocess.run(
            [
                "gcloud",
                "compute",
                "instances",
                "describe",
                name,
                "--format",
                "get(networkInterfaces[0].accessConfigs[0].natIP)",
            ],
            capture_output=True,
        )
    else:
        proc = (
            subprocess.run(
                [
                    "az",
                    "vm",
                    "list-ip-addresses",
                    "--name",
                    name,
                    "--resource-group",
                    "TestResourceGroup",
                ],
                capture_output=True,
            )
            .stdout.decode()
            .strip()
        )  # TODO: process ip

    ip = proc.stdout.decode().strip()
    if proc.returncode != 0:
        input(f"Creating new instance '{name}'. Press Enter to continue...")
        ip = create_instance(
            name,
            azure,
            "ubuntu-os-cloud",
            "ubuntu-2004-lts",
            "256",
            "n2-custom-12-24576",
        )

    host = f"{user}@{ip}"

    print("Waiting for instance to start")
    returncode = None
    while returncode != 0:
        response = subprocess.run(["ssh", host, ":"])
        returncode = response.returncode

    if service in ["creator-node", "discovery-provider"]:
        print("Setting up audius-k8s-manifests...")
        subprocess.run(
            [
                "ssh",
                host,
                (
                    "git clone https://github.com/AudiusProject/audius-k8s-manifests.git && "
                    "cd audius-k8s-manifests && "
                    "yes | sh setup.sh "
                ),
            ]
        )

        print("Waiting for instance to restart")
        returncode = None
        while returncode != 0:
            returncode = subprocess.run(["ssh", host, ":"])

        if config:
            print("Copying config...")
            subprocess.run(
                ["ssh", host, "cat > $MANIFESTS_PATH/config.yaml"],
                input=open(config).read(),
            )
        else:
            print("Warning no config specified")

    if service == "creator-node":
        print("Starting creator-node...")
        subprocess.run(
            [
                "ssh",
                host,
                "audius-cli launch creator-node --configure-ipfs",
            ]
        )
    elif service == "discovery-provider":
        print("Starting discovery-provider...")
        subprocess.run(
            [
                "ssh",
                host,
                "audius-cli launch discovery --seed-job --configure-ipfs",
            ]
        )
    elif service == "remote-dev":
        node_version = '14.18.1'
        python_version = '3.9'
        subprocess.run(
            [
                "ssh",
                "-o StrictHostKeyChecking=no", # auto-ssh in for setup
                host,
                (
                    "sudo apt update && "
                    "sudo apt install -y apt-transport-https ca-certificates curl software-properties-common build-essential python-is-python2 python3-pip git-secrets && "
                    "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - && "
                    "sudo sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable' && "
                    "sudo add-apt-repository ppa:deadsnakes/ppa &&" # python3.9 installation
                    "sudo apt update && "
                    f"sudo apt install -y docker-ce python{python_version} && "
                    "sudo usermod -aG docker $USER && "
                    'sudo curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose && '
                    "sudo chmod +x /usr/local/bin/docker-compose && "
                    "sudo chown $USER /etc/hosts && "
                    "curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash && "
                    "echo 'export PROTOCOL_DIR=$HOME/audius-protocol' >> ~/.profile && "
                    f"echo 'nvm use {node_version}' >> ~/.profile && "
                    "echo 'export AUDIUS_REMOTE_DEV_HOST=$(curl -sfL -H \"Metadata-Flavor: Google\" http://metadata/computeMetadata/v1/instance/network-interfaces/0/access-configs/0/external-ip)' >> ~/.profile && "
                    "source ~/.nvm/nvm.sh && "
                    "source ~/.profile && "
                    "source ~/.bashrc && "
                    f"nvm install v{node_version} && "
                    "git clone https://github.com/AudiusProject/audius-protocol.git; "
                    "git clone https://github.com/AudiusProject/audius-client.git; "
                    "cd audius-protocol/service-commands && "
                    "npm install && "
                    "node scripts/hosts.js add && "
                    "node scripts/setup.js run init-repos up && "
                    "echo 'Rebooting machine...' && "
                    "reboot"
                ),
            ]
        )

        if input("Configure local /etc/hosts? [y/N]").lower() == "y":
            subprocess.run(
                [
                    "sudo",
                    "-E",
                    f"AUDIUS_REMOTE_DEV_HOST={ip}",
                    "node",
                    f"{os.getenv('PROTOCOL_DIR', './')}/service-commands/scripts/hosts.js",
                    "add-remote-host",
                ]
            )

        print(
            "Follow https://www.notion.so/audiusproject/Remote-Dev-Setup-Services-Client-Linux-2597a6467d1f4dae824c0593582ad671#88c7365275c645f0be45acc2a9b87319 to setup github ssh key"
        )


def main():
    parser = argparse.ArgumentParser(
        description="",  # TODO
        exit_on_error=False,
    )

    subparser = parser.add_subparsers(
        title="operations",
        dest="operation",
        required=True,
    )

    parser_create_instance = subparser.add_parser(
        "create-instance",
        help="Create instance on GCP with specified options",
    )

    parser_create_instance.add_argument(
        "--azure",
        action="store_true",
        help="Use Azure instead of GCP",
    )

    parser_create_instance.add_argument(
        "--image-family",
        default="ubuntu-2004-lts",
        help="Image to use for creating the instance",
    )

    parser_create_instance.add_argument(
        "--image-project",
        default="ubuntu-os-cloud",
        help="Image project to fetch image from",
    )

    parser_create_instance.add_argument(
        "--size",
        default="256",
        help="Size of disk to create",
    )

    parser_create_instance.add_argument(
        "--machine-type",
        default=None,
        help="Machine type to use for the instance",
    )

    parser_create_instance.add_argument(
        "name",
        help="Name of instance to create",
    )

    parser_setup = subparser.add_parser(
        "setup",
        help="",  # TODO
    )

    parser_setup.add_argument(
        "--config",
        help="path to config",
    )

    parser_setup.add_argument(
        "--azure",
        action="store_true",
        help="Use Azure instead of GCP",
    )

    parser_setup.add_argument(
        "--user",
        default="ubuntu",
        help="user to login as",
    )

    parser_setup.add_argument(
        "service",
        choices=["creator-node", "discovery-provider", "remote-dev"],
        help="",  # TODO
    )

    parser_setup.add_argument(
        "name",
        help="name of gcp instance to do setup on",
    )

    try:
        args = parser.parse_args()

        if args.operation == "create-instance":
            create_instance(
                args.name,
                args.azure,
                args.image_project,
                args.image_family,
                args.size,
                args.machine_type,
            )
        elif args.operation == "setup":
            setup(args.name, args.azure, args.service, args.config, args.user)
    except argparse.ArgumentError:
        subprocess.run(
            [
                "node",
                f"{os.getenv('PROTOCOL_DIR', './')}/service-commands/scripts/setup.js",
                *sys.argv[1:],
            ]
        )


if __name__ == "__main__":
    main()
