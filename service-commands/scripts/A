#!/usr/bin/env python3.9
"""Script to help with deployment of audius nodes"""

import argparse
import os
import subprocess
import sys
import time


DEFAULT_AZURE_IMAGE = "UbuntuLTS"
DEFAULT_GCP_IMAGE = "project=ubuntu-os-cloud,family=ubuntu-2004-lts"
DEFAULT_DISK_SIZE = 256
DEFAULT_AZURE_MACHINE_TYPE = "Standard_F8s_v2"
DEFAULT_GCP_MACHINE_TYPE = "n2-custom-12-24576"
GCP_DEV_IMAGE = "project=audius-infrastructure,image=audius-dev-poc"


def _generate_ssh_key(path):
    """Generate a ssh key and store it at specified path"""
    return (
        subprocess.run(
            [
                "ssh-keygen",
                "-m",
                "PEM",
                "-t",
                "rsa",
                "-b",
                "4096",
                "-P",
                "",
                "-f",
                path,
            ],
            check=False,
        ).returncode
        == 0
    )


def _get_ssh_args(provider, name, user):
    """Get ssh arguments for logging into provided instance"""
    if provider == "azure":
        return ["az", "ssh", "vm", "--vm-name", name]  # TODO: make sure this works
    if provider == "gcp":
        return ["gcloud", "compute", "ssh", f"{user}@{name}", "--"]
    if provider == "raw":
        return ["ssh", f"{user}@{name}"]
    print("Unknown provider", provider, file=sys.stderr)
    sys.exit(1)


def _get_azure_ip_addr(name):
    """Get ip address of instance on azure"""
    proc = subprocess.run(
        [
            "az",
            "vm",
            "list-ip-addresses",
            "--name",
            name,
            "--query",
            "[0].virtualMachine.network.publicIpAddresses[0].ipAddress",
            "-o",
            "tsv",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print(
            f"Failed to get ip of instance (provider = azure, name = {name})",
            file=sys.stderr,
        )
        sys.exit(1)

    return proc.stdout.decode().strip()


def _get_gcp_ip_addr(name):
    """Get ip address of instance on gcp"""
    proc = subprocess.run(
        [
            "gcloud",
            "compute",
            "instances",
            "describe",
            name,
            "--format",
            "get(networkInterfaces[0].accessConfigs[0].natIP)",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print(
            f"Failed to get ip of instance (provider = gcp, name = {name})",
            file=sys.stderr,
        )
        sys.exit(1)

    return proc.stdout.decode().strip()


def _get_ip_addr(provider, name):
    """Get ip address of remote machine"""
    if provider == "azure":
        return _get_azure_ip_addr(name)
    if provider == "gcp":
        return _get_gcp_ip_addr(name)
    if provider == "raw":
        return name
    print("Unknown provider", provider, file=sys.stderr)
    sys.exit(1)


def _azure_instance_exists(name):
    """Returns whether a instance with given name exists on azure"""
    return (
        subprocess.run(
            [
                "az",
                "vm",
                "show",
                "-n",
                name,
            ],
            capture_output=True,
            check=False,
        ).returncode
        == 0
    )


def _gcp_instance_exists(name):
    """Returns whether a instance with given name exists on gcp"""
    return (
        subprocess.run(
            [
                "gcloud",
                "compute",
                "instances",
                "describe",
                name,
            ],
            capture_output=True,
            check=False,
        ).returncode
        == 0
    )


def _instance_exists(provider, name):
    """Returns whether a instance with given name exists on the given provider"""
    if provider == "azure":
        return _azure_instance_exists(name)
    if provider == "gcp":
        return _gcp_instance_exists(name)
    return True


def _wait_for_instance(provider, name, user):
    """Wait for instance to be ready"""
    ssh_args = _get_ssh_args(provider, name, user)
    while subprocess.run([*ssh_args, ":"], check=False).returncode != 0:
        time.sleep(1)


def _get_azure_account():
    """Get email of user associated with default subscription on az"""
    proc = subprocess.run(
        [
            "az",
            "account",
            "list",
            "--query",
            "[?isDefault] | [0].user.name",
            "-o",
            "tsv",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print("Failed to retrieve azure account", file=sys.stderr)
        sys.exit(1)

    return proc.stdout.decode().strip()


def _get_azure_subscription():
    """Get default subscription on az"""
    proc = subprocess.run(
        [
            "az",
            "account",
            "list",
            "--query",
            "[?isDefault] | [0].name",
            "-o",
            "tsv",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print("Failed to retrive azure subscription", file=sys.stderr)
        sys.exit(1)

    return proc.stdout.deocde().strip()


def _get_azure_resource_group():
    """Get default resouce group on az"""
    proc = subprocess.run(
        [
            "az",
            "config",
            "get",
            "defaults.group",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print("Failed to get azure resource group", file=sys.stderr)
        sys.exit(1)

    return proc.stdout.decode().strip()


def _get_gcp_account():
    """Get default account name on gcloud"""
    proc = subprocess.run(
        [
            "gcloud",
            "config",
            "list",
            "account",
            "--format",
            "value(core.account)",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print("Failed to get gcp account", file=sys.stderr)
        sys.exit(1)

    return proc.stdout.decode().strip()


def _get_gcp_project():
    """Get default project on gcloud"""
    proc = subprocess.run(
        [
            "gcloud",
            "config",
            "get-value",
            "project",
        ],
        capture_output=True,
        check=False,
    )

    if proc.returncode != 0:
        print("Failed to get gcp project", file=sys.stderr)
        sys.exit(1)

    return proc.stdout.decode().strip()


def _setup_audius_k8s_manifests(provider, user, config, name):
    """Setup audius-k8s-manifests on a remote machine"""
    ssh_args = _get_ssh_args(provider, name, user)

    success = (
        subprocess.run(
            [
                *ssh_args,
                (
                    "git clone https://github.com/AudiusProject/audius-k8s-manifests.git &&"
                    "yes | sh audius-k8s-manifests/setup.sh"
                ),
            ],
            check=False,
        ).returncode
        == 0
    )
    if not success:
        return False

    print("Waiting for instance to restart")
    _wait_for_instance(provider, name, user)

    if not config:
        print("Warning no audius-k8s-config specified", file=sys.stderr)
        return True

    with open(config, encoding="locale") as config_file:
        success = (
            subprocess.run(
                [*ssh_args, "cat > $MANIFESTS_PATH/config.yaml"],
                input=config_file.read(),
                check=False,
            ).returncode
            == 0
        )

    return success


def _configure_local_hosts(ip_addr):
    """Configure local /etc/hosts file"""
    return (
        subprocess.run(
            [
                "sudo",
                "-E",
                f"AUDIUS_REMOTE_DEV_HOST={ip_addr}",
                "node",
                f"{os.getenv('PROTOCOL_DIR', '.')}/service-commands/scripts/hosts.js",
                "add-remote-host",
            ],
            check=False,
        ).returncode
        == 0
    )


def _create_azure_instance(image, disk_size, machine_type, name):
    """Create an instance on azure"""
    image = image or DEFAULT_AZURE_IMAGE
    machine_type = machine_type or DEFAULT_AZURE_MACHINE_TYPE
    disk_size = str(disk_size)

    print("\033[1mProvider:       \033[0m", "Azure")
    print("\033[1mAccount:        \033[0m", _get_azure_account())
    print("\033[1mSubscription:   \033[0m", _get_azure_subscription())
    print("\033[1mResource Group: \033[0m", _get_azure_resource_group())
    print("\033[1mOS Image:       \033[0m", image)
    print("\033[1mDisk Size:      \033[0m", disk_size + "GB")
    print("\033[1mMachine Type:   \033[0m", machine_type)
    print("\033[1mName:           \033[0m", name)
    print()
    if input("Confirm options? [y/N] ").lower() != "y":
        return

    ssh_key_path = os.path.expanduser("~/.ssh/audius-azure")
    if not os.path.exists(ssh_key_path):
        success = _generate_ssh_key(ssh_key_path)
        if not success:
            print("Failed to generate an ssh key", file=sys.stderr)

    proc = subprocess.run(
        [
            "az",
            "vm",
            "create",
            "--name",
            name,
            "--image",
            image,
            "--os-disk-size-gb",
            disk_size,
            "--size",
            machine_type,
            "--public-ip-sku",
            "Basic",
            "--ssh-key-values",
            f"{ssh_key_path}.pub",
        ],
        check=False,
    )
    if proc.returncode != 0:
        print("Failed to create azure instance", file=sys.stderr)
        sys.exit(1)


def _create_gcp_instance(image, disk_size, machine_type, name):
    """Create an instance on gcp"""
    image = image or DEFAULT_GCP_IMAGE
    machine_type = machine_type or DEFAULT_GCP_MACHINE_TYPE
    disk_size = str(disk_size)

    invalid_image = False
    image_parsed = {}
    for component in image.split(","):
        if component.count("=") != 1:
            invalid_image = True
            break
        key, value = component.split("=")
        image_parsed[key] = value
        if key == "family":
            del image_parsed["image"]
        elif key == "image":
            del image_parsed["family"]
        else:
            invalid_image = True
            break
    if invalid_image or not (image_parsed["image"] or image_parsed["family"]):
        print("Invalid image:", image, file=sys.stderr)
        sys.exit(1)

    print("\033[1mProvider:      \033[0m", "GCP")
    print("\033[1mAccount:       \033[0m", _get_gcp_account())
    print("\033[1mProject:       \033[0m", _get_gcp_project())
    if image_parsed["project"]:
        print("\033[1mImage Project: \033[0m", image_parsed["project"])
    if image_parsed["family"]:
        print("\033[1mImage Family:  \033[0m", image_parsed["family"])
    else:
        print("\033[1mImage:         \033[0m", image_parsed["image"])
    print("\033[1mDisk Size:     \033[0m", disk_size + "GB")
    print("\033[1mMachine Type:  \033[0m", machine_type)
    print("\033[1mName:          \033[0m", name)
    print()
    if input("Confirm options? [y/N] ").lower() != "y":
        return

    image_args = []
    for key, value in image_parsed.items():
        if key == "project":
            image_args.extend(["--image-project", value])
        elif key == "family":
            image_args.extend(["--image-family", value])
        elif key == "image":
            image_args.extend(["--image", value])

    proc = subprocess.run(
        [
            "gcloud",
            "compute",
            "instances",
            "create",
            name,
            *image_args,
            "--boot-disk-size",
            disk_size,
            "--machine-type",
            machine_type,
        ],
        check=False,
    )
    if proc.returncode != 0:
        print("Failed to create gcp instance", file=sys.stderr)
        sys.exit(1)


def create_instance(provider, image, disk_size, machine_type, name):
    """Create instance with provided options"""
    if provider == "azure":
        _create_azure_instance(image, disk_size, machine_type, name)
    elif provider == "gcp":
        _create_gcp_instance(image, disk_size, machine_type, name)


def setup_creator_node(provider, user, config, name):
    """Setup creator-node on a remote machine"""
    if not _instance_exists(provider, name):
        if input("Instance does not exist. Create it? [Y/n] ").lower() != "n":
            return
        create_instance(provider, DEFAULT_DISK_SIZE, None, name, True)

    print("Waiting for instance to start")
    _wait_for_instance(provider, name, user)

    print("Setting up audius-k8s-manifests")
    success = _setup_audius_k8s_manifests(provider, user, config, name)
    if not success:
        print("Failed to setup audius-k8s-manifests on remote machine")
        sys.exit(1)

    print("Starting creator-node")
    success = (
        subprocess.run(
            [
                *_get_ssh_args(provider, name, user),
                "audius-cli launch creator-node --configure-ipfs",
            ],
            check=False,
        ).returncode
        == 0
    )
    if not success:
        print("Failed to start creator-node", file=sys.stderr)
        sys.exit(1)


def setup_discovery_provider(provider, user, config, name):
    """Setup discovery-provider on a remote machine"""
    if not _instance_exists(provider, name):
        if input("Instance does not exist. Create it? [Y/n] ").lower() != "n":
            return
        create_instance(provider, DEFAULT_DISK_SIZE, None, name, True)

    print("Waiting for instance to start")
    _wait_for_instance(provider, name, user)

    print("Setting up audius-k8s-manifests")
    success = _setup_audius_k8s_manifests(provider, user, config, name)
    if not success:
        print("Failed to setup audius-k8s-manifests on remote machine")
        sys.exit(1)

    print("Starting discovery-provider")
    success = (
        subprocess.run(
            [
                *_get_ssh_args(provider, name, user),
                "audius-cli launch discovery-provider --seed-job --configure-ipfs",
            ],
            check=False,
        ).returncode
        == 0
    )
    if not success:
        print("Failed to start discovery-provider", file=sys.stderr)
        sys.exit(1)


def setup_remote_dev(provider, user, fast, up, protocol_git_ref, client_git_ref, name):
    """Setup a environment suitable for development on a remote machine"""
    if fast and provider == "gcp":
        print("--fast is currently only supported on gcp", file=sys.stderr)
        sys.exit(1)

    if not _instance_exists(provider, name):
        if input("Instance does not exist. Create instance? [Y/n] ").lower() != "n":
            return
        image = GCP_DEV_IMAGE if fast else None
        create_instance(provider, DEFAULT_DISK_SIZE, image, name, True)

    print("Waiting for instance to start")
    _wait_for_instance(provider, name, user)

    if not fast:
        print("Setting up audius-protocol")
        success = (
            subprocess.run(
                [
                    *_get_ssh_args(provider, name, user),
                    (
                        "git clone https://github.com/AudiusProject/audius-protocol.git &&"
                        "yes | bash audius-protocol/service-commands/scripts/provision-dev-env.sh"
                    ),
                ],
                check=False,
            ).returncode
            == 0
        )
        if not success:
            print("Failed to setup audius-protocol", file=sys.stderr)
            sys.exit(1)
        print("Waiting for instance to restart")
        _wait_for_instance(provider, name, user)

    success = (
        subprocess.run(
            [
                *_get_ssh_args(provider, name, user),
                (
                    "cd ~/audius-protocol.git &&"
                    "git fetch origin &&"
                    f"git checkout {protocol_git_ref} &&"
                    "git pull &&"
                    "cd ~/audius-client.git &&"
                    "git fetch origin &&"
                    f"git checkout {client_git_ref} &&"
                    "git pull"
                ),
            ],
            check=False,
        ).returncode
        == 0
    )
    if not success:
        print("Failed to use specified git refs", file=sys.stderr)
        sys.exit(1)

    if up:
        print("Starting local dev stack")
        success = (
            subprocess.run(
                [
                    *_get_ssh_args(provider, name, user),
                    "A up",
                ],
                check=False,
            ).returncode
            == 0
        )
        if not success:
            print("Failed to start local dev stack", file=sys.stderr)
            sys.exit(1)

    if input("Configure local /etc/hosts? [y/N] ").lower() == "y":
        success = _configure_local_hosts(_get_ip_addr(provider, name))
        if not success:
            print("Failed to configure local /etc/hosts", file=sys.stderr)
            sys.exit(1)


def main():
    parser = argparse.ArgumentParser(exit_on_error=False)

    subparser = parser.add_subparsers(
        title="operations",
        dest="operation",
        required=True,
    )

    parser_create_instance = subparser.add_parser(
        "create-instance",
        help="create instance on azure/gcp with specified options",
    )

    parser_create_instance.add_argument(
        "--provider",
        choices=["azure", "gcp"],
        default="gcp",
        help="the provider to create the instance on (default: %(default)s)",
    )

    parser_create_instance.add_argument(
        "--image",
        type=str,
        help=f"image to use for creating the instance; use the format project=<project>,(family=<family>|image=<image>) for specifying images on gcp (defaults: {DEFAULT_AZURE_IMAGE} (azure), {DEFAULT_GCP_IMAGE} (gcp))",
    )

    parser_create_instance.add_argument(
        "--disk-size",
        default=DEFAULT_DISK_SIZE,
        help="size of disk in gb to use for the instance (default: %(default)s)",
    )

    parser_create_instance.add_argument(
        "--machine-type",
        type=str,
        help="machine type to use for the instance (defaults: {DEFAULT_AZURE_MACHINE_TYPE} (azure), {DEFAULT_GCP_MACHINE_TYPE} (gcp))",
    )

    parser_create_instance.add_argument(
        "name",
        help="name to assign to the created instance",
    )

    parser_setup = subparser.add_parser(
        "setup",
        help="setup specified service on a remote machine",
    )

    parser_setup.add_argument(
        "--provider",
        choices=["azure", "gcp", "raw"],
        default="gcp",
        help="provider on which the remote machine exists; specify raw for using a ip directly (default: %(default)s)",
    )

    parser_setup.add_argument(
        "--user",
        default="ubuntu",
        help="user to login in as (default: %(default)s)",
    )

    parser_setup.add_argument(
        "--config",
        help="audius-cli config to use (only used for creator-node and discovery-provider)",
    )

    parser_setup.add_argument(
        "--fast",
        action="store_true",
        help="expect instance to be using prebaked dev image (only used for remote-dev and only supported on gcp)",
    )

    parser_setup.add_argument(
        "--up",
        action="store_true",
        help="start local dev stack after setting up audius-protcol (only used for remote-dev)",
    )

    parser_setup.add_argument(
        "--protocol-git-ref",
        default="master",
        help="git ref to use for audius-protcol (only used for remote-dev) (default: master)",
    )

    parser_setup.add_argument(
        "--client-git-ref",
        default="master",
        help="git ref to use for audius-client (only used for remote-dev) (default: master)",
    )

    parser_setup.add_argument(
        "service",
        choices=["creator-node", "discovery-provider", "remote-dev"],
        help="service to setup on the remote machine",
    )

    parser_setup.add_argument(
        "name",
        help="name of machine on which to setup the service",
    )

    try:
        args = parser.parse_args()

        if args.operation == "create-instance":
            create_instance(
                args.provider, args.image, args.disk_size, args.machine_type, args.name
            )
        elif args.operation == "setup":
            if args.service == "creator-node":
                setup_creator_node(args.provider, args.user, args.config, args.name)
            elif args.service == "discovery-provider":
                setup_discovery_provider(
                    args.provider, args.user, args.config, args.name
                )
            elif args.service == "remote-dev":
                setup_remote_dev(
                    args.provider,
                    args.user,
                    args.fast,
                    args.up,
                    args.protocol_git_ref,
                    args.client_git_ref,
                    args.name,
                )
    except argparse.ArgumentError:
        subprocess.run(
            [
                "node",
                f"{os.getenv('PROTOCOL_DIR', './')}/service-commands/scripts/setup.js",
                *sys.argv[1:],
            ]
        )


if __name__ == "__main__":
    main()
